; Pass 1...

; 0 errors detected in pass 1

; Pass 2...
; 1                       ; Tetris implementation
; 2                       ; Ryan Crosby 2022
; 3                       ;
; 4                       ; Run from 0x01.
; 5                       ;
; 6                       ; Controls:
; 7                       ;
; 8                       ; Relay computer numpad is used to control the game.
; 9                       ;
; 10                      ; 2: Move piece down
; 11                      ; 4: Move piece left
; 12                      ; 6: Move piece right
; 13                      ; 7: Rotate piece left
; 14                      ; 9: Rotate piece right
; 15                      ;
; 16                      ; Game is rendered to console output.
; 17                      ;
; 18                      ; TODO:
; 19                      ;
; 20                      ; * Game over (Current code infinite loops on game over)
; 21                      ; * Further optimise code to free up some instruction space to implement above TODOs.
; 22                      ;
; 23                      
; 24                      ; =========
; 25                      ; Constants
; 26                      ; =========
; 27                      
; 28                      ; Gameboard parameters
; 29                      ; These constants are used for convenience. Changing the value won't change the actual sizes of the gameboards, code will need to be modified as well.
; 30      0000_0000       GAMEBOARD_STRIDE	equ	2	; How many bytes high is the gameboard. 2 bytes = 16 rows.
; 31      0000_0000       GAMEBOARD_COLS	equ	10	; How many columns wide is the gameboard. This is generic enough that it can be adjusted without altering any code.
; 32      0000_0000       GAMEBOARD_SIZE	equ	(GAMEBOARD_STRIDE*GAMEBOARD_COLS)	; Gameboard total size = stride * columns
; 33                      
; 34      0000_0000       PIECE_STAGE_SIZE	equ	(GAMEBOARD_STRIDE*4)	; The piece stage is the same height as the gameboard, but only 4 wide.
; 35                      
; 36      0000_0000       PIECE_X_OFFSET	equ	3	; The piece always spawns at x = 0. This offsets the piece so that x = 0 aligns with the center of the board.
; 37                      
; 38      0000_0000       SPACE_CHAR	equ	0x20	; Space
; 39      0000_0000       BLOCK_CHAR	equ	0x23	; #
; 40      0000_0000       EMPTY_CHAR	equ	0x7E 	; ~
; 41      0000_0000       BAR_CHAR	equ	0x7C	; |
; 42                      
; 43      0000_0000       CR_CHAR	equ	0x0D	; Carriage Return CR \r
; 44      0000_0000       LF_CHAR	equ	0x0A	; Linefeed LF \n
; 45                      
; 46                      ; Additional custom instructions
; 47                      ; To use these, call them like: insn INCTO_INSN aa, bb
; 48      0000_0000       IMADD_INSN	equ	0xC0800000	; aa + [bb] --> [aa]. Immediate version of ADD. If aa is 0, allows single instruction LOAD of [bb] to [0].
; 49      0000_0000       AND_INSN	equ	0x81800000	; The WRA version of andto. ANDs [aa] and [bb], and stores in [aa].
; 50      0000_0000       CLRA_INSN	equ	0x81000000	; Stores 0 --> [aa]. Implemented as [aa] & 0 --> [aa].
; 51      0000_0000       INCA_INSN	equ	0x80200000	; Stores [aa] + 1 --> [aa] in one instruction.
; 52      0000_0000       INCTO_INSN	equ	0x08200000	; Stores [aa] + 1 --> [bb] in one instruction.
; 53      0000_0000       ALTB_TOC_INSN	equ	0x00C00000	; Stores [aa] < [bb] --> Carry.
; 54      0000_0000       ALEB_TOC_INSN	equ	0x00E00000	; Stores [aa] <= [bb] --> Carry.
; 55      0000_0000       ST_JMP_INSN	equ	0x08080000	; Stores [aa] --> [bb] and jumps to bb.
; 56      0000_0000       OUTC_JMP_INSN	equ	0x98080000	; Writes [aa] to the console and jumps to bb. WRA and WRB are set to make OUT write to console.
; 57      0000_0000       LSR_JCC_INSN	equ	0x820A0000	; Rotates [aa] right, writes the result back to [aa], and jumps if the shifted out bit (carry output) was clear.
; 58      0000_0000       INCJMP_INSN	equ	0x80280000	; Stores [aa] + 1 --> [aa] and unconditionally jumps to bb
; 59                      
; 60                      ; Pieces templates
; 61                      ;
; 62                      ; Piece patterns are stored as a single byte.
; 63                      ; The 4 lsb bits represent the left of the piece, the 4 msb bits representing the right of the piece.
; 64                      ; The alignment and bit direction matches the piece stage.
; 65                      ;
; 66                      ; A "flipped" version of each piece is also stored, which is similar to the piece being left-to-right bitswapped.
; 67                      ; However using a dedicated version of the flipped piece removes the need for a bitswap subroutine,
; 68                      ; which actually saves instructions overall, and also allows the pieces to be tweaked so that they rotate correctly.
; 69                      ;
; 70                      ; The Gameboy left-handed rotation system was used as a reference, but the code doesn't attempt to exactly adhere to any particular system,
; 71                      ; it just attempts to look somewhat acceptable and use minimal instructions.
; 72                      
; 73                      
; 74                      ; I piece
; 75                      ;
; 76                      ;3   7
; 77                      ; 0 1
; 78                      ; 0 1
; 79                      ; 0 1
; 80                      ; 0 1
; 81                      ;0   4
; 82      0000_0000       I_PIECE	equ	0xF0
; 83      0000_0000       I_PIECE_FLIP	equ	I_PIECE	; I piece is the same flipped
; 84                      
; 85                      ; O (square) piece
; 86                      ;
; 87                      ;3   7
; 88                      ; 0 0
; 89                      ; 1 1
; 90                      ; 1 1
; 91                      ; 0 0
; 92                      ;0   4
; 93      0000_0000       O_PIECE	equ	0x66
; 94      0000_0000       O_PIECE_FLIP	equ	O_PIECE	; Square is same in any rotation
; 95                      
; 96                      ; T piece
; 97                      ;
; 98                      ;3   7
; 99                      ; 0 0
; 100                     ; 1 0
; 101                     ; 1 1
; 102                     ; 1 0
; 103                     ;0   4
; 104     0000_0000       T_PIECE	equ	0x27
; 105                     
; 106                     ; T piece flipped
; 107                     ;
; 108                     ;3   7
; 109                     ; 0 0
; 110                     ; 0 1
; 111                     ; 1 1
; 112                     ; 0 1
; 113                     ;0   4
; 114     0000_0000       T_PIECE_FLIP	equ	0x72
; 115                     
; 116                     ; S piece
; 117                     ;
; 118                     ;3   7
; 119                     ; 0 0
; 120                     ; 1 0
; 121                     ; 1 1
; 122                     ; 0 1
; 123                     ;0   4
; 124     0000_0000       S_PIECE	equ	0x36
; 125     0000_0000       S_PIECE_FLIP	equ	S_PIECE	; S piece is the same rotated
; 126                     
; 127                     ; S piece
; 128                     ;
; 129                     ;3   7
; 130                     ; 0 0
; 131                     ; 0 1
; 132                     ; 1 1
; 133                     ; 1 0
; 134                     ;0   4
; 135     0000_0000       Z_PIECE	equ	0x63
; 136     0000_0000       Z_PIECE_FLIP	equ	Z_PIECE	; Z piece is the same rotated
; 137                     
; 138                     ; J piece
; 139                     ;
; 140                     ;3   7
; 141                     ; 0 0
; 142                     ; 0 1
; 143                     ; 0 1
; 144                     ; 1 1
; 145                     ;0   4
; 146     0000_0000       J_PIECE	equ	0x71
; 147                     
; 148                     ; J piece flipped
; 149                     ;
; 150                     ;3   7
; 151                     ; 0 0
; 152                     ; 1 1
; 153                     ; 1 0
; 154                     ; 1 0
; 155                     ;0   4
; 156     0000_0000       J_PIECE_FLIP	equ	0x47
; 157                     
; 158                     ; L piece
; 159                     ;
; 160                     ;3   7
; 161                     ; 0 0
; 162                     ; 1 0
; 163                     ; 1 0
; 164                     ; 1 1
; 165                     ;0   4
; 166     0000_0000       L_PIECE	equ	0x17
; 167                     
; 168                     ; L piece flipped
; 169                     ;
; 170                     ;3   7
; 171                     ; 0 0
; 172                     ; 1 1
; 173                     ; 0 1
; 174                     ; 0 1
; 175                     ;0   4
; 176     0000_0000       L_PIECE_FLIP	equ	0x74
; 177                     
; 178                     ; ================
; 179                     ; Application code
; 180                     ; ================
; 181                     
; 182                     ; Temporary variable tmp at address 0x00.
; 183                     ;
; 184                     ; Used as a halt catch for any jumps to null (0x00). This usually indicates a subroutine hasn't had its return address set.
; 185                     ; Also used as a temporary storage register, and sometimes as the return value for subroutines that only need to return a status.
; 186                     
; 187     00              	org	0x00
; 189     00 c810_ff00    tmp	halt
; 190                     
; 191                     ; ENTRY POINT
; 192     01              	org	0x01
; 195                     
; 196     01 8100_0100    lines_cleared	insn CLRA_INSN	lines_cleared,	0
; 197     02 8100_0200    piece_kind	insn CLRA_INSN	piece_kind,	0
; 198     03 8100_0300    piece_rotation	insn CLRA_INSN	piece_rotation,	0
; 199     04 8100_0400    piece_x	insn CLRA_INSN	piece_x,	0
; 200     05 8100_0500    piece_y	insn CLRA_INSN	piece_y,	0
; 201     06 8100_0600    undo_retry_count	insn CLRA_INSN	undo_retry_count,	0
; 202                     
; 235                     
; 236     07 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at column -1
; 237     08 0000_00ff    	insn 0x00000000	,	0xFF
; 239     09 8100_0900    	insn CLRA_INSN	gameboard+0,	0
; 240     0a 8100_0a00    	insn CLRA_INSN	gameboard+1,	0
; 241     0b 8100_0b00    	insn CLRA_INSN	gameboard+2,	0
; 242     0c 8100_0c00    	insn CLRA_INSN	gameboard+3,	0
; 243     0d 8100_0d00    	insn CLRA_INSN	gameboard+4,	0
; 244     0e 8100_0e00    	insn CLRA_INSN	gameboard+5,	0
; 245     0f 8100_0f00    	insn CLRA_INSN	gameboard+6,	0
; 246     10 8100_1000    	insn CLRA_INSN	gameboard+7,	0
; 247     11 8100_1100    	insn CLRA_INSN	gameboard+8,	0
; 248     12 8100_1200    	insn CLRA_INSN	gameboard+9,	0
; 249     13 8100_1300    	insn CLRA_INSN	gameboard+10,	0
; 250     14 8100_1400    	insn CLRA_INSN	gameboard+11,	0
; 251     15 8100_1500    	insn CLRA_INSN	gameboard+12,	0
; 252     16 8100_1600    	insn CLRA_INSN	gameboard+13,	0
; 253     17 8100_1700    	insn CLRA_INSN	gameboard+14,	0
; 254     18 8100_1800    	insn CLRA_INSN	gameboard+15,	0
; 255     19 8100_1900    	insn CLRA_INSN	gameboard+16,	0
; 256     1a 8100_1a00    	insn CLRA_INSN	gameboard+17,	0
; 257     1b 8100_1b00    	insn CLRA_INSN	gameboard+18,	0
; 258     1c 8100_1c00    	insn CLRA_INSN	gameboard+19,	0
; 259     1d 0000_00ff    	insn 0x00000000	,	0xFF	; no-op/clc, but specified as custom instruction se we can set B value.
; 260     1e 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at column 11
; 263     1f 8100_1f00    stamp_flag	insn CLRA_INSN	stamp_flag,	0
; 265     20 8100_2000    hard_drop_flag	insn CLRA_INSN	hard_drop_flag,	0
; 266                     
; 270     21 40e0_0602    	insn ALEB_TOC_INSN	#6,	piece_kind	; Set carry if piece_kind >= 6.
; 271     22 4890_0102    	adcto	#1,	piece_kind	; If carry set, increment by 2, otherwise increment by 1.
; 272     23 4980_0702    	andto	#0x07,	piece_kind	; Clear all bits above first three so that value wraps.
; 275     24 8100_2400    prev_piece_rotation	insn CLRA_INSN	prev_piece_rotation,	0
; 276     25 8100_2500    prev_piece_x	insn CLRA_INSN	prev_piece_x,	0
; 277     26 8100_2600    prev_piece_y	insn CLRA_INSN	prev_piece_y,	0
; 283     27 802a_0629    	incjne	undo_retry_count,	main_not_game_over	; Check if out of undo retries.
; 284     28 d808_5800    	insn OUTC_JMP_INSN	#0x58,	stop	; Print 'X' and halt.
; 286     29 8408_6865    	jsr	undo_piece_state_ret,	undo_piece_state
; 312     2a 8100_2a00    	insn CLRA_INSN	piece_stage+0,	0
; 313     2b 8100_2b00    	insn CLRA_INSN	piece_stage+1,	0
; 314     2c 8100_2c00    	insn CLRA_INSN	piece_stage+2,	0
; 315     2d 8100_2d00    	insn CLRA_INSN	piece_stage+3,	0
; 316     2e 8100_2e00    	insn CLRA_INSN	piece_stage+4,	0
; 317     2f 8100_2f00    	insn CLRA_INSN	piece_stage+5,	0
; 318     30 8100_3000    	insn CLRA_INSN	piece_stage+6,	0
; 319     31 8100_3100    	insn CLRA_INSN	piece_stage+7,	0
; 322     32 8408_9069    	jsr	prep_piece_ret,	prep_piece
; 325     33 0800_0500    	st	piece_y,	tmp
; 326     34 8408_9f91    	jsr	shift_piece_ret,	shift_piece
; 334     35 4800_aaa9    	st	#stamp_piece_coll_op,	stamp_piece_op
; 335     36 8408_b6a0    	jsr	stamp_piece_ret,	stamp_piece
; 336     37 006a_0027    	jne	tmp,	main_undo_then_render	; We have a collision. Undo changes and re-render.
; 337     38 4800_fe06    	st	#-2,	undo_retry_count	; Reset retry count every time an undo isn't required.
; 340     39 4800_aea9    	st	#stamp_piece_merge_op,	stamp_piece_op
; 341     3a 8408_b6a0    	jsr	stamp_piece_ret,	stamp_piece
; 344     3b 0062_1f3e    	jeq	stamp_flag,	main_no_stamp_flag
; 346     3c 8408_dfcb    	jsr	line_clr_ret,	line_clr
; 347     3d 4018_ff1f    	jmp	main_next_piece
; 350     3e 8408_cab7    	jsr	render_board_ret,	render_board
; 351                     
; 353     3f 4800_b0a9    	st	#stamp_piece_clear_op,	stamp_piece_op
; 354     40 8408_b6a0    	jsr	stamp_piece_ret,	stamp_piece
; 355                     
; 357     41 8408_6461    	jsr	save_piece_state_ret,	save_piece_state
; 358                     
; 363     42 e800_0000    	inwait	tmp
; 364     43 0860_0000    	neg	tmp	; Invert tmp so we can incjeq
; 369     44 4880_0100    	inc	tmp
; 370     45 8022_004e    	incjeq	tmp,	main_move_drop
; 374     46 4880_0100    	inc	tmp
; 375     47 8022_005a    	incjeq	tmp,	main_move_left
; 379     48 4880_0100    	inc	tmp
; 380     49 8022_005c    	incjeq	tmp,	main_move_right
; 384     4a 8022_005d    	incjeq	tmp,	main_rot_left
; 388     4b 8022_0060    	incjeq	tmp,	main_hard_drop
; 392     4c 8022_005f    	incjeq	tmp,	main_rot_right
; 393                     
; 395     4d d808_3f42    	insn OUTC_JMP_INSN	#0x3F,	main_read_input	; Print '?'
; 398     4e 48e0_0105    	dec	piece_y
; 399     4f 4800_ff00    	st	#-1,	tmp
; 400     50 8408_9f91    	jsr	shift_piece_ret,	shift_piece
; 403     51 0062_0053    	jeq	tmp,	main_move_drop_2
; 406     52 8028_1f39    	insn INCJMP_INSN	stamp_flag,	main_full_render	; Re-render board and restart game loop.
; 409     53 4800_aaa9    	st	#stamp_piece_coll_op,	stamp_piece_op
; 410     54 8408_b6a0    	jsr	stamp_piece_ret,	stamp_piece
; 411     55 0062_0057    	jeq	tmp,	main_move_drop_3	; If no collision, jump to main_move_drop_3
; 414     56 8028_1f27    	insn INCJMP_INSN	stamp_flag,	main_undo_then_render	; Undo piece movement to move piece back up one, then re-render board and restart game loop.
; 417     57 020a_2039    	je	hard_drop_flag,	main_full_render	; No hard drop, re-render board.
; 420     58 0800_0526    	st	piece_y,	prev_piece_y
; 421     59 4018_ff4e    	jmp	main_move_drop	; Immediately do the next drop.
; 423     5a 48e0_0104    	dec	piece_x
; 424     5b 4018_ff35    	jmp	main_check_collision
; 426     5c 8028_0435    	insn INCJMP_INSN	piece_x,	main_check_collision
; 428     5d 48e0_0103    	dec	piece_rotation
; 429     5e 4018_ff2a    	jmp	main_render_fresh_piece
; 431     5f 8028_032a    	insn INCJMP_INSN	piece_rotation,	main_render_fresh_piece
; 433     60 8028_204e    	insn INCJMP_INSN	hard_drop_flag,	main_move_drop
; 435                     
; 437     61 0800_0324    	st	piece_rotation,	prev_piece_rotation
; 438     62 0800_0425    	st	piece_x,	prev_piece_x
; 439     63 0800_0526    	st	piece_y,	prev_piece_y
; 440     64 4018_ff00    save_piece_state_ret	jmp	0
; 441                     
; 443     65 0800_2403    	st	prev_piece_rotation,	piece_rotation
; 444     66 0800_2504    	st	prev_piece_x,	piece_x
; 445     67 0800_2605    	st	prev_piece_y,	piece_y
; 446     68 4018_ff00    undo_piece_state_ret	jmp	0
; 447                     
; 448                     ; Prepare piece stage subroutine
; 449                     ; piece_kind = which piece to render. {0,1,2,3,4,5,6}
; 450                     ;
; 451                     ; Piece rotation. 4 different values for each direction. {0,1,2,3}. Only uses bottom two bits, so can increment forever.
; 452                     ;
; 454     69 0800_026e    	st	piece_kind,	prep_piece_target	; We're rendering the current piece_kind
; 461     6a 0a00_0300    	lsrto	piece_rotation,	tmp	; We're rendering the current piece_rotation
; 462     6b 0a00_0000    	lsr	tmp
; 463     6c 0890_6e6e    	adcto	prep_piece_target,	prep_piece_target
; 465     6d 4880_6f6e    	addto	#prep_piece_jmp,	prep_piece_target
; 467     6e 4018_ff00    prep_piece_target	jmp	0
; 469     6f 4808_667d    	insn ST_JMP_INSN	#O_PIECE,	prep_piece_value
; 470     70 4808_667d    	insn ST_JMP_INSN	#O_PIECE_FLIP,	prep_piece_value
; 471     71 4808_f07d    	insn ST_JMP_INSN	#I_PIECE,	prep_piece_value
; 472     72 4808_f07d    	insn ST_JMP_INSN	#I_PIECE_FLIP,	prep_piece_value
; 473     73 4808_277d    	insn ST_JMP_INSN	#T_PIECE,	prep_piece_value
; 474     74 4808_727d    	insn ST_JMP_INSN	#T_PIECE_FLIP,	prep_piece_value
; 475     75 4808_367d    	insn ST_JMP_INSN	#S_PIECE,	prep_piece_value
; 476     76 4808_367d    	insn ST_JMP_INSN	#S_PIECE_FLIP,	prep_piece_value
; 477     77 4808_637d    	insn ST_JMP_INSN	#Z_PIECE,	prep_piece_value
; 478     78 4808_637d    	insn ST_JMP_INSN	#Z_PIECE_FLIP,	prep_piece_value
; 479     79 4808_717d    	insn ST_JMP_INSN	#J_PIECE,	prep_piece_value
; 480     7a 4808_477d    	insn ST_JMP_INSN	#J_PIECE_FLIP,	prep_piece_value
; 481     7b 4808_177d    	insn ST_JMP_INSN	#L_PIECE,	prep_piece_value
; 482     7c 4808_747d    	insn ST_JMP_INSN	#L_PIECE_FLIP,	prep_piece_value
; 483     7d 4010_ff00    prep_piece_value	nop	; prep_piece_value stores the jump table result.
; 484                     
; 486     7e 0202_0386    	jo	piece_rotation,	prep_piece_hor
; 488     7f 0800_7d2f    	st	prep_piece_value,	piece_stage+5
; 489     80 4980_f02f    	andto	#0xF0,	piece_stage+5	; Clear lower 4 bits
; 490     81 4800_fc00    	st	#-4,	tmp
; 491     82 0880_7d7d    prep_piece_vert_loop	lsl	prep_piece_value
; 492     83 802a_0082    	incjne	tmp,	prep_piece_vert_loop
; 493     84 0800_7d2d    	st	prep_piece_value,	piece_stage+3
; 494     85 4018_ff90    	jmp	prep_piece_ret
; 496     0000_0086       prep_piece_hor_i	equ	prep_piece_target		; Reuse prep_piece_target as the outer loop variable.
; 497     86 4800_fd6e    	st	#-3,	prep_piece_hor_i
; 499     87 4800_3189    	st	#(piece_stage+7),	prep_piece_hor_ptr
; 501     88 0800_898b    	st	prep_piece_hor_ptr,	prep_piece_hor_wb_ptr
; 502     89 c080_0000    prep_piece_hor_ptr	insn IMADD_INSN	tmp,	0	; LOAD
; 503     8a 0a00_7d7d    	lsr	prep_piece_value
; 504     8b 0a10_0000    prep_piece_hor_wb_ptr	rorto	tmp,	0	; STORE
; 505     8c 48e0_0289    	rsbto	#2,	prep_piece_hor_ptr
; 506     8d 40e0_2a89    	insn ALEB_TOC_INSN	#piece_stage,	prep_piece_hor_ptr
; 507     8e 006c_0088    	jcs	prep_piece_hor_loop_b		; Loop if #piece_stage <= prep_piece_hor_ptr
; 508     8f 802a_6e87    	incjne	prep_piece_hor_i,	prep_piece_hor_loop_a
; 509     90 4018_ff00    prep_piece_ret	jmp	0
; 510                     
; 511                     ; shift_piece subroutine.
; 512                     ;
; 513                     ; Shifts the piece stage downwards by the set amount stored negated in tmp.
; 514                     ; If the piece is shifted to the bottom of the board, stops and returns non-zero in tmp.
; 516     91 0062_009f    	jeq	tmp,	shift_piece_ret
; 518     92 0202_309f    	jo	piece_stage+6,	shift_piece_ret
; 519     93 0202_2e9f    	jo	piece_stage+4,	shift_piece_ret
; 520     94 0202_2c9f    	jo	piece_stage+2,	shift_piece_ret
; 521     95 0202_2a9f    	jo	piece_stage+0,	shift_piece_ret
; 523     96 0a00_3131    	lsr	piece_stage+7
; 524     97 0a10_3030    	ror	piece_stage+6
; 525     98 0a00_2f2f    	lsr	piece_stage+5
; 526     99 0a10_2e2e    	ror	piece_stage+4
; 527     9a 0a00_2d2d    	lsr	piece_stage+3
; 528     9b 0a10_2c2c    	ror	piece_stage+2
; 529     9c 0a00_2b2b    	lsr	piece_stage+1
; 530     9d 0a10_2a2a    	ror	piece_stage+0
; 531     9e 802a_0092    	incjne	tmp,	shift_piece_loop
; 532     9f 4018_ff00    shift_piece_ret	jmp	0	; Return from subroutine
; 533                     
; 534                     ; stamp_piece: Stamp piece board subroutine.
; 535                     ;
; 536                     ; This subroutine handles several functions:
; 537                     ;
; 538                     ; * ADDing the piece_stage to the gameboard (Stamping the piece down)
; 539                     ; * BICing the piece_stage to the gameboard (Clearing the piece off)
; 540                     ; * Checking for any common bits (AND result > 0) between piece_stage and gameboard (Checking for collision).
; 541                     ;
; 542                     ; stamp_piece_op must be set to #stamp_piece_coll_op, #stamp_piece_merge_op, or #stamp_piece_clear_op before executing.
; 543                     ;
; 544                     ; When executing stamp_piece_coll_op, tmp will be non-zero if a collision occured.
; 545                     ;
; 548     a0 4800_2aa6    	st	#piece_stage,	stamp_piece_ps_ptr
; 549     a1 4800_0fa8    	st	#(gameboard+(PIECE_X_OFFSET*2)),	stamp_piece_gb_ptr
; 550     a2 0880_04a8    	addto	piece_x,	stamp_piece_gb_ptr
; 551     a3 0880_04a8    	addto	piece_x,	stamp_piece_gb_ptr	; stamp_piece_gb_ptr = #gameboard + 2 * piece_x
; 554     a4 4800_f800    	st	#-PIECE_STAGE_SIZE,	tmp
; 556                     
; 557     a5 8100_a500    stamp_piece_ps_val	insn CLRA_INSN	stamp_piece_ps_val,	0	; Self clearing variable stamp_piece_ps_val
; 558     a6 8080_a500    stamp_piece_ps_ptr	add	stamp_piece_ps_val,	0	; Piece stage LOAD
; 560     a7 8100_a700    stamp_piece_gb_val	insn CLRA_INSN	stamp_piece_gb_val,	0	; Self clearing variable stamp_piece_gb_val
; 561     a8 8080_a700    stamp_piece_gb_ptr	add	stamp_piece_gb_val,	0	; Game board LOAD
; 562                     
; 564     a9 4018_ff00    stamp_piece_op	jmp	0	; This is set before calling the subroutine
; 567     aa 0980_a5a7    	andto	stamp_piece_ps_val,	stamp_piece_gb_val
; 568     ab 0062_a7b3    	jeq	stamp_piece_gb_val,	stamp_piece_loop_end	; If collision didn't occur, keep looping.
; 570     ac 0800_a700    	st	stamp_piece_gb_val,	tmp	; Store colliding bits in tmp
; 571     ad 4018_ffb6    	jmp	stamp_piece_ret		; Break out of loop and exit
; 575     ae 0880_a5a7    	addto	stamp_piece_ps_val,	stamp_piece_gb_val
; 576     af 4018_ffb1    	jmp	stamp_piece_writeback
; 578     b0 09c0_a5a7    	bicto	stamp_piece_ps_val,	stamp_piece_gb_val
; 580     b1 0800_a8b2    	st	stamp_piece_gb_ptr,	stamp_piece_gb_wb_ptr
; 581     b2 0800_a700    stamp_piece_gb_wb_ptr	st	stamp_piece_gb_val,	0	; Game board STORE
; 584     b3 8020_a600    rem_bits_mask	insn INCA_INSN	stamp_piece_ps_ptr,	0	; Variable storage for rem_bits_mask, in rem_bits
; 585     b4 8020_a800    	insn INCA_INSN	stamp_piece_gb_ptr,	0
; 586     b5 802a_00a5    	incjne	tmp,	stamp_piece_loop
; 587     b6 4018_ff00    stamp_piece_ret	jmp	0	; Return from subroutine
; 588                     
; 589                     ; render_board: Render board subroutine
; 590                     ;
; 591                     ; How:
; 592                     ; Render the gameboard from left to right, top to bottom, to give the most simple console output (avoids ANSI console cursor movement).
; 593                     ;
; 594                     ; LOOP A: Starts at top of the board and then switches to bottom half of the board. The gameboard ptr offset changes from 1 to 0. (or 2 -> 1 -> 0 if using a bigger game board)
; 595                     ; LOOP B: Work down the rows using a single byte bitmask, shifting it right each iteration.
; 596                     ; LOOP C: Work along the columns from 0 to 10, incrementing the gameboard ptr by 2 each iteration.
; 597                     ;         Decide whether to render a block or empty character by ANDing the gameboard ptr value with the current bitmask
; 598                     ;
; 600     b7 4800_01bc    	st	#(GAMEBOARD_STRIDE-1),	render_board_ptr	; Start the render_board_ptr with an offset of 1 to render the top half of the board.
; 601                     ; LOOP A
; 603     b8 4880_09bc    	addto	#gameboard,	render_board_ptr	; Adjust the render_board_ptr to point into the gameboard. TODO: Move out of loop after implementing ALEB_TOC_INSN below since this won't be changed.
; 604     b9 4800_80c3    	st	#%1000_0000,	render_board_mask	; Initialize the bitmask for testing the column byte for which row is set
; 605                     ; LOOP B
; 607     ba 4800_f6c4    	st	#(-GAMEBOARD_COLS),	render_board_col	; Prepare column loop counter
; 608                     ; LOOP C
; 610     bb 0800_c300    	st	render_board_mask,	tmp
; 611     bc 8180_0000    render_board_ptr	insn AND_INSN	tmp,	0	; Indirect AND, store result in tmp
; 614     bd 006a_00bf    	jne	tmp,	render_board_print_a
; 615     be d808_7ec0    	insn OUTC_JMP_INSN	#EMPTY_CHAR,	render_board_print_b	; Print empty char and jump over the block char print
; 617     bf d800_2300    line_clr_i	outc	#BLOCK_CHAR		; Used as variable storage for line_clr_i in line_clr
; 619     c0 4880_02bc    	addto	#GAMEBOARD_STRIDE,	render_board_ptr	; Move onto next column byte
; 620     c1 802a_c4bb    	incjne	render_board_col,	render_board_loop_c	; If we still have columns to render, continue LOOP C
; 621                     ; END LOOP C
; 622     c2 48e0_14bc    	rsbto	#GAMEBOARD_SIZE,	render_board_ptr	; Reset render_board_ptr to pre-loop state
; 626     c3 d800_0d00    render_board_mask	outc	#CR_CHAR		; render_board_mask: The row bitmask for selecting the row to render
; 627     c4 d800_0a00    render_board_col	outc	#LF_CHAR		; render_board_col: The current column iteration loop counter.
; 628                     
; 631     c5 820a_c3ba    	insn LSR_JCC_INSN	render_board_mask,	render_board_loop_b
; 632                     ; END LOOP B
; 635     c6 48e0_0abc    	rsbto	#(gameboard+1),	render_board_ptr	; TODO: Can replace with ALEB_TOC_INSN + jcs
; 637     c7 0069_bcb8    	jge	render_board_ptr,	render_board_loop_a	; Otherwise continue LOOP A.
; 639     c8 d800_0d00    get_full_lines_mask	outc	#CR_CHAR		; get_full_lines_mask: variable for get_full_lines
; 640     c9 d800_0a00    	outc	#LF_CHAR
; 641                     ; END LOOP A
; 642     ca 4018_ff00    render_board_ret	jmp	0		; Return from subroutine.
; 643                     
; 644                     ; line_clr: Clears all full rows from the gameboard.
; 645                     ;
; 646                     ; How:
; 647                     ; 1. Call get_full_lines to generate a bitmask of all the complete rows
; 648                     ; 2. Call rem_bits on each column in the gameboard with a copy of the complete rows bitmask.
; 649                     ; 3. Copy the result back over the gameboard.
; 650                     ;
; 653     cb 8408_e9e0    	jsr	get_full_lines_ret,	get_full_lines
; 654                     
; 656     cc 006a_c8cf    	jne	get_full_lines_mask+0,	line_clr_do_remove
; 657     cd 006a_c9cf    	jne	get_full_lines_mask+1,	line_clr_do_remove
; 658     ce 4018_ffdf    	jmp	line_clr_ret	; Fastpath to returning from the subroutine
; 661     cf 8100_cf00    rem_bits_value	insn CLRA_INSN	rem_bits_value+0,	0	; rem_bits_value: 2 bytes. Variable storage for rem_bits.
; 662     d0 8100_d000    	insn CLRA_INSN	rem_bits_value+1,	0	; Self clearing.
; 663                     
; 665     d1 4800_f6bf    	st	#(-GAMEBOARD_COLS),	line_clr_i	; Prep the loop counter
; 666                     
; 668     d2 4800_09d6    	st	#gameboard,	line_clr_read_ptr_0
; 670                     
; 671                     ; Line clear loop. It will call rem_bits with the line clear mask and each column of the gameboard.
; 675     d3 0800_c8b3    	st	get_full_lines_mask+0,	rem_bits_mask+0	; Prep mask +0
; 676     d4 0800_c9b4    	st	get_full_lines_mask+1,	rem_bits_mask+1	; Prep mask +1
; 677                     
; 679     d5 0820_d6d7    	insn INCTO_INSN	line_clr_read_ptr_0,	line_clr_read_ptr_1	; Prep ptr +1
; 681     d6 8080_cf00    line_clr_read_ptr_0	add	rem_bits_value+0,	0	; Load +0
; 682     d7 8080_d000    line_clr_read_ptr_1	add	rem_bits_value+1,	0	; Load +1
; 683                     
; 685     d8 8408_faea    	jsr	rem_bits_ret,	rem_bits
; 686                     
; 688     d9 0800_d6db    	st	line_clr_read_ptr_0,	line_clr_write_ptr_0	; Prep ptr +0
; 689     da 0800_d7dc    	st	line_clr_read_ptr_1,	line_clr_write_ptr_1	; Prep ptr +1
; 691     db 0800_ea00    line_clr_write_ptr_0	st	rem_bits_result+0,	0	; Store +0
; 692     dc 0800_eb00    line_clr_write_ptr_1	st	rem_bits_result+1,	0	; Store +1
; 693                     
; 695     dd 4880_02d6    	addto	#2,	line_clr_read_ptr_0	; Iterate ptr +0
; 696     de 802a_bfd3    	incjne	line_clr_i,	line_clr_loop	; Loop
; 697     df 4018_ff00    line_clr_ret	jmp	0		; Return from subroutine
; 698                     
; 699                     ; get_full_lines
; 700                     ;
; 701                     ; Generates a 2 byte, 16 bit bitmask indicating which rows in the gameboard are filled.
; 702                     ; This is the bitwise AND of all columns in the gameboard.
; 703                     ;
; 704                     ;get_full_lines_mask	skip	2	; Stored in render_board
; 706     e0 4800_f600    	st	#(-GAMEBOARD_COLS),	tmp
; 707     e1 4800_ffc8    	st	#0xFF,	get_full_lines_mask+0
; 708     e2 4800_ffc9    	st	#0xFF,	get_full_lines_mask+1
; 709     e3 4800_09e5    	st	#gameboard,	get_full_lines_ptr_0
; 711     e4 0820_e5e6    	insn INCTO_INSN	get_full_lines_ptr_0,	get_full_lines_ptr_1
; 712     e5 8180_c800    get_full_lines_ptr_0	insn AND_INSN	get_full_lines_mask+0,	0
; 713     e6 8180_c900    get_full_lines_ptr_1	insn AND_INSN	get_full_lines_mask+1,	0
; 714     e7 4880_02e5    	addto	#2,	get_full_lines_ptr_0
; 715     e8 802a_00e4    	incjne	tmp,	get_full_lines_loop
; 716     e9 4018_ff00    get_full_lines_ret	jmp	0		; Return from subroutine
; 717                     
; 718                     ; rem_bits
; 719                     ;
; 720                     ; Remove the bits from rem_bits_value in the positions they are set in rem_bits_mask.
; 721                     ; For each bit removed, the more significant bits are shifted right to fill its place.
; 722                     ; The leftmost most significant bits are filled with zeroes.
; 723                     ;
; 724                     ; The output is placed in rem_bits_result.
; 725                     ; rem_bits_mask and rem_bits_value are zeroed as a result of this process.
; 726                     ;
; 727                     ;rem_bits_mask	skip	2	; Stored in stamp_piece
; 728                     ;rem_bits_value	skip	2	; Stored in line_clr
; 731     ea 8100_ea00    rem_bits_result	insn CLRA_INSN	rem_bits_result+0,	0	; Self clearing variables
; 732     eb 8100_eb00    	insn CLRA_INSN	rem_bits_result+1,	0
; 734     ec 4800_f000    	st	#-16,	tmp	; Loop 16 times
; 736     ed 0880_b3b3    	lsl	rem_bits_mask+0		; Logical shift left mask (0 -> bit 0)
; 737     ee 0890_b4b4    	rol	rem_bits_mask+1		; (bit 15 -> carry)
; 738     ef 0064_00f5    	jcc	rem_bits_A		; GOTO A if carry clear
; 740     f0 0880_cfcf    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 741     f1 0890_d0d0    	rol	rem_bits_value+1		; The carry result is discarded.
; 744     f2 40e0_f6bf    	insn ALEB_TOC_INSN	#(-GAMEBOARD_COLS),	line_clr_i	; If this is the first iteration of rem_bits (first column), store 1 in carry
; 745     f3 4890_0001    	adcto	#0,	lines_cleared	; Add carry to lines cleared
; 747     f4 4018_fff9    	jmp	rem_bits_loop_end
; 749     f5 0880_cfcf    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 750     f6 0890_d0d0    	rol	rem_bits_value+1		; (bit 15 -> carry)
; 751     f7 0890_eaea    	rol	rem_bits_result+0		; Rotate left to save the carry into result (carry -> bit 0)
; 752     f8 0890_ebeb    	rol	rem_bits_result+1		; Carry from rotating result is discarded.
; 753     f9 802a_00ed    rem_bits_loop_end	incjne	tmp,	rem_bits_loop	; Loop
; 754     fa 4018_ff00    rem_bits_ret	jmp	0		; Return from subroutine
; 755                     
; 757     0000_00fb       PROGRAM_FREE_SPACE	equ	(256-PROGRAM_SIZE)
; 758                     
; 759                     

; 0 errors detected in pass 2

; Symbol table:
; ALEB_TOC_INSN = 0xe00000
; ALTB_TOC_INSN = 0xc00000
; AND_INSN = 0x81800000
; BAR_CHAR = 0x7c
; BLOCK_CHAR = 0x23
; CLRA_INSN = 0x81000000
; CR_CHAR = 0xd
; EMPTY_CHAR = 0x7e
; GAMEBOARD_COLS = 0xa
; GAMEBOARD_SIZE = 0x14
; GAMEBOARD_STRIDE = 0x2
; IMADD_INSN = 0xc0800000
; INCA_INSN = 0x80200000
; INCJMP_INSN = 0x80280000
; INCTO_INSN = 0x8200000
; I_PIECE = 0xf0
; I_PIECE_FLIP = 0xf0
; J_PIECE = 0x71
; J_PIECE_FLIP = 0x47
; LF_CHAR = 0xa
; LSR_JCC_INSN = 0x820a0000
; L_PIECE = 0x17
; L_PIECE_FLIP = 0x74
; OUTC_JMP_INSN = 0x98080000
; O_PIECE = 0x66
; O_PIECE_FLIP = 0x66
; PIECE_STAGE_SIZE = 0x8
; PIECE_X_OFFSET = 0x3
; PROGRAM_FREE_SPACE = 0x5
; PROGRAM_SIZE = 0xfb
; SPACE_CHAR = 0x20
; ST_JMP_INSN = 0x8080000
; S_PIECE = 0x36
; S_PIECE_FLIP = 0x36
; T_PIECE = 0x27
; T_PIECE_FLIP = 0x72
; Z_PIECE = 0x63
; Z_PIECE_FLIP = 0x63
; gameboard = 0x9
; get_full_lines = 0xe0
; get_full_lines_loop = 0xe4
; get_full_lines_mask = 0xc8
; get_full_lines_ptr_0 = 0xe5
; get_full_lines_ptr_1 = 0xe6
; get_full_lines_ret = 0xe9
; hard_drop_flag = 0x20
; line_clr = 0xcb
; line_clr_do_remove = 0xcf
; line_clr_i = 0xbf
; line_clr_loop = 0xd3
; line_clr_read_ptr_0 = 0xd6
; line_clr_read_ptr_1 = 0xd7
; line_clr_ret = 0xdf
; line_clr_write_ptr_0 = 0xdb
; line_clr_write_ptr_1 = 0xdc
; lines_cleared = 0x1
; main = 0x1
; main_check_collision = 0x35
; main_end = 0x61
; main_full_render = 0x39
; main_hard_drop = 0x60
; main_move_drop = 0x4e
; main_move_drop_2 = 0x53
; main_move_drop_3 = 0x57
; main_move_left = 0x5a
; main_move_right = 0x5c
; main_next_piece = 0x1f
; main_no_stamp_flag = 0x3e
; main_not_game_over = 0x29
; main_read_input = 0x42
; main_render_fresh_piece = 0x2a
; main_rot_left = 0x5d
; main_rot_right = 0x5f
; main_undo_then_render = 0x27
; piece_kind = 0x2
; piece_rotation = 0x3
; piece_stage = 0x2a
; piece_x = 0x4
; piece_y = 0x5
; prep_piece = 0x69
; prep_piece_hor = 0x86
; prep_piece_hor_i = 0x6e
; prep_piece_hor_loop_a = 0x87
; prep_piece_hor_loop_b = 0x88
; prep_piece_hor_ptr = 0x89
; prep_piece_hor_wb_ptr = 0x8b
; prep_piece_jmp = 0x6f
; prep_piece_ret = 0x90
; prep_piece_target = 0x6e
; prep_piece_value = 0x7d
; prep_piece_vert = 0x7f
; prep_piece_vert_loop = 0x82
; prev_piece_rotation = 0x24
; prev_piece_x = 0x25
; prev_piece_y = 0x26
; rem_bits = 0xea
; rem_bits_A = 0xf5
; rem_bits_loop = 0xed
; rem_bits_loop_end = 0xf9
; rem_bits_mask = 0xb3
; rem_bits_result = 0xea
; rem_bits_ret = 0xfa
; rem_bits_value = 0xcf
; render_board = 0xb7
; render_board_col = 0xc4
; render_board_loop_a = 0xb8
; render_board_loop_b = 0xba
; render_board_loop_c = 0xbb
; render_board_mask = 0xc3
; render_board_print_a = 0xbf
; render_board_print_b = 0xc0
; render_board_ptr = 0xbc
; render_board_ret = 0xca
; save_piece_state = 0x61
; save_piece_state_ret = 0x64
; shift_piece = 0x91
; shift_piece_loop = 0x92
; shift_piece_ret = 0x9f
; stamp_flag = 0x1f
; stamp_piece = 0xa0
; stamp_piece_clear_op = 0xb0
; stamp_piece_coll_op = 0xaa
; stamp_piece_gb_ptr = 0xa8
; stamp_piece_gb_val = 0xa7
; stamp_piece_gb_wb_ptr = 0xb2
; stamp_piece_loop = 0xa5
; stamp_piece_loop_end = 0xb3
; stamp_piece_merge_op = 0xae
; stamp_piece_op = 0xa9
; stamp_piece_ps_ptr = 0xa6
; stamp_piece_ps_val = 0xa5
; stamp_piece_ret = 0xb6
; stamp_piece_writeback = 0xb1
; stop = 0x0
; tmp = 0x0
; undo_piece_state = 0x65
; undo_piece_state_ret = 0x68
; undo_retry_count = 0x6

; Memory image:
00: c810ff00 81000100 81000200 81000300 81000400 81000500 81000600 000000ff
08: 000000ff 81000900 81000a00 81000b00 81000c00 81000d00 81000e00 81000f00
10: 81001000 81001100 81001200 81001300 81001400 81001500 81001600 81001700
18: 81001800 81001900 81001a00 81001b00 81001c00 000000ff 000000ff 81001f00
20: 81002000 40e00602 48900102 49800702 81002400 81002500 81002600 802a0629
28: d8085800 84086865 81002a00 81002b00 81002c00 81002d00 81002e00 81002f00
30: 81003000 81003100 84089069 08000500 84089f91 4800aaa9 8408b6a0 006a0027
38: 4800fe06 4800aea9 8408b6a0 00621f3e 8408dfcb 4018ff1f 8408cab7 4800b0a9
40: 8408b6a0 84086461 e8000000 08600000 48800100 8022004e 48800100 8022005a
48: 48800100 8022005c 8022005d 80220060 8022005f d8083f42 48e00105 4800ff00
50: 84089f91 00620053 80281f39 4800aaa9 8408b6a0 00620057 80281f27 020a2039
58: 08000526 4018ff4e 48e00104 4018ff35 80280435 48e00103 4018ff2a 8028032a
60: 8028204e 08000324 08000425 08000526 4018ff00 08002403 08002504 08002605
68: 4018ff00 0800026e 0a000300 0a000000 08906e6e 48806f6e 4018ff00 4808667d
70: 4808667d 4808f07d 4808f07d 4808277d 4808727d 4808367d 4808367d 4808637d
78: 4808637d 4808717d 4808477d 4808177d 4808747d 4010ff00 02020386 08007d2f
80: 4980f02f 4800fc00 08807d7d 802a0082 08007d2d 4018ff90 4800fd6e 48003189
88: 0800898b c0800000 0a007d7d 0a100000 48e00289 40e02a89 006c0088 802a6e87
90: 4018ff00 0062009f 0202309f 02022e9f 02022c9f 02022a9f 0a003131 0a103030
98: 0a002f2f 0a102e2e 0a002d2d 0a102c2c 0a002b2b 0a102a2a 802a0092 4018ff00
a0: 48002aa6 48000fa8 088004a8 088004a8 4800f800 8100a500 8080a500 8100a700
a8: 8080a700 4018ff00 0980a5a7 0062a7b3 0800a700 4018ffb6 0880a5a7 4018ffb1
b0: 09c0a5a7 0800a8b2 0800a700 8020a600 8020a800 802a00a5 4018ff00 480001bc
b8: 488009bc 480080c3 4800f6c4 0800c300 81800000 006a00bf d8087ec0 d8002300
c0: 488002bc 802ac4bb 48e014bc d8000d00 d8000a00 820ac3ba 48e00abc 0069bcb8
c8: d8000d00 d8000a00 4018ff00 8408e9e0 006ac8cf 006ac9cf 4018ffdf 8100cf00
d0: 8100d000 4800f6bf 480009d6 0800c8b3 0800c9b4 0820d6d7 8080cf00 8080d000
d8: 8408faea 0800d6db 0800d7dc 0800ea00 0800eb00 488002d6 802abfd3 4018ff00
e0: 4800f600 4800ffc8 4800ffc9 480009e5 0820e5e6 8180c800 8180c900 488002e5
e8: 802a00e4 4018ff00 8100ea00 8100eb00 4800f000 0880b3b3 0890b4b4 006400f5
f0: 0880cfcf 0890d0d0 40e0f6bf 48900001 4018fff9 0880cfcf 0890d0d0 0890eaea
f8: 0890ebeb 802a00ed 4018ff00
