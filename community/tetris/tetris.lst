; Pass 1...

; 0 errors detected in pass 1

; Pass 2...
; 1                       ; Tetris implementation
; 2                       ; Ryan Crosby 2022
; 3                       ;
; 4                       ; Run from 0x01.
; 5                       ;
; 6                       ; Controls:
; 7                       ;
; 8                       ; Relay computer numpad is used to control the game.
; 9                       ;
; 10                      ; 2: Move piece down
; 11                      ; 4: Move piece left
; 12                      ; 6: Move piece right
; 13                      ; 7: Rotate piece left
; 14                      ; 9: Rotate piece right
; 15                      ;
; 16                      ; Game is rendered to console output.
; 17                      ;
; 18                      ; TODO:
; 19                      ;
; 20                      ; * Game over (Current code infinite loops on game over)
; 21                      ; * Further optimise code to free up some instruction space to implement above TODOs.
; 22                      ;
; 23                      
; 24                      ; =========
; 25                      ; Constants
; 26                      ; =========
; 27                      
; 28                      ; Gameboard parameters
; 29                      ; These constants are used for convenience. Changing the value won't change the actual sizes of the gameboards, code will need to be modified as well.
; 30      0000_0000       GAMEBOARD_STRIDE	equ	2	; How many bytes high is the gameboard. 2 bytes = 16 rows.
; 31      0000_0000       GAMEBOARD_COLS	equ	10	; How many columns wide is the gameboard. This is generic enough that it can be adjusted without altering any code.
; 32      0000_0000       GAMEBOARD_SIZE	equ	(GAMEBOARD_STRIDE*GAMEBOARD_COLS)	; Gameboard total size = stride * columns
; 33                      
; 34      0000_0000       PIECE_STAGE_SIZE	equ	(GAMEBOARD_STRIDE*4)	; The piece stage is the same height as the gameboard, but only 4 wide.
; 35                      
; 36      0000_0000       PIECE_X_OFFSET	equ	3	; The piece always spawns at x = 0. This offsets the piece so that x = 0 aligns with the center of the board.
; 37                      
; 38      0000_0000       SPACE_CHAR	equ	0x20	; Space
; 39      0000_0000       BLOCK_CHAR	equ	0x23	; #
; 40      0000_0000       EMPTY_CHAR	equ	0x7E 	; ~
; 41      0000_0000       BAR_CHAR	equ	0x7C	; |
; 42                      
; 43      0000_0000       CR_CHAR	equ	0x0D	; Carriage Return CR \r
; 44      0000_0000       LF_CHAR	equ	0x0A	; Linefeed LF \n
; 45                      
; 46                      ; Additional custom instructions
; 47                      ; To use these, call them like: insn INCTO_INSN aa, bb
; 48      0000_0000       IMADD_INSN	equ	0xC0800000	; aa + [bb] --> [aa]. Immediate version of ADD. If aa is 0, allows single instruction LOAD of [bb] to [0].
; 49      0000_0000       AND_INSN	equ	0x81800000	; The WRA version of andto. ANDs [aa] and [bb], and stores in [aa].
; 50      0000_0000       CLRA_INSN	equ	0x81000000	; Stores 0 --> [aa]. Implemented as [aa] & 0 --> [aa].
; 51      0000_0000       INCA_INSN	equ	0x80200000	; Stores [aa] + 1 --> [aa] in one instruction.
; 52      0000_0000       INCTO_INSN	equ	0x08200000	; Stores [aa] + 1 --> [bb] in one instruction.
; 53      0000_0000       ALTB_TOC_INSN	equ	0x00C00000	; Stores [aa] < [bb] --> Carry.
; 54      0000_0000       ALEB_TOC_INSN	equ	0x00E00000	; Stores [aa] <= [bb] --> Carry.
; 55      0000_0000       ST_JMP_INSN	equ	0x08080000	; Stores [aa] --> [bb] and jumps to bb.
; 56      0000_0000       OUTC_JMP_INSN	equ	0x98080000	; Writes [aa] to the console and jumps to bb. WRA and WRB are set to make OUT write to console.
; 57      0000_0000       LSR_JCC_INSN	equ	0x820A0000	; Rotates [aa] right, writes the result back to [aa], and jumps if the shifted out bit (carry output) was clear.
; 58      0000_0000       INCJMP_INSN	equ	0x80280000	; Stores [aa] + 1 --> [aa] and unconditionally jumps to bb
; 59                      
; 60                      ; Pieces templates
; 61                      ;
; 62                      ; Piece patterns are stored as a single byte.
; 63                      ; The 4 lsb bits represent the left of the piece, the 4 msb bits representing the right of the piece.
; 64                      ; The alignment and bit direction matches the piece stage.
; 65                      ;
; 66                      ; A "flipped" version of each piece is also stored, which is similar to the piece being left-to-right bitswapped.
; 67                      ; However using a dedicated version of the flipped piece removes the need for a bitswap subroutine,
; 68                      ; which actually saves instructions overall, and also allows the pieces to be tweaked so that they rotate correctly.
; 69                      ;
; 70                      ; The Gameboy left-handed rotation system was used as a reference, but the code doesn't attempt to exactly adhere to any particular system,
; 71                      ; it just attempts to look somewhat acceptable and use minimal instructions.
; 72                      
; 73                      
; 74                      ; I piece
; 75                      ;
; 76                      ;3   7
; 77                      ; 0 1
; 78                      ; 0 1
; 79                      ; 0 1
; 80                      ; 0 1
; 81                      ;0   4
; 82      0000_0000       I_PIECE	equ	0xF0
; 83      0000_0000       I_PIECE_FLIP	equ	I_PIECE	; I piece is the same flipped
; 84                      
; 85                      ; O (square) piece
; 86                      ;
; 87                      ;3   7
; 88                      ; 0 0
; 89                      ; 1 1
; 90                      ; 1 1
; 91                      ; 0 0
; 92                      ;0   4
; 93      0000_0000       O_PIECE	equ	0x66
; 94      0000_0000       O_PIECE_FLIP	equ	O_PIECE	; Square is same in any rotation
; 95                      
; 96                      ; T piece
; 97                      ;
; 98                      ;3   7
; 99                      ; 0 0
; 100                     ; 1 0
; 101                     ; 1 1
; 102                     ; 1 0
; 103                     ;0   4
; 104     0000_0000       T_PIECE	equ	0x27
; 105                     
; 106                     ; T piece flipped
; 107                     ;
; 108                     ;3   7
; 109                     ; 0 0
; 110                     ; 0 1
; 111                     ; 1 1
; 112                     ; 0 1
; 113                     ;0   4
; 114     0000_0000       T_PIECE_FLIP	equ	0x72
; 115                     
; 116                     ; S piece
; 117                     ;
; 118                     ;3   7
; 119                     ; 0 0
; 120                     ; 1 0
; 121                     ; 1 1
; 122                     ; 0 1
; 123                     ;0   4
; 124     0000_0000       S_PIECE	equ	0x36
; 125     0000_0000       S_PIECE_FLIP	equ	S_PIECE	; S piece is the same rotated
; 126                     
; 127                     ; S piece
; 128                     ;
; 129                     ;3   7
; 130                     ; 0 0
; 131                     ; 0 1
; 132                     ; 1 1
; 133                     ; 1 0
; 134                     ;0   4
; 135     0000_0000       Z_PIECE	equ	0x63
; 136     0000_0000       Z_PIECE_FLIP	equ	Z_PIECE	; Z piece is the same rotated
; 137                     
; 138                     ; J piece
; 139                     ;
; 140                     ;3   7
; 141                     ; 0 0
; 142                     ; 0 1
; 143                     ; 0 1
; 144                     ; 1 1
; 145                     ;0   4
; 146     0000_0000       J_PIECE	equ	0x71
; 147                     
; 148                     ; J piece flipped
; 149                     ;
; 150                     ;3   7
; 151                     ; 0 0
; 152                     ; 1 1
; 153                     ; 1 0
; 154                     ; 1 0
; 155                     ;0   4
; 156     0000_0000       J_PIECE_FLIP	equ	0x47
; 157                     
; 158                     ; L piece
; 159                     ;
; 160                     ;3   7
; 161                     ; 0 0
; 162                     ; 1 0
; 163                     ; 1 0
; 164                     ; 1 1
; 165                     ;0   4
; 166     0000_0000       L_PIECE	equ	0x17
; 167                     
; 168                     ; L piece flipped
; 169                     ;
; 170                     ;3   7
; 171                     ; 0 0
; 172                     ; 1 1
; 173                     ; 0 1
; 174                     ; 0 1
; 175                     ;0   4
; 176     0000_0000       L_PIECE_FLIP	equ	0x74
; 177                     
; 178                     ; ================
; 179                     ; Application code
; 180                     ; ================
; 181                     
; 182                     ; Temporary variable tmp at address 0x00.
; 183                     ;
; 184                     ; Used as a halt catch for any jumps to null (0x00). This usually indicates a subroutine hasn't had its return address set.
; 185                     ; Also used as a temporary storage register, and sometimes as the return value for subroutines that only need to return a status.
; 186                     
; 187     00              	org	0x00
; 189     00 c810_ff00    tmp	halt
; 190                     
; 191                     ; ENTRY POINT
; 192     01              	org	0x01
; 195                     
; 196     01 8100_0100    lines_cleared	insn CLRA_INSN	lines_cleared,	0
; 197     02 8100_0200    piece_kind	insn CLRA_INSN	piece_kind,	0
; 198     03 8100_0300    piece_x	insn CLRA_INSN	piece_x,	0
; 199     04 8100_0400    piece_y	insn CLRA_INSN	piece_y,	0
; 200     05 8100_0500    piece_rotation	insn CLRA_INSN	piece_rotation,	0
; 201     06 8100_0600    undo_retry_count	insn CLRA_INSN	undo_retry_count,	0
; 202                     
; 235                     
; 236     07 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at column -1
; 237     08 0000_00ff    	insn 0x00000000	,	0xFF
; 239     09 8100_0900    	insn CLRA_INSN	gameboard+0,	0
; 240     0a 8100_0a00    	insn CLRA_INSN	gameboard+1,	0
; 241     0b 8100_0b00    	insn CLRA_INSN	gameboard+2,	0
; 242     0c 8100_0c00    	insn CLRA_INSN	gameboard+3,	0
; 243     0d 8100_0d00    	insn CLRA_INSN	gameboard+4,	0
; 244     0e 8100_0e00    	insn CLRA_INSN	gameboard+5,	0
; 245     0f 8100_0f00    	insn CLRA_INSN	gameboard+6,	0
; 246     10 8100_1000    	insn CLRA_INSN	gameboard+7,	0
; 247     11 8100_1100    	insn CLRA_INSN	gameboard+8,	0
; 248     12 8100_1200    	insn CLRA_INSN	gameboard+9,	0
; 249     13 8100_1300    	insn CLRA_INSN	gameboard+10,	0
; 250     14 8100_1400    	insn CLRA_INSN	gameboard+11,	0
; 251     15 8100_1500    	insn CLRA_INSN	gameboard+12,	0
; 252     16 8100_1600    	insn CLRA_INSN	gameboard+13,	0
; 253     17 8100_1700    	insn CLRA_INSN	gameboard+14,	0
; 254     18 8100_1800    	insn CLRA_INSN	gameboard+15,	0
; 255     19 8100_1900    	insn CLRA_INSN	gameboard+16,	0
; 256     1a 8100_1a00    	insn CLRA_INSN	gameboard+17,	0
; 257     1b 8100_1b00    	insn CLRA_INSN	gameboard+18,	0
; 258     1c 8100_1c00    	insn CLRA_INSN	gameboard+19,	0
; 259     1d 0000_00ff    	insn 0x00000000	,	0xFF	; no-op/clc, but specified as custom instruction se we can set B value.
; 260     1e 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at column 11
; 263     1f 8100_1f00    stamp_flag	insn CLRA_INSN	stamp_flag,	0
; 265     20 8100_2000    hard_drop_flag	insn CLRA_INSN	hard_drop_flag,	0
; 266                     
; 270     21 40e0_0602    	insn ALEB_TOC_INSN	#6,	piece_kind	; Set carry if piece_kind >= 6.
; 271     22 4890_0102    	adcto	#1,	piece_kind	; If carry set, increment by 2, otherwise increment by 1.
; 272     23 4980_0702    	andto	#0x07,	piece_kind	; Clear all bits above first three so that value wraps.
; 275     24 8100_2400    prev_piece_x	insn CLRA_INSN	prev_piece_x,	0
; 276     25 8100_2500    prev_piece_y	insn CLRA_INSN	prev_piece_y,	0
; 277     26 8100_2600    prev_piece_rotation	insn CLRA_INSN	prev_piece_rotation,	0
; 283     27 802a_0629    	incjne	undo_retry_count,	main_not_game_over	; Check if out of undo retries.
; 284     28 d808_5800    	insn OUTC_JMP_INSN	#0x58,	stop	; Print 'X' and halt.
; 286     29 8408_6a67    	jsr	undo_piece_state_ret,	undo_piece_state
; 312     2a 8100_2a00    	insn CLRA_INSN	piece_stage+0,	0
; 313     2b 8100_2b00    	insn CLRA_INSN	piece_stage+1,	0
; 314     2c 8100_2c00    	insn CLRA_INSN	piece_stage+2,	0
; 315     2d 8100_2d00    	insn CLRA_INSN	piece_stage+3,	0
; 316     2e 8100_2e00    	insn CLRA_INSN	piece_stage+4,	0
; 317     2f 8100_2f00    	insn CLRA_INSN	piece_stage+5,	0
; 318     30 8100_3000    	insn CLRA_INSN	piece_stage+6,	0
; 319     31 8100_3100    	insn CLRA_INSN	piece_stage+7,	0
; 322     32 8408_926b    	jsr	prep_piece_ret,	prep_piece
; 325     33 0800_0400    	st	piece_y,	tmp
; 326     34 8408_a193    	jsr	shift_piece_ret,	shift_piece
; 334     35 4800_acab    	st	#stamp_piece_coll_op,	stamp_piece_op
; 335     36 8408_b8a2    	jsr	stamp_piece_ret,	stamp_piece
; 336     37 006a_0027    	jne	tmp,	main_undo_then_render	; We have a collision. Undo changes and re-render.
; 337     38 4800_fe06    	st	#-2,	undo_retry_count	; Reset retry count every time an undo isn't required.
; 340     39 4800_b0ab    	st	#stamp_piece_merge_op,	stamp_piece_op
; 341     3a 8408_b8a2    	jsr	stamp_piece_ret,	stamp_piece
; 344     3b 0062_1f3e    	jeq	stamp_flag,	main_no_stamp_flag
; 346     3c 8408_e1cd    	jsr	line_clr_ret,	line_clr
; 347     3d 4018_ff1f    	jmp	main_next_piece
; 350     3e 8408_ccb9    	jsr	render_board_ret,	render_board
; 351                     
; 353     3f 4800_b2ab    	st	#stamp_piece_clear_op,	stamp_piece_op
; 354     40 8408_b8a2    	jsr	stamp_piece_ret,	stamp_piece
; 355                     
; 357     41 8408_6663    	jsr	save_piece_state_ret,	save_piece_state
; 358                     
; 363     42 e800_0000    	inwait	tmp
; 368     43 48e0_0200    	rsbto	#02,	tmp
; 369     44 0062_0050    	jeq	tmp,	main_move_drop
; 373     45 48e0_0200    	rsbto	#02,	tmp
; 374     46 0062_005c    	jeq	tmp,	main_move_left
; 378     47 48e0_0200    	rsbto	#02,	tmp
; 379     48 0062_005e    	jeq	tmp,	main_move_right
; 383     49 48e0_0100    	rsbto	#01,	tmp
; 384     4a 0062_005f    	jeq	tmp,	main_rot_left
; 388     4b 48e0_0100    	rsbto	#01,	tmp
; 389     4c 0062_0062    	jeq	tmp,	main_hard_drop
; 393     4d 48e0_0100    	rsbto	#01,	tmp
; 394     4e 0062_0061    	jeq	tmp,	main_rot_right
; 395                     
; 397     4f d808_3f42    	insn OUTC_JMP_INSN	#0x3F,	main_read_input	; Print '?'
; 400     50 48e0_0104    	dec	piece_y
; 401     51 4800_ff00    	st	#-1,	tmp
; 402     52 8408_a193    	jsr	shift_piece_ret,	shift_piece
; 405     53 0062_0055    	jeq	tmp,	main_move_drop_2
; 408     54 8028_1f39    	insn INCJMP_INSN	stamp_flag,	main_full_render	; Re-render board and restart game loop.
; 411     55 4800_acab    	st	#stamp_piece_coll_op,	stamp_piece_op
; 412     56 8408_b8a2    	jsr	stamp_piece_ret,	stamp_piece
; 413     57 0062_0059    	jeq	tmp,	main_move_drop_3	; If no collision, jump to main_move_drop_3
; 416     58 8028_1f27    	insn INCJMP_INSN	stamp_flag,	main_undo_then_render	; Undo piece movement to move piece back up one, then re-render board and restart game loop.
; 419     59 020a_2039    	je	hard_drop_flag,	main_full_render	; No hard drop, re-render board.
; 422     5a 0800_0425    	st	piece_y,	prev_piece_y
; 423     5b 4018_ff50    	jmp	main_move_drop	; Immediately do the next drop.
; 425     5c 48e0_0103    	dec	piece_x
; 426     5d 4018_ff35    	jmp	main_check_collision
; 428     5e 8028_0335    	insn INCJMP_INSN	piece_x,	main_check_collision
; 430     5f 48e0_0105    	dec	piece_rotation
; 431     60 4018_ff2a    	jmp	main_render_fresh_piece
; 433     61 8028_052a    	insn INCJMP_INSN	piece_rotation,	main_render_fresh_piece
; 435     62 8028_2050    	insn INCJMP_INSN	hard_drop_flag,	main_move_drop
; 437                     
; 439     63 0800_0526    	st	piece_rotation,	prev_piece_rotation
; 440     64 0800_0324    	st	piece_x,	prev_piece_x
; 441     65 0800_0425    	st	piece_y,	prev_piece_y
; 442     66 4018_ff00    save_piece_state_ret	jmp	0
; 443                     
; 445     67 0800_2605    	st	prev_piece_rotation,	piece_rotation
; 446     68 0800_2403    	st	prev_piece_x,	piece_x
; 447     69 0800_2504    	st	prev_piece_y,	piece_y
; 448     6a 4018_ff00    undo_piece_state_ret	jmp	0
; 449                     
; 450                     ; Prepare piece stage subroutine
; 451                     ; piece_kind = which piece to render. {0,1,2,3,4,5,6}
; 452                     ;
; 453                     ; Piece rotation. 4 different values for each direction. {0,1,2,3}. Only uses bottom two bits, so can increment forever.
; 454                     ;
; 456     6b 0800_0270    	st	piece_kind,	prep_piece_target	; We're rendering the current piece_kind
; 463     6c 0a00_0500    	lsrto	piece_rotation,	tmp	; We're rendering the current piece_rotation
; 464     6d 0a00_0000    	lsr	tmp
; 465     6e 0890_7070    	adcto	prep_piece_target,	prep_piece_target
; 467     6f 4880_7170    	addto	#prep_piece_jmp,	prep_piece_target
; 469     70 4018_ff00    prep_piece_target	jmp	0
; 471     71 4808_667f    	insn ST_JMP_INSN	#O_PIECE,	prep_piece_value
; 472     72 4808_667f    	insn ST_JMP_INSN	#O_PIECE_FLIP,	prep_piece_value
; 473     73 4808_f07f    	insn ST_JMP_INSN	#I_PIECE,	prep_piece_value
; 474     74 4808_f07f    	insn ST_JMP_INSN	#I_PIECE_FLIP,	prep_piece_value
; 475     75 4808_277f    	insn ST_JMP_INSN	#T_PIECE,	prep_piece_value
; 476     76 4808_727f    	insn ST_JMP_INSN	#T_PIECE_FLIP,	prep_piece_value
; 477     77 4808_367f    	insn ST_JMP_INSN	#S_PIECE,	prep_piece_value
; 478     78 4808_367f    	insn ST_JMP_INSN	#S_PIECE_FLIP,	prep_piece_value
; 479     79 4808_637f    	insn ST_JMP_INSN	#Z_PIECE,	prep_piece_value
; 480     7a 4808_637f    	insn ST_JMP_INSN	#Z_PIECE_FLIP,	prep_piece_value
; 481     7b 4808_717f    	insn ST_JMP_INSN	#J_PIECE,	prep_piece_value
; 482     7c 4808_477f    	insn ST_JMP_INSN	#J_PIECE_FLIP,	prep_piece_value
; 483     7d 4808_177f    	insn ST_JMP_INSN	#L_PIECE,	prep_piece_value
; 484     7e 4808_747f    	insn ST_JMP_INSN	#L_PIECE_FLIP,	prep_piece_value
; 485     7f 4010_ff00    prep_piece_value	nop	; prep_piece_value stores the jump table result.
; 486                     
; 488     80 0202_0588    	jo	piece_rotation,	prep_piece_hor
; 490     81 0800_7f2f    	st	prep_piece_value,	piece_stage+5
; 491     82 4980_f02f    	andto	#0xF0,	piece_stage+5	; Clear lower 4 bits
; 492     83 4800_fc00    	st	#-4,	tmp
; 493     84 0880_7f7f    prep_piece_vert_loop	lsl	prep_piece_value
; 494     85 802a_0084    	incjne	tmp,	prep_piece_vert_loop
; 495     86 0800_7f2d    	st	prep_piece_value,	piece_stage+3
; 496     87 4018_ff92    	jmp	prep_piece_ret
; 498     0000_0088       prep_piece_hor_i	equ	prep_piece_target		; Reuse prep_piece_target as the outer loop variable.
; 499     88 4800_fd70    	st	#-3,	prep_piece_hor_i
; 501     89 4800_318b    	st	#(piece_stage+7),	prep_piece_hor_ptr
; 503     8a 0800_8b8d    	st	prep_piece_hor_ptr,	prep_piece_hor_wb_ptr
; 504     8b c080_0000    prep_piece_hor_ptr	insn IMADD_INSN	tmp,	0	; LOAD
; 505     8c 0a00_7f7f    	lsr	prep_piece_value
; 506     8d 0a10_0000    prep_piece_hor_wb_ptr	rorto	tmp,	0	; STORE
; 507     8e 48e0_028b    	rsbto	#2,	prep_piece_hor_ptr
; 508     8f 40e0_2a8b    	insn ALEB_TOC_INSN	#piece_stage,	prep_piece_hor_ptr
; 509     90 006c_008a    	jcs	prep_piece_hor_loop_b		; Loop if #piece_stage <= prep_piece_hor_ptr
; 510     91 802a_7089    	incjne	prep_piece_hor_i,	prep_piece_hor_loop_a
; 511     92 4018_ff00    prep_piece_ret	jmp	0
; 512                     
; 513                     ; shift_piece subroutine.
; 514                     ;
; 515                     ; Shifts the piece stage downwards by the set amount stored negated in tmp.
; 516                     ; If the piece is shifted to the bottom of the board, stops and returns non-zero in tmp.
; 518     93 0062_00a1    	jeq	tmp,	shift_piece_ret
; 520     94 0202_30a1    	jo	piece_stage+6,	shift_piece_ret
; 521     95 0202_2ea1    	jo	piece_stage+4,	shift_piece_ret
; 522     96 0202_2ca1    	jo	piece_stage+2,	shift_piece_ret
; 523     97 0202_2aa1    	jo	piece_stage+0,	shift_piece_ret
; 525     98 0a00_3131    	lsr	piece_stage+7
; 526     99 0a10_3030    	ror	piece_stage+6
; 527     9a 0a00_2f2f    	lsr	piece_stage+5
; 528     9b 0a10_2e2e    	ror	piece_stage+4
; 529     9c 0a00_2d2d    	lsr	piece_stage+3
; 530     9d 0a10_2c2c    	ror	piece_stage+2
; 531     9e 0a00_2b2b    	lsr	piece_stage+1
; 532     9f 0a10_2a2a    	ror	piece_stage+0
; 533     a0 802a_0094    	incjne	tmp,	shift_piece_loop
; 534     a1 4018_ff00    shift_piece_ret	jmp	0	; Return from subroutine
; 535                     
; 536                     ; stamp_piece: Stamp piece board subroutine.
; 537                     ;
; 538                     ; This subroutine handles several functions:
; 539                     ;
; 540                     ; * ADDing the piece_stage to the gameboard (Stamping the piece down)
; 541                     ; * BICing the piece_stage to the gameboard (Clearing the piece off)
; 542                     ; * Checking for any common bits (AND result > 0) between piece_stage and gameboard (Checking for collision).
; 543                     ;
; 544                     ; stamp_piece_op must be set to #stamp_piece_coll_op, #stamp_piece_merge_op, or #stamp_piece_clear_op before executing.
; 545                     ;
; 546                     ; When executing stamp_piece_coll_op, tmp will be non-zero if a collision occured.
; 547                     ;
; 550     a2 4800_2aa8    	st	#piece_stage,	stamp_piece_ps_ptr
; 551     a3 4800_0faa    	st	#(gameboard+(PIECE_X_OFFSET*2)),	stamp_piece_gb_ptr
; 552     a4 0880_03aa    	addto	piece_x,	stamp_piece_gb_ptr
; 553     a5 0880_03aa    	addto	piece_x,	stamp_piece_gb_ptr	; stamp_piece_gb_ptr = #gameboard + 2 * piece_x
; 556     a6 4800_f800    	st	#-PIECE_STAGE_SIZE,	tmp
; 558                     
; 559     a7 8100_a700    stamp_piece_ps_val	insn CLRA_INSN	stamp_piece_ps_val,	0	; Self clearing variable stamp_piece_ps_val
; 560     a8 8080_a700    stamp_piece_ps_ptr	add	stamp_piece_ps_val,	0	; Piece stage LOAD
; 562     a9 8100_a900    stamp_piece_gb_val	insn CLRA_INSN	stamp_piece_gb_val,	0	; Self clearing variable stamp_piece_gb_val
; 563     aa 8080_a900    stamp_piece_gb_ptr	add	stamp_piece_gb_val,	0	; Game board LOAD
; 564                     
; 566     ab 4018_ff00    stamp_piece_op	jmp	0	; This is set before calling the subroutine
; 569     ac 0980_a7a9    	andto	stamp_piece_ps_val,	stamp_piece_gb_val
; 570     ad 0062_a9b5    	jeq	stamp_piece_gb_val,	stamp_piece_loop_end	; If collision didn't occur, keep looping.
; 572     ae 0800_a900    	st	stamp_piece_gb_val,	tmp	; Store colliding bits in tmp
; 573     af 4018_ffb8    	jmp	stamp_piece_ret		; Break out of loop and exit
; 577     b0 0880_a7a9    	addto	stamp_piece_ps_val,	stamp_piece_gb_val
; 578     b1 4018_ffb3    	jmp	stamp_piece_writeback
; 580     b2 09c0_a7a9    	bicto	stamp_piece_ps_val,	stamp_piece_gb_val
; 582     b3 0800_aab4    	st	stamp_piece_gb_ptr,	stamp_piece_gb_wb_ptr
; 583     b4 0800_a900    stamp_piece_gb_wb_ptr	st	stamp_piece_gb_val,	0	; Game board STORE
; 586     b5 8020_a800    rem_bits_mask	insn INCA_INSN	stamp_piece_ps_ptr,	0	; Variable storage for rem_bits_mask, in rem_bits
; 587     b6 8020_aa00    	insn INCA_INSN	stamp_piece_gb_ptr,	0
; 588     b7 802a_00a7    	incjne	tmp,	stamp_piece_loop
; 589     b8 4018_ff00    stamp_piece_ret	jmp	0	; Return from subroutine
; 590                     
; 591                     ; render_board: Render board subroutine
; 592                     ;
; 593                     ; How:
; 594                     ; Render the gameboard from left to right, top to bottom, to give the most simple console output (avoids ANSI console cursor movement).
; 595                     ;
; 596                     ; LOOP A: Starts at top of the board and then switches to bottom half of the board. The gameboard ptr offset changes from 1 to 0. (or 2 -> 1 -> 0 if using a bigger game board)
; 597                     ; LOOP B: Work down the rows using a single byte bitmask, shifting it right each iteration.
; 598                     ; LOOP C: Work along the columns from 0 to 10, incrementing the gameboard ptr by 2 each iteration.
; 599                     ;         Decide whether to render a block or empty character by ANDing the gameboard ptr value with the current bitmask
; 600                     ;
; 602     b9 4800_01be    	st	#(GAMEBOARD_STRIDE-1),	render_board_ptr	; Start the render_board_ptr with an offset of 1 to render the top half of the board.
; 603                     ; LOOP A
; 605     ba 4880_09be    	addto	#gameboard,	render_board_ptr	; Adjust the render_board_ptr to point into the gameboard. TODO: Move out of loop after implementing ALEB_TOC_INSN below since this won't be changed.
; 606     bb 4800_80c5    	st	#%1000_0000,	render_board_mask	; Initialize the bitmask for testing the column byte for which row is set
; 607                     ; LOOP B
; 609     bc 4800_f6c6    	st	#(-GAMEBOARD_COLS),	render_board_col	; Prepare column loop counter
; 610                     ; LOOP C
; 612     bd 0800_c500    	st	render_board_mask,	tmp
; 613     be 8180_0000    render_board_ptr	insn AND_INSN	tmp,	0	; Indirect AND, store result in tmp
; 616     bf 006a_00c1    	jne	tmp,	render_board_print_a
; 617     c0 d808_7ec2    	insn OUTC_JMP_INSN	#EMPTY_CHAR,	render_board_print_b	; Print empty char and jump over the block char print
; 619     c1 d800_2300    line_clr_i	outc	#BLOCK_CHAR		; Used as variable storage for line_clr_i in line_clr
; 621     c2 4880_02be    	addto	#GAMEBOARD_STRIDE,	render_board_ptr	; Move onto next column byte
; 622     c3 802a_c6bd    	incjne	render_board_col,	render_board_loop_c	; If we still have columns to render, continue LOOP C
; 623                     ; END LOOP C
; 624     c4 48e0_14be    	rsbto	#GAMEBOARD_SIZE,	render_board_ptr	; Reset render_board_ptr to pre-loop state
; 628     c5 d800_0d00    render_board_mask	outc	#CR_CHAR		; render_board_mask: The row bitmask for selecting the row to render
; 629     c6 d800_0a00    render_board_col	outc	#LF_CHAR		; render_board_col: The current column iteration loop counter.
; 630                     
; 633     c7 820a_c5bc    	insn LSR_JCC_INSN	render_board_mask,	render_board_loop_b
; 634                     ; END LOOP B
; 637     c8 48e0_0abe    	rsbto	#(gameboard+1),	render_board_ptr	; TODO: Can replace with ALEB_TOC_INSN + jcs
; 639     c9 0069_beba    	jge	render_board_ptr,	render_board_loop_a	; Otherwise continue LOOP A.
; 641     ca d800_0d00    get_full_lines_mask	outc	#CR_CHAR		; get_full_lines_mask: variable for get_full_lines
; 642     cb d800_0a00    	outc	#LF_CHAR
; 643                     ; END LOOP A
; 644     cc 4018_ff00    render_board_ret	jmp	0		; Return from subroutine.
; 645                     
; 646                     ; line_clr: Clears all full rows from the gameboard.
; 647                     ;
; 648                     ; How:
; 649                     ; 1. Call get_full_lines to generate a bitmask of all the complete rows
; 650                     ; 2. Call rem_bits on each column in the gameboard with a copy of the complete rows bitmask.
; 651                     ; 3. Copy the result back over the gameboard.
; 652                     ;
; 655     cd 8408_ebe2    	jsr	get_full_lines_ret,	get_full_lines
; 656                     
; 658     ce 006a_cad1    	jne	get_full_lines_mask+0,	line_clr_do_remove
; 659     cf 006a_cbd1    	jne	get_full_lines_mask+1,	line_clr_do_remove
; 660     d0 4018_ffe1    	jmp	line_clr_ret	; Fastpath to returning from the subroutine
; 663     d1 8100_d100    rem_bits_value	insn CLRA_INSN	rem_bits_value+0,	0	; rem_bits_value: 2 bytes. Variable storage for rem_bits.
; 664     d2 8100_d200    	insn CLRA_INSN	rem_bits_value+1,	0	; Self clearing.
; 665                     
; 667     d3 4800_f6c1    	st	#(-GAMEBOARD_COLS),	line_clr_i	; Prep the loop counter
; 668                     
; 670     d4 4800_09d8    	st	#gameboard,	line_clr_read_ptr_0
; 672                     
; 673                     ; Line clear loop. It will call rem_bits with the line clear mask and each column of the gameboard.
; 677     d5 0800_cab5    	st	get_full_lines_mask+0,	rem_bits_mask+0	; Prep mask +0
; 678     d6 0800_cbb6    	st	get_full_lines_mask+1,	rem_bits_mask+1	; Prep mask +1
; 679                     
; 681     d7 0820_d8d9    	insn INCTO_INSN	line_clr_read_ptr_0,	line_clr_read_ptr_1	; Prep ptr +1
; 683     d8 8080_d100    line_clr_read_ptr_0	add	rem_bits_value+0,	0	; Load +0
; 684     d9 8080_d200    line_clr_read_ptr_1	add	rem_bits_value+1,	0	; Load +1
; 685                     
; 687     da 8408_fcec    	jsr	rem_bits_ret,	rem_bits
; 688                     
; 690     db 0800_d8dd    	st	line_clr_read_ptr_0,	line_clr_write_ptr_0	; Prep ptr +0
; 691     dc 0800_d9de    	st	line_clr_read_ptr_1,	line_clr_write_ptr_1	; Prep ptr +1
; 693     dd 0800_ec00    line_clr_write_ptr_0	st	rem_bits_result+0,	0	; Store +0
; 694     de 0800_ed00    line_clr_write_ptr_1	st	rem_bits_result+1,	0	; Store +1
; 695                     
; 697     df 4880_02d8    	addto	#2,	line_clr_read_ptr_0	; Iterate ptr +0
; 698     e0 802a_c1d5    	incjne	line_clr_i,	line_clr_loop	; Loop
; 699     e1 4018_ff00    line_clr_ret	jmp	0		; Return from subroutine
; 700                     
; 701                     ; get_full_lines
; 702                     ;
; 703                     ; Generates a 2 byte, 16 bit bitmask indicating which rows in the gameboard are filled.
; 704                     ; This is the bitwise AND of all columns in the gameboard.
; 705                     ;
; 706                     ;get_full_lines_mask	skip	2	; Stored in render_board
; 708     e2 4800_f600    	st	#(-GAMEBOARD_COLS),	tmp
; 709     e3 4800_ffca    	st	#0xFF,	get_full_lines_mask+0
; 710     e4 4800_ffcb    	st	#0xFF,	get_full_lines_mask+1
; 711     e5 4800_09e7    	st	#gameboard,	get_full_lines_ptr_0
; 713     e6 0820_e7e8    	insn INCTO_INSN	get_full_lines_ptr_0,	get_full_lines_ptr_1
; 714     e7 8180_ca00    get_full_lines_ptr_0	insn AND_INSN	get_full_lines_mask+0,	0
; 715     e8 8180_cb00    get_full_lines_ptr_1	insn AND_INSN	get_full_lines_mask+1,	0
; 716     e9 4880_02e7    	addto	#2,	get_full_lines_ptr_0
; 717     ea 802a_00e6    	incjne	tmp,	get_full_lines_loop
; 718     eb 4018_ff00    get_full_lines_ret	jmp	0		; Return from subroutine
; 719                     
; 720                     ; rem_bits
; 721                     ;
; 722                     ; Remove the bits from rem_bits_value in the positions they are set in rem_bits_mask.
; 723                     ; For each bit removed, the more significant bits are shifted right to fill its place.
; 724                     ; The leftmost most significant bits are filled with zeroes.
; 725                     ;
; 726                     ; The output is placed in rem_bits_result.
; 727                     ; rem_bits_mask and rem_bits_value are zeroed as a result of this process.
; 728                     ;
; 729                     ;rem_bits_mask	skip	2	; Stored in stamp_piece
; 730                     ;rem_bits_value	skip	2	; Stored in line_clr
; 733     ec 8100_ec00    rem_bits_result	insn CLRA_INSN	rem_bits_result+0,	0	; Self clearing variables
; 734     ed 8100_ed00    	insn CLRA_INSN	rem_bits_result+1,	0
; 736     ee 4800_f000    	st	#-16,	tmp	; Loop 16 times
; 738     ef 0880_b5b5    	lsl	rem_bits_mask+0		; Logical shift left mask (0 -> bit 0)
; 739     f0 0890_b6b6    	rol	rem_bits_mask+1		; (bit 15 -> carry)
; 740     f1 0064_00f7    	jcc	rem_bits_A		; GOTO A if carry clear
; 742     f2 0880_d1d1    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 743     f3 0890_d2d2    	rol	rem_bits_value+1		; The carry result is discarded.
; 746     f4 40e0_f6c1    	insn ALEB_TOC_INSN	#(-GAMEBOARD_COLS),	line_clr_i	; If this is the first iteration of rem_bits (first column), store 1 in carry
; 747     f5 4890_0001    	adcto	#0,	lines_cleared	; Add carry to lines cleared
; 749     f6 4018_fffb    	jmp	rem_bits_loop_end
; 751     f7 0880_d1d1    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 752     f8 0890_d2d2    	rol	rem_bits_value+1		; (bit 15 -> carry)
; 753     f9 0890_ecec    	rol	rem_bits_result+0		; Rotate left to save the carry into result (carry -> bit 0)
; 754     fa 0890_eded    	rol	rem_bits_result+1		; Carry from rotating result is discarded.
; 755     fb 802a_00ef    rem_bits_loop_end	incjne	tmp,	rem_bits_loop	; Loop
; 756     fc 4018_ff00    rem_bits_ret	jmp	0		; Return from subroutine
; 757                     
; 759     0000_00fd       PROGRAM_FREE_SPACE	equ	(256-PROGRAM_SIZE)
; 760                     
; 761                     

; 0 errors detected in pass 2

; Symbol table:
; ALEB_TOC_INSN = 0xe00000
; ALTB_TOC_INSN = 0xc00000
; AND_INSN = 0x81800000
; BAR_CHAR = 0x7c
; BLOCK_CHAR = 0x23
; CLRA_INSN = 0x81000000
; CR_CHAR = 0xd
; EMPTY_CHAR = 0x7e
; GAMEBOARD_COLS = 0xa
; GAMEBOARD_SIZE = 0x14
; GAMEBOARD_STRIDE = 0x2
; IMADD_INSN = 0xc0800000
; INCA_INSN = 0x80200000
; INCJMP_INSN = 0x80280000
; INCTO_INSN = 0x8200000
; I_PIECE = 0xf0
; I_PIECE_FLIP = 0xf0
; J_PIECE = 0x71
; J_PIECE_FLIP = 0x47
; LF_CHAR = 0xa
; LSR_JCC_INSN = 0x820a0000
; L_PIECE = 0x17
; L_PIECE_FLIP = 0x74
; OUTC_JMP_INSN = 0x98080000
; O_PIECE = 0x66
; O_PIECE_FLIP = 0x66
; PIECE_STAGE_SIZE = 0x8
; PIECE_X_OFFSET = 0x3
; PROGRAM_FREE_SPACE = 0x3
; PROGRAM_SIZE = 0xfd
; SPACE_CHAR = 0x20
; ST_JMP_INSN = 0x8080000
; S_PIECE = 0x36
; S_PIECE_FLIP = 0x36
; T_PIECE = 0x27
; T_PIECE_FLIP = 0x72
; Z_PIECE = 0x63
; Z_PIECE_FLIP = 0x63
; gameboard = 0x9
; get_full_lines = 0xe2
; get_full_lines_loop = 0xe6
; get_full_lines_mask = 0xca
; get_full_lines_ptr_0 = 0xe7
; get_full_lines_ptr_1 = 0xe8
; get_full_lines_ret = 0xeb
; hard_drop_flag = 0x20
; line_clr = 0xcd
; line_clr_do_remove = 0xd1
; line_clr_i = 0xc1
; line_clr_loop = 0xd5
; line_clr_read_ptr_0 = 0xd8
; line_clr_read_ptr_1 = 0xd9
; line_clr_ret = 0xe1
; line_clr_write_ptr_0 = 0xdd
; line_clr_write_ptr_1 = 0xde
; lines_cleared = 0x1
; main = 0x1
; main_check_collision = 0x35
; main_end = 0x63
; main_full_render = 0x39
; main_hard_drop = 0x62
; main_move_drop = 0x50
; main_move_drop_2 = 0x55
; main_move_drop_3 = 0x59
; main_move_left = 0x5c
; main_move_right = 0x5e
; main_next_piece = 0x1f
; main_no_stamp_flag = 0x3e
; main_not_game_over = 0x29
; main_read_input = 0x42
; main_render_fresh_piece = 0x2a
; main_rot_left = 0x5f
; main_rot_right = 0x61
; main_undo_then_render = 0x27
; piece_kind = 0x2
; piece_rotation = 0x5
; piece_stage = 0x2a
; piece_x = 0x3
; piece_y = 0x4
; prep_piece = 0x6b
; prep_piece_hor = 0x88
; prep_piece_hor_i = 0x70
; prep_piece_hor_loop_a = 0x89
; prep_piece_hor_loop_b = 0x8a
; prep_piece_hor_ptr = 0x8b
; prep_piece_hor_wb_ptr = 0x8d
; prep_piece_jmp = 0x71
; prep_piece_ret = 0x92
; prep_piece_target = 0x70
; prep_piece_value = 0x7f
; prep_piece_vert = 0x81
; prep_piece_vert_loop = 0x84
; prev_piece_rotation = 0x26
; prev_piece_x = 0x24
; prev_piece_y = 0x25
; rem_bits = 0xec
; rem_bits_A = 0xf7
; rem_bits_loop = 0xef
; rem_bits_loop_end = 0xfb
; rem_bits_mask = 0xb5
; rem_bits_result = 0xec
; rem_bits_ret = 0xfc
; rem_bits_value = 0xd1
; render_board = 0xb9
; render_board_col = 0xc6
; render_board_loop_a = 0xba
; render_board_loop_b = 0xbc
; render_board_loop_c = 0xbd
; render_board_mask = 0xc5
; render_board_print_a = 0xc1
; render_board_print_b = 0xc2
; render_board_ptr = 0xbe
; render_board_ret = 0xcc
; save_piece_state = 0x63
; save_piece_state_ret = 0x66
; shift_piece = 0x93
; shift_piece_loop = 0x94
; shift_piece_ret = 0xa1
; stamp_flag = 0x1f
; stamp_piece = 0xa2
; stamp_piece_clear_op = 0xb2
; stamp_piece_coll_op = 0xac
; stamp_piece_gb_ptr = 0xaa
; stamp_piece_gb_val = 0xa9
; stamp_piece_gb_wb_ptr = 0xb4
; stamp_piece_loop = 0xa7
; stamp_piece_loop_end = 0xb5
; stamp_piece_merge_op = 0xb0
; stamp_piece_op = 0xab
; stamp_piece_ps_ptr = 0xa8
; stamp_piece_ps_val = 0xa7
; stamp_piece_ret = 0xb8
; stamp_piece_writeback = 0xb3
; stop = 0x0
; tmp = 0x0
; undo_piece_state = 0x67
; undo_piece_state_ret = 0x6a
; undo_retry_count = 0x6

; Memory image:
00: c810ff00 81000100 81000200 81000300 81000400 81000500 81000600 000000ff
08: 000000ff 81000900 81000a00 81000b00 81000c00 81000d00 81000e00 81000f00
10: 81001000 81001100 81001200 81001300 81001400 81001500 81001600 81001700
18: 81001800 81001900 81001a00 81001b00 81001c00 000000ff 000000ff 81001f00
20: 81002000 40e00602 48900102 49800702 81002400 81002500 81002600 802a0629
28: d8085800 84086a67 81002a00 81002b00 81002c00 81002d00 81002e00 81002f00
30: 81003000 81003100 8408926b 08000400 8408a193 4800acab 8408b8a2 006a0027
38: 4800fe06 4800b0ab 8408b8a2 00621f3e 8408e1cd 4018ff1f 8408ccb9 4800b2ab
40: 8408b8a2 84086663 e8000000 48e00200 00620050 48e00200 0062005c 48e00200
48: 0062005e 48e00100 0062005f 48e00100 00620062 48e00100 00620061 d8083f42
50: 48e00104 4800ff00 8408a193 00620055 80281f39 4800acab 8408b8a2 00620059
58: 80281f27 020a2039 08000425 4018ff50 48e00103 4018ff35 80280335 48e00105
60: 4018ff2a 8028052a 80282050 08000526 08000324 08000425 4018ff00 08002605
68: 08002403 08002504 4018ff00 08000270 0a000500 0a000000 08907070 48807170
70: 4018ff00 4808667f 4808667f 4808f07f 4808f07f 4808277f 4808727f 4808367f
78: 4808367f 4808637f 4808637f 4808717f 4808477f 4808177f 4808747f 4010ff00
80: 02020588 08007f2f 4980f02f 4800fc00 08807f7f 802a0084 08007f2d 4018ff92
88: 4800fd70 4800318b 08008b8d c0800000 0a007f7f 0a100000 48e0028b 40e02a8b
90: 006c008a 802a7089 4018ff00 006200a1 020230a1 02022ea1 02022ca1 02022aa1
98: 0a003131 0a103030 0a002f2f 0a102e2e 0a002d2d 0a102c2c 0a002b2b 0a102a2a
a0: 802a0094 4018ff00 48002aa8 48000faa 088003aa 088003aa 4800f800 8100a700
a8: 8080a700 8100a900 8080a900 4018ff00 0980a7a9 0062a9b5 0800a900 4018ffb8
b0: 0880a7a9 4018ffb3 09c0a7a9 0800aab4 0800a900 8020a800 8020aa00 802a00a7
b8: 4018ff00 480001be 488009be 480080c5 4800f6c6 0800c500 81800000 006a00c1
c0: d8087ec2 d8002300 488002be 802ac6bd 48e014be d8000d00 d8000a00 820ac5bc
c8: 48e00abe 0069beba d8000d00 d8000a00 4018ff00 8408ebe2 006acad1 006acbd1
d0: 4018ffe1 8100d100 8100d200 4800f6c1 480009d8 0800cab5 0800cbb6 0820d8d9
d8: 8080d100 8080d200 8408fcec 0800d8dd 0800d9de 0800ec00 0800ed00 488002d8
e0: 802ac1d5 4018ff00 4800f600 4800ffca 4800ffcb 480009e7 0820e7e8 8180ca00
e8: 8180cb00 488002e7 802a00e6 4018ff00 8100ec00 8100ed00 4800f000 0880b5b5
f0: 0890b6b6 006400f7 0880d1d1 0890d2d2 40e0f6c1 48900001 4018fffb 0880d1d1
f8: 0890d2d2 0890ecec 0890eded 802a00ef 4018ff00
