; Pass 1...

; 0 errors detected in pass 1

; Pass 2...
; 1                       ; Tetris implementation
; 2                       ; Ryan Crosby 2022
; 3                       ;
; 4                       ; Run from 0x01.
; 5                       ;
; 6                       ; Completed:
; 7                       ;
; 8                       ; * Gameboard format
; 9                       ; * Gameboard rendering to console
; 10                      ; * Line clearing
; 11                      ; * Piece rendering for all pieces in any orientation
; 12                      ; * Piece shifting with floor collision detection
; 13                      ; * Piece stamping and clearing from gameboard
; 14                      ; * Piece collision detection with gameboard
; 15                      ;
; 16                      ; ~32 instructions left to implement the rest of TODO, probably more with test code removed.
; 17                      ;
; 18                      ; TODO:
; 19                      ;
; 20                      ; * Read user input
; 21                      ; * Core game loop logic
; 22                      ; 
; 23                      ; * Description with controls etc.
; 24                      ;
; 25                      
; 26                      ; =========
; 27                      ; Constants
; 28                      ; =========
; 29                      
; 30                      ; Gameboard parameters
; 31                      ; These constants are used for convenience. Changing the value won't change the actual sizes of the gameboards, code will need to be modified as well.
; 32      0000_0000       GAMEBOARD_STRIDE	equ	2	; How many bytes high is the gameboard. 2 bytes = 16 rows.
; 33      0000_0000       GAMEBOARD_COLS	equ	10	; How many columns wide is the gameboard. This is generic enough that it can be adjusted without altering any code.
; 34      0000_0000       GAMEBOARD_SIZE	equ	(GAMEBOARD_STRIDE*GAMEBOARD_COLS)	; Gameboard total size = stride * columns
; 35                      
; 36      0000_0000       PIECE_STAGE_SIZE	equ	(GAMEBOARD_STRIDE*4)	; The piece stage is the same height as the gameboard, but only 4 wide.
; 37                      
; 38      0000_0000       SPACE_CHAR	equ	0x20	; Space
; 39      0000_0000       BLOCK_CHAR	equ	0x23	; #
; 40      0000_0000       EMPTY_CHAR	equ	0x7E 	; ~
; 41      0000_0000       BAR_CHAR	equ	0x7C	; |
; 42                      
; 43      0000_0000       CR_CHAR	equ	0x0D	; Carriage Return CR \r
; 44      0000_0000       LF_CHAR	equ	0x0A	; Linefeed LF \n
; 45                      
; 46                      ; Number constants
; 47      0000_0000       ZERO_CHAR	equ	0x30	; 0
; 48                      
; 49                      ; Alphabet constants
; 50      0000_0000       A_CHAR	equ	0x41	; A
; 51      0000_0000       B_CHAR	equ	A_CHAR+1
; 52      0000_0000       C_CHAR	equ	A_CHAR+2
; 53      0000_0000       D_CHAR	equ	A_CHAR+3
; 54      0000_0000       E_CHAR	equ	A_CHAR+4
; 55      0000_0000       F_CHAR	equ	A_CHAR+5
; 56      0000_0000       G_CHAR	equ	A_CHAR+6
; 57      0000_0000       H_CHAR	equ	A_CHAR+7
; 58      0000_0000       I_CHAR	equ	A_CHAR+8
; 59      0000_0000       J_CHAR	equ	A_CHAR+9
; 60      0000_0000       K_CHAR	equ	A_CHAR+10
; 61      0000_0000       L_CHAR	equ	A_CHAR+11
; 62      0000_0000       M_CHAR	equ	A_CHAR+12
; 63      0000_0000       N_CHAR	equ	A_CHAR+13
; 64      0000_0000       O_CHAR	equ	A_CHAR+14
; 65      0000_0000       P_CHAR	equ	A_CHAR+15
; 66      0000_0000       Q_CHAR	equ	A_CHAR+16
; 67      0000_0000       R_CHAR	equ	A_CHAR+17
; 68      0000_0000       S_CHAR	equ	A_CHAR+18
; 69      0000_0000       T_CHAR	equ	A_CHAR+19
; 70      0000_0000       U_CHAR	equ	A_CHAR+20
; 71      0000_0000       V_CHAR	equ	A_CHAR+21
; 72      0000_0000       W_CHAR	equ	A_CHAR+22
; 73      0000_0000       X_CHAR	equ	A_CHAR+23
; 74      0000_0000       Y_CHAR	equ	A_CHAR+24
; 75      0000_0000       Z_CHAR	equ	A_CHAR+25
; 76                      
; 77                      ; Additional custom instructions
; 78                      ; To use these, call them like: insn INCTO_INSN aa, bb
; 79      0000_0000       IMADD_INSN	equ	0xC0800000	; aa + [bb] --> [aa]. Immediate version of ADD. If aa is 0, allows single instruction LOAD of [bb] to [0].
; 80      0000_0000       AND_INSN	equ	0x81800000	; The WRA version of andto. ANDs [aa] and [bb], and stores in [aa].
; 81      0000_0000       CLRA_INSN	equ	0x81000000	; Stores 0 --> [aa]. Implemented as [aa] & 0 --> [aa].
; 82      0000_0000       INCTO_INSN	equ	0x08200000	; Stores [aa] + 1 --> [bb] in one instruction.
; 83      0000_0000       ALTB_TOC_INSN	equ	0x00C00000	; Stores [aa] < [bb] --> Carry.
; 84      0000_0000       ALEB_TOC_INSN	equ	0x00E00000	; Stores [aa] <= [bb] --> Carry.
; 85      0000_0000       ST_JMP_INSN	equ	0x08080000	; Stores [aa] --> [bb] and jumps to bb.
; 86      0000_0000       OUTC_JMP_INSN	equ	0x98080000	; Writes [aa] to the console and jumps to bb. WRA and WRB are set to make OUT write to console.
; 87      0000_0000       LSR_JCC_INSN	equ	0x820A0000	; Rotates [aa] right, writes the result back to [aa], and jumps if the shifted out bit (carry output) was clear.
; 88                      
; 89                      ; Pieces templates
; 90                      ;
; 91                      ; Piece patterns are stored as a single byte.
; 92                      ; The 4 lsb bits represent the left of the piece, the 4 msb bits representing the right of the piece.
; 93                      ; The alignment and bit direction matches the piece stage.
; 94                      ;
; 95                      ; A "flipped" version of each piece is also stored, which is similar to the piece being left-to-right bitswapped.
; 96                      ; However using a dedicated version of the flipped piece removes the need for a bitswap subroutine,
; 97                      ; which actually saves instructions overall, and also allows the pieces to be tweaked so that they rotate correctly.
; 98                      ;
; 99                      ; The Gameboy left-handed rotation system was used as a reference, but the code doesn't attempt to exactly adhere to any particular system,
; 100                     ; it just attempts to look somewhat acceptable and use minimal instructions.
; 101                     
; 102                     
; 103                     ; I piece
; 104                     ;
; 105                     ;3   7
; 106                     ; 0 1
; 107                     ; 0 1
; 108                     ; 0 1
; 109                     ; 0 1
; 110                     ;0   4
; 111     0000_0000       I_PIECE	equ	0xF0
; 112     0000_0000       I_PIECE_FLIP	equ	I_PIECE	; I piece is the same flipped
; 113                     
; 114                     ; O (square) piece
; 115                     ;
; 116                     ;3   7
; 117                     ; 0 0
; 118                     ; 1 1
; 119                     ; 1 1
; 120                     ; 0 0
; 121                     ;0   4
; 122     0000_0000       O_PIECE	equ	0x66
; 123     0000_0000       O_PIECE_FLIP	equ	O_PIECE	; Square is same in any rotation
; 124                     
; 125                     ; T piece
; 126                     ;
; 127                     ;3   7
; 128                     ; 0 0
; 129                     ; 1 0
; 130                     ; 1 1
; 131                     ; 1 0
; 132                     ;0   4
; 133     0000_0000       T_PIECE	equ	0x27
; 134                     
; 135                     ; T piece flipped
; 136                     ;
; 137                     ;3   7
; 138                     ; 0 0
; 139                     ; 0 1
; 140                     ; 1 1
; 141                     ; 0 1
; 142                     ;0   4
; 143     0000_0000       T_PIECE_FLIP	equ	0x72
; 144                     
; 145                     ; S piece
; 146                     ;
; 147                     ;3   7
; 148                     ; 0 0
; 149                     ; 1 0
; 150                     ; 1 1
; 151                     ; 0 1
; 152                     ;0   4
; 153     0000_0000       S_PIECE	equ	0x36
; 154     0000_0000       S_PIECE_FLIP	equ	S_PIECE	; S piece is the same rotated
; 155                     
; 156                     ; S piece
; 157                     ;
; 158                     ;3   7
; 159                     ; 0 0
; 160                     ; 0 1
; 161                     ; 1 1
; 162                     ; 1 0
; 163                     ;0   4
; 164     0000_0000       Z_PIECE	equ	0x63
; 165     0000_0000       Z_PIECE_FLIP	equ	Z_PIECE	; Z piece is the same rotated
; 166                     
; 167                     ; J piece
; 168                     ;
; 169                     ;3   7
; 170                     ; 0 0
; 171                     ; 0 1
; 172                     ; 0 1
; 173                     ; 1 1
; 174                     ;0   4
; 175     0000_0000       J_PIECE	equ	0x71
; 176                     
; 177                     ; J piece flipped
; 178                     ;
; 179                     ;3   7
; 180                     ; 0 0
; 181                     ; 1 1
; 182                     ; 1 0
; 183                     ; 1 0
; 184                     ;0   4
; 185     0000_0000       J_PIECE_FLIP	equ	0x47
; 186                     
; 187                     ; L piece
; 188                     ;
; 189                     ;3   7
; 190                     ; 0 0
; 191                     ; 1 0
; 192                     ; 1 0
; 193                     ; 1 1
; 194                     ;0   4
; 195     0000_0000       L_PIECE	equ	0x17
; 196                     
; 197                     ; L piece flipped
; 198                     ;
; 199                     ;3   7
; 200                     ; 0 0
; 201                     ; 1 1
; 202                     ; 0 1
; 203                     ; 0 1
; 204                     ;0   4
; 205     0000_0000       L_PIECE_FLIP	equ	0x74
; 206                     
; 207                     ; ================
; 208                     ; Application code
; 209                     ; ================
; 210                     
; 211                     ; Temporary variable tmp at address 0x00.
; 212                     ;
; 213                     ; Used as a halt catch for any jumps to null (0x00). This usually indicates a subroutine hasn't had its return address set.
; 214                     ; Also used as a temporary storage register, and sometimes as the return value for subroutines that only need to return a status.
; 215                     
; 216     00              	org	0x00
; 217     00 c810_ff00    tmp	halt
; 218                     
; 219                     ; ENTRY POINT
; 220     01              	org	0x01
; 223     01 8408_d5b8    	jsr	reset_game_state_ret,	reset_game_state
; 240     02 4800_f91f    	st	#-7,	test_piece_loop_i
; 242     03 4800_00ba    	clr	piece_rotation
; 243     04 4800_fc20    	st	#-4,	test_piece_loop_j
; 246     05 8408_ded6    	jsr	clear_piece_stage_ret,	clear_piece_stage
; 249     06 8408_4b24    	jsr	prep_piece_ret,	prep_piece
; 252     07 48e0_01bb    	dec	piece_y
; 253     08 0800_bb00    	st	piece_y,	tmp
; 254     09 8408_594c    	jsr	shift_piece_ret,	shift_piece
; 257     0a 006a_000f    	jne	tmp,	collision
; 260     0b 4800_6463    	st	#stamp_piece_coll_op,	stamp_piece_op
; 261     0c 8408_705a    	jsr	stamp_piece_ret,	stamp_piece
; 264     0d 006a_000f    	jne	tmp,	collision
; 266     0e d808_4e10    	insn OUTC_JMP_INSN	#N_CHAR,	no_collision
; 267     0f d800_4300    collision	outc	#C_CHAR
; 272                     
; 273     10 d800_0d00    	outc	#CR_CHAR
; 274     11 d800_0a00    	outc	#LF_CHAR
; 277     12 4800_6863    	st	#stamp_piece_merge_op,	stamp_piece_op
; 278     13 8408_705a    	jsr	stamp_piece_ret,	stamp_piece
; 281     14 8408_8271    	jsr	render_board_ret,	render_board
; 283     15 d800_0d00    	outc	#CR_CHAR
; 284     16 d800_0a00    	outc	#LF_CHAR
; 287     17 4800_6a63    	st	#stamp_piece_clear_op,	stamp_piece_op
; 288     18 8408_705a    	jsr	stamp_piece_ret,	stamp_piece
; 290     19 4880_01ba    	inc	piece_rotation
; 291     1a 802a_2005    	incjne	test_piece_loop_j,	test_piece_loop_b
; 292     1b 4880_01b9    	inc	piece_kind
; 293     1c 802a_1f03    	incjne	test_piece_loop_i,	test_piece_loop_a
; 296     1d d800_2100    	outc	#33	; !
; 297     1e c810_ff00    	halt
; 299     1f              test_piece_loop_i	skip	1
; 300     20              test_piece_loop_j	skip	1
; 301                     
; 302                     ; Choose the next piece kind.
; 303                     ; TODO: Actual random generator. Currently only cycles through pieces.
; 305     21 4880_01b9    	inc	piece_kind
; 306     22 4980_07b9    	andto	#0x07,	piece_kind
; 307     23 4018_ff00    next_piece_ret	jmp	0
; 308                     
; 309                     ; Prepare piece stage subroutine
; 310                     ; piece_kind = which piece to render. {0,1,2,3,4,5,6}
; 311                     ;
; 312                     ; Piece rotation. 4 different values for each direction. {0,1,2,3}. Only uses bottom two bits, so can increment forever.
; 313                     ;
; 315     24 0800_b929    	st	piece_kind,	prep_piece_target	; We're rendering the current piece_kind
; 322     25 0a00_ba00    	lsrto	piece_rotation,	tmp	; We're rendering the current piece_rotation
; 323     26 0a00_0000    	lsr	tmp
; 324     27 0890_2929    	adcto	prep_piece_target,	prep_piece_target
; 326     28 4880_2a29    	addto	#prep_piece_jmp,	prep_piece_target
; 328     29 4018_ff00    prep_piece_target	jmp	0
; 330     2a 4808_6638    	insn ST_JMP_INSN	#O_PIECE,	prep_piece_value
; 331     2b 4808_6638    	insn ST_JMP_INSN	#O_PIECE_FLIP,	prep_piece_value
; 332     2c 4808_f038    	insn ST_JMP_INSN	#I_PIECE,	prep_piece_value
; 333     2d 4808_f038    	insn ST_JMP_INSN	#I_PIECE_FLIP,	prep_piece_value
; 334     2e 4808_2738    	insn ST_JMP_INSN	#T_PIECE,	prep_piece_value
; 335     2f 4808_7238    	insn ST_JMP_INSN	#T_PIECE_FLIP,	prep_piece_value
; 336     30 4808_3638    	insn ST_JMP_INSN	#S_PIECE,	prep_piece_value
; 337     31 4808_3638    	insn ST_JMP_INSN	#S_PIECE_FLIP,	prep_piece_value
; 338     32 4808_6338    	insn ST_JMP_INSN	#Z_PIECE,	prep_piece_value
; 339     33 4808_6338    	insn ST_JMP_INSN	#Z_PIECE_FLIP,	prep_piece_value
; 340     34 4808_7138    	insn ST_JMP_INSN	#J_PIECE,	prep_piece_value
; 341     35 4808_4738    	insn ST_JMP_INSN	#J_PIECE_FLIP,	prep_piece_value
; 342     36 4808_1738    	insn ST_JMP_INSN	#L_PIECE,	prep_piece_value
; 343     37 4808_7438    	insn ST_JMP_INSN	#L_PIECE_FLIP,	prep_piece_value
; 344     38 4010_ff00    prep_piece_value	nop	; prep_piece_value stores the jump table result.
; 345                     
; 347     39 0202_ba41    	jo	piece_rotation,	prep_piece_hor
; 349     3a 0800_38db    	st	prep_piece_value,	piece_stage+5
; 350     3b 4980_f0db    	andto	#0xF0,	piece_stage+5	; Clear lower 4 bits
; 351     3c 4800_fc00    	st	#-4,	tmp
; 352     3d 0880_3838    prep_piece_vert_loop	lsl	prep_piece_value
; 353     3e 802a_003d    	incjne	tmp,	prep_piece_vert_loop
; 354     3f 0800_38d9    	st	prep_piece_value,	piece_stage+3
; 355     40 4018_ff4b    	jmp	prep_piece_ret
; 357     0000_0041       prep_piece_hor_i	equ	prep_piece_target		; Reuse prep_piece_target as the outer loop variable.
; 358     41 4800_fd29    	st	#-3,	prep_piece_hor_i
; 360     42 4800_dd44    	st	#(piece_stage+7),	prep_piece_hor_ptr
; 362     43 0800_4446    	st	prep_piece_hor_ptr,	prep_piece_hor_wb_ptr
; 363     44 c080_0000    prep_piece_hor_ptr	insn IMADD_INSN	tmp,	0	; LOAD
; 364     45 0a00_3838    	lsr	prep_piece_value
; 365     46 0a10_0000    prep_piece_hor_wb_ptr	rorto	tmp,	0	; STORE
; 366     47 48e0_0244    	rsbto	#2,	prep_piece_hor_ptr
; 367     48 40e0_d644    	insn ALEB_TOC_INSN	#piece_stage,	prep_piece_hor_ptr
; 368     49 006c_0043    	jcs	prep_piece_hor_loop_b		; Loop if #piece_stage <= prep_piece_hor_ptr
; 369     4a 802a_2942    	incjne	prep_piece_hor_i,	prep_piece_hor_loop_a
; 370     4b 4018_ff00    prep_piece_ret	jmp	0
; 371                     
; 372                     ; shift_piece subroutine.
; 373                     ;
; 374                     ; Shifts the piece stage downwards by the set amount stored negated in tmp.
; 375                     ; If the piece is shifted to the bottom of the board, stops and returns non-zero in tmp.
; 376                     ;
; 377                     ; Fixed method: 16 instructions total
; 380     4c 0202_dc59    	jo	piece_stage+6,	shift_piece_ret
; 381     4d 0202_da59    	jo	piece_stage+4,	shift_piece_ret
; 382     4e 0202_d859    	jo	piece_stage+2,	shift_piece_ret
; 383     4f 0202_d659    	jo	piece_stage+0,	shift_piece_ret
; 385     50 0a00_dddd    	lsr	piece_stage+7
; 386     51 0a10_dcdc    	ror	piece_stage+6
; 387     52 0a00_dbdb    	lsr	piece_stage+5
; 388     53 0a10_dada    	ror	piece_stage+4
; 389     54 0a00_d9d9    	lsr	piece_stage+3
; 390     55 0a10_d8d8    	ror	piece_stage+2
; 391     56 0a00_d7d7    	lsr	piece_stage+1
; 392     57 0a10_d6d6    	ror	piece_stage+0
; 394     58 802a_004c    	incjne	tmp,	shift_piece_loop
; 395     59 4018_ff00    shift_piece_ret	jmp	0		; Return from subroutine
; 396                     
; 397                     ; Indirect method: 16 instructions total
; 398                     ;shift_piece
; 399                     ;	st	#(piece_stage+6),	shift_piece_ptr_1
; 400                     ;shift_piece_loop
; 401                     ;	insn INCTO_INSN	shift_piece_ptr_1,	shift_piece_ptr_0
; 402                     
; 403                     ;shift_piece_val_1	insn CLRA_INSN	shift_piece_val_1,	0	; Self clearing variable shift_piece_val_1
; 404                     ;shift_piece_ptr_1	add	shift_piece_val_1,	0	; LOAD
; 405                     ;	jo	shift_piece_val_1,	shift_piece_collide
; 406                     
; 407                     ;shift_piece_val_0	insn CLRA_INSN	shift_piece_val_0,	0	; Self clearing variable shift_piece_val_0
; 408                     ;shift_piece_ptr_0	add	shift_piece_val_0,	0	; LOAD
; 409                     ;	st	shift_piece_ptr_0,	shift_piece_wb_ptr_0
; 410                     ;	st	shift_piece_ptr_1,	shift_piece_wb_ptr_1
; 411                     ;shift_piece_wb_ptr_0	lsrto	shift_piece_val_0,	0	; ROR STORE
; 412                     ;shift_piece_wb_ptr_1	rorto	shift_piece_val_1,	0	; ROR STORE
; 413                     ;	rsbto	#2,	shift_piece_ptr_1
; 414                     ;	incjne	tmp,	shift_piece_loop
; 415                     ;	jmp	shift_piece_ret
; 416                     ;shift_piece_collide	st	#1,	tmp
; 417                     ;shift_piece_ret	jmp	0		; Return from subroutine
; 418                     
; 419                     ; Stamp piece board subroutine.
; 420                     ;
; 421                     ; This subroutine handles several functions:
; 422                     ;
; 423                     ; * ADDing the piece_stage to the gameboard (Stamping the piece down)
; 424                     ; * BICing the piece_stage to the gameboard (Clearing the piece off)
; 425                     ; * Checking for any common bits (AND result > 0) between piece_stage and gameboard (Checking for collision).
; 426                     ;
; 427                     ; stamp_piece_op must be set to #stamp_piece_coll_op, #stamp_piece_merge_op, or #stamp_piece_clear_op before executing.
; 428                     ;
; 429                     ; When executing stamp_piece_coll_op, tmp will be non-zero if a collision occured.
; 430                     ;
; 434     5a 4800_d660    	st	#piece_stage,	stamp_piece_ps_ptr
; 435     5b 4800_bf62    	st	#gameboard,	stamp_piece_gb_ptr
; 436     5c 0880_b762    	addto	piece_x,	stamp_piece_gb_ptr
; 437     5d 0880_b762    	addto	piece_x,	stamp_piece_gb_ptr	; stamp_piece_gb_ptr = #gameboard + 2 * piece_x
; 440     5e 4800_f800    	st	#-PIECE_STAGE_SIZE,	tmp
; 442                     
; 443     5f 8100_5f00    stamp_piece_ps_val	insn CLRA_INSN	stamp_piece_ps_val,	0	; Self clearing variable stamp_piece_ps_val
; 444     60 8080_5f00    stamp_piece_ps_ptr	add	stamp_piece_ps_val,	0	; Piece stage LOAD
; 446     61 8100_6100    stamp_piece_gb_val	insn CLRA_INSN	stamp_piece_gb_val,	0	; Self clearing variable stamp_piece_gb_val
; 447     62 8080_6100    stamp_piece_gb_ptr	add	stamp_piece_gb_val,	0	; Game board LOAD
; 448                     
; 450     63 4018_ff00    stamp_piece_op	jmp	0	; This is set before calling the subroutine
; 453     64 0980_5f61    	andto	stamp_piece_ps_val,	stamp_piece_gb_val
; 454     65 020a_616d    	je	stamp_piece_gb_val,	stamp_piece_loop_end	; Collision occured.
; 455     66 0800_6100    	st	stamp_piece_gb_val,	tmp	; Store colliding bits in tmp
; 456     67 4018_ff70    	jmp	stamp_piece_ret		; Break out of loop and exit
; 460     68 0880_5f61    	addto	stamp_piece_ps_val,	stamp_piece_gb_val
; 461     69 4018_ff6b    	jmp	stamp_piece_writeback
; 463     6a 09c0_5f61    	bicto	stamp_piece_ps_val,	stamp_piece_gb_val
; 465     6b 0800_626c    	st	stamp_piece_gb_ptr,	stamp_piece_gb_wb_ptr
; 466     6c 0800_6100    stamp_piece_gb_wb_ptr	st	stamp_piece_gb_val,	0
; 469     6d 4880_0160    	inc	stamp_piece_ps_ptr	; TODO: Replace with an inca -> a instruction (TODO: Available variable storage)
; 470     6e 4880_0162    	inc	stamp_piece_gb_ptr
; 471     6f 802a_005f    	incjne	tmp,	stamp_piece_loop
; 472     70 4018_ff00    stamp_piece_ret	jmp	0	; Return from subroutine
; 473                     
; 474                     ; Render board subroutine
; 475                     ;
; 476                     ; How:
; 477                     ; Render the gameboard from left to right, top to bottom, to give the most simple console output (avoids ANSI console cursor movement).
; 478                     ;
; 479                     ; LOOP A: Starts at top of the board and then switches to bottom half of the board. The gameboard ptr offset changes from 1 to 0. (or 2 -> 1 -> 0 if using a bigger game board)
; 480                     ; LOOP B: Work down the rows using a single byte bitmask, shifting it right each iteration.
; 481                     ; LOOP C: Work along the columns from 0 to 10, incrementing the gameboard ptr by 2 each iteration.
; 482                     ;         Decide whether to render a block or empty character by ANDing the gameboard ptr value with the current bitmask
; 483                     
; 485     71 4800_0176    	st	#(GAMEBOARD_STRIDE-1),	render_board_ptr	; Start the render_board_ptr with an offset of 1 to render the top half of the board.
; 486                     ; LOOP A
; 488     72 4880_bf76    	addto	#gameboard,	render_board_ptr	; Adjust the render_board_ptr to point into the gameboard. TODO: Move out of loop after implementing ALEB_TOC_INSN below since this won't be changed.
; 489     73 4800_807d    	st	#%1000_0000,	render_board_mask	; Initialize the bitmask for testing the column byte for which row is set
; 490                     ; LOOP B
; 492     74 4800_f67e    	st	#(-GAMEBOARD_COLS),	render_board_col	; Prepare column loop counter
; 493                     ; LOOP C
; 495     75 0800_7d00    	st	render_board_mask,	tmp
; 496     76 8180_0000    render_board_ptr	insn AND_INSN	tmp,	0	; Indirect AND, store result in tmp
; 499     77 006a_0079    	jne	tmp,	render_board_print_a
; 500     78 d808_7e7a    	insn OUTC_JMP_INSN	#EMPTY_CHAR,	render_board_print_b	; Print empty char and jump over the block char print
; 501     79 d800_2300    render_board_print_a	outc	#BLOCK_CHAR		; TODO: Available variable storage
; 503     7a 4880_0276    	addto	#GAMEBOARD_STRIDE,	render_board_ptr	; Move onto next column byte
; 504     7b 802a_7e75    	incjne	render_board_col,	render_board_loop_c	; If we still have columns to render, continue LOOP C
; 505                     ; END LOOP C
; 506     7c 48e0_1476    	rsbto	#GAMEBOARD_SIZE,	render_board_ptr	; Reset render_board_ptr to pre-loop state
; 510     7d d800_0d00    render_board_mask	outc	#CR_CHAR		; render_board_mask: The row bitmask for selecting the row to render
; 511     7e d800_0a00    render_board_col	outc	#LF_CHAR		; render_board_col: The current column iteration loop counter.
; 512                     
; 515     7f 820a_7d74    	insn LSR_JCC_INSN	render_board_mask,	render_board_loop_b
; 516                     ; END LOOP B
; 519     80 48e0_c076    	rsbto	#(gameboard+1),	render_board_ptr	; TODO: Can replace with ALEB_TOC_INSN + jcs
; 521     81 0069_7672    	jge	render_board_ptr,	render_board_loop_a	; Otherwise continue LOOP A.
; 522                     ; END LOOP A
; 523     82 4018_ff00    render_board_ret	jmp	0		; Return from subroutine.
; 524                     
; 525                     ; line_clr
; 526                     ;
; 527                     ; Clears all full rows from the gameboard.
; 528                     ;
; 529                     ; How:
; 530                     ; 1. Call get_full_lines to generate a bitmask of all the complete rows
; 531                     ; 2. Call rem_bits on each column in the gameboard with a copy of the complete rows bitmask.
; 532                     ; 3. Copy the result back over the gameboard.
; 533                     ;
; 534                     ;line_clr_i	skip	1	; We cannot use tmp as loop counter since we call subroutines which overwrite tmp.
; 537     83 8408_a39a    	jsr	get_full_lines_ret,	get_full_lines
; 538                     
; 540     84 006a_9887    	jne	get_full_lines_mask+0,	line_clr_do_remove
; 541     85 006a_9987    	jne	get_full_lines_mask+1,	line_clr_do_remove
; 542     86 4018_ff97    	jmp	line_clr_ret	; Fastpath to returning from the subroutine
; 543                     
; 545                     
; 548     87 8100_a600    line_clr_i	insn CLRA_INSN	rem_bits_value+0,	0	; Used as variable storage for line_clr_i
; 549     88 8100_a700    	insn CLRA_INSN	rem_bits_value+1,	0	; TODO: Available variable storage
; 550                     
; 552     89 4800_f687    	st	#(-GAMEBOARD_COLS),	line_clr_i	; Prep the loop counter
; 553                     
; 555     8a 4800_bf8e    	st	#gameboard,	line_clr_read_ptr_0
; 557                     
; 558                     ; Line clear loop. It will call rem_bits with the line clear mask and each column of the gameboard.
; 562     8b 0800_98a4    	st	get_full_lines_mask+0,	rem_bits_mask+0	; Prep mask +0
; 563     8c 0800_99a5    	st	get_full_lines_mask+1,	rem_bits_mask+1	; Prep mask +1
; 564                     
; 566     8d 0820_8e8f    	insn INCTO_INSN	line_clr_read_ptr_0,	line_clr_read_ptr_1	; Prep ptr +1
; 568     8e 8080_a600    line_clr_read_ptr_0	add	rem_bits_value+0,	0	; Load +0
; 569     8f 8080_a700    line_clr_read_ptr_1	add	rem_bits_value+1,	0	; Load +1
; 570                     
; 572     90 8408_b6a8    	jsr	rem_bits_ret,	rem_bits
; 573                     
; 575     91 0800_8e93    	st	line_clr_read_ptr_0,	line_clr_write_ptr_0	; Prep ptr +0
; 576     92 0800_8f94    	st	line_clr_read_ptr_1,	line_clr_write_ptr_1	; Prep ptr +1
; 578     93 0800_a800    line_clr_write_ptr_0	st	rem_bits_result+0,	0	; Store +0
; 579     94 0800_a900    line_clr_write_ptr_1	st	rem_bits_result+1,	0	; Store +1
; 580                     
; 582     95 4880_028e    	addto	#2,	line_clr_read_ptr_0	; Iterate ptr +0
; 583     96 802a_878b    	incjne	line_clr_i,	line_clr_loop	; Loop
; 584     97 4018_ff00    line_clr_ret	jmp	0		; Return from subroutine
; 585                     
; 586                     ; get_full_lines
; 587                     ;
; 588                     ; Generates a 2 byte, 16 bit bitmask indicating which rows in the gameboard are filled.
; 589                     ; This is the bitwise AND of all columns in the gameboard.
; 590                     ;
; 591     98              get_full_lines_mask	skip	2
; 593     9a 4800_f600    	st	#(-GAMEBOARD_COLS),	tmp
; 594     9b 4800_ff98    	st	#0xFF,	get_full_lines_mask+0
; 595     9c 4800_ff99    	st	#0xFF,	get_full_lines_mask+1
; 596     9d 4800_bf9f    	st	#gameboard,	get_full_lines_ptr_0
; 598     9e 0820_9fa0    	insn INCTO_INSN	get_full_lines_ptr_0,	get_full_lines_ptr_1
; 599     9f 8180_9800    get_full_lines_ptr_0	insn AND_INSN	get_full_lines_mask+0,	0
; 600     a0 8180_9900    get_full_lines_ptr_1	insn AND_INSN	get_full_lines_mask+1,	0
; 601     a1 4880_029f    	addto	#2,	get_full_lines_ptr_0
; 602     a2 802a_009e    	incjne	tmp,	get_full_lines_loop
; 603     a3 4018_ff00    get_full_lines_ret	jmp	0		; Return from subroutine
; 604                     
; 605                     ; rem_bits
; 606                     ;
; 607                     ; Remove the bits from rem_bits_value in the positions they are set in rem_bits_mask.
; 608                     ; For each bit removed, the more significant bits are shifted right to fill its place.
; 609                     ; The leftmost most significant bits are filled with zeroes.
; 610                     ;
; 611                     ; The output is placed in rem_bits_result.
; 612                     ; rem_bits_mask and rem_bits_value are zeroed as a result of this process.
; 613                     ;
; 614     a4              rem_bits_mask	skip	2
; 615     a6              rem_bits_value	skip	2
; 618     a8 8100_a800    rem_bits_result	insn CLRA_INSN	rem_bits_result+0,	0	; Self clearing variables
; 619     a9 8100_a900    	insn CLRA_INSN	rem_bits_result+1,	0
; 621     aa 4800_f000    	st	#-16,	tmp	; Loop 16 times
; 623     ab 0880_a4a4    	lsl	rem_bits_mask+0		; Logical shift left mask (0 -> bit 0)
; 624     ac 0890_a5a5    	rol	rem_bits_mask+1		; (bit 15 -> carry)
; 625     ad 0064_00b1    	jcc	rem_bits_A		; GOTO A if carry clear
; 627     ae 0880_a6a6    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 628     af 0890_a7a7    	rol	rem_bits_value+1		; The carry result is discarded.
; 629     b0 4018_ffb5    	jmp	rem_bits_loop_end
; 631     b1 0880_a6a6    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 632     b2 0890_a7a7    	rol	rem_bits_value+1		; (bit 15 -> carry)
; 633     b3 0890_a8a8    	rol	rem_bits_result+0		; Rotate left to save the carry into result (carry -> bit 0)
; 634     b4 0890_a9a9    	rol	rem_bits_result+1		; Carry from rotating result is discarded.
; 635     b5 802a_00ab    rem_bits_loop_end	incjne	tmp,	rem_bits_loop	; Loop
; 636     b6 4018_ff00    rem_bits_ret	jmp	0		; Return from subroutine
; 637                     
; 638                     ; VARIABLES
; 639                     
; 640                     ; Game state
; 641                     ;
; 642     b7              piece_x	skip	1
; 643                     
; 644                     ; reset_game_state: Resets all game variables and the game board.
; 646                     
; 647     b8 8100_b800    lines_cleared	insn CLRA_INSN	lines_cleared,	0
; 648     b9 8100_b900    piece_kind	insn CLRA_INSN	piece_kind,	0
; 649     ba 8100_ba00    piece_rotation	insn CLRA_INSN	piece_rotation,	0
; 650     bb 8100_bb00    piece_y	insn CLRA_INSN	piece_y,	0
; 651     bc 4800_03b7    	st	#3,	piece_x
; 652                     
; 653                     ; Game board
; 654                     ;
; 655                     ; The gameboard is made up of bytes stacked vertically.
; 656                     ; There are two bytes end to end for each column, 10 colums wide.
; 657                     ; This makes a 16x10 game board, totalling 20 bytes.
; 658                     ; The lower, even index byte is at the bottom of the board. The higher, odd index byte is at the top.
; 659                     ; The less significant bits in each byte are towards the bottom of the board, the higher significant bits are towards the top.
; 660                     ;
; 661                     ; Ideally we would use three bytes per row to make a 24x10 gameboard in 30 bytes,
; 662                     ; but this increases both gameboard storage size and the code required to deal with it.
; 663                     ;
; 664                     ; Gameboard layout (byte.bit):
; 665                     ;
; 666                     ; 1.7 3.7 5.7 7.7 9.7 11.7 13.7 15.7 17.7 19.7
; 667                     ; 1.6 3.6 5.6 7.6 9.6 11.6 13.6 15.6 17.6 19.6
; 668                     ; 1.5 3.5 5.5 7.5 9.5 11.5 13.5 15.5 17.5 19.5
; 669                     ; 1.4 3.4 5.4 7.4 9.4 11.4 13.4 15.4 17.4 19.4
; 670                     ; 1.3 3.3 5.3 7.3 9.3 11.3 13.3 15.3 17.3 19.3
; 671                     ; 1.2 3.2 5.2 7.2 9.2 11.2 13.2 15.2 17.2 19.2
; 672                     ; 1.1 3.1 5.1 7.1 9.1 11.1 13.1 15.1 17.1 19.1
; 673                     ; 1.0 3.0 5.0 7.0 9.0 11.0 13.0 15.0 17.0 19.0
; 674                     ; 0.7 2.7 4.7 6.7 8.7 10.7 12.7 14.7 16.7 18.7
; 675                     ; 0.6 2.6 4.6 6.6 8.6 10.6 12.6 14.6 16.6 18.6
; 676                     ; 0.5 2.5 4.5 6.5 8.5 10.5 12.5 14.5 16.5 18.5
; 677                     ; 0.4 2.4 4.4 6.4 8.4 10.4 12.4 14.4 16.4 18.4
; 678                     ; 0.3 2.3 4.3 6.3 8.3 10.3 12.3 14.3 16.3 18.3
; 679                     ; 0.2 2.2 4.2 6.2 8.2 10.2 12.2 14.2 16.2 18.2
; 680                     ; 0.1 2.1 4.1 6.1 8.1 10.1 12.1 14.1 16.1 18.1
; 681                     ; 0.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 18.0
; 682                     ;
; 683                     ; Neat trick: Since every instruction of the gameboard would normally be a HALT instruction and mostly wasted,
; 684                     ; we can actually use the instruction to clear it's own B value. This gives us gameboard clearing and piece stage clearing "for free".
; 685                     
; 686     bd 0000_00ff    	insn 0x00000000	,	0xFF		; A wall for the gameboard to provide collisions at -1
; 687     be 0000_00ff    	insn 0x00000000	,	0xFF
; 689     bf 8100_bf00    	insn CLRA_INSN	gameboard+0,	0
; 690     c0 8100_c000    	insn CLRA_INSN	gameboard+1,	0
; 691     c1 8100_c100    	insn CLRA_INSN	gameboard+2,	0
; 692     c2 8100_c200    	insn CLRA_INSN	gameboard+3,	0
; 693     c3 8100_c300    	insn CLRA_INSN	gameboard+4,	0
; 694     c4 8100_c400    	insn CLRA_INSN	gameboard+5,	0
; 695     c5 8100_c500    	insn CLRA_INSN	gameboard+6,	0
; 696     c6 8100_c600    	insn CLRA_INSN	gameboard+7,	0
; 697     c7 8100_c700    	insn CLRA_INSN	gameboard+8,	0
; 698     c8 8100_c800    	insn CLRA_INSN	gameboard+9,	0
; 699     c9 8100_c900    	insn CLRA_INSN	gameboard+10,	0
; 700     ca 8100_ca00    	insn CLRA_INSN	gameboard+11,	0
; 701     cb 8100_cb00    	insn CLRA_INSN	gameboard+12,	0
; 702     cc 8100_cc00    	insn CLRA_INSN	gameboard+13,	0
; 703     cd 8100_cd00    	insn CLRA_INSN	gameboard+14,	0
; 704     ce 8100_ce00    	insn CLRA_INSN	gameboard+15,	0
; 705     cf 8100_cf00    	insn CLRA_INSN	gameboard+16,	0
; 706     d0 8100_d000    	insn CLRA_INSN	gameboard+17,	0
; 707     d1 8100_d100    	insn CLRA_INSN	gameboard+18,	0
; 708     d2 8100_d200    	insn CLRA_INSN	gameboard+19,	0
; 709     d3 0000_00ff    	insn 0x00000000	,	0xFF	; no-op/clc, but specified as custom instruction se we can set B value.
; 710     d4 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at 11
; 711     d5 4018_ff00    reset_game_state_ret	jmp	0
; 713                     
; 714                     ; Piece stage
; 715                     ;
; 716                     ; Piece stage layout (byte.bit):
; 717                     ;
; 718                     ; 1.7 3.7 5.7 7.7
; 719                     ; 1.6 3.6 5.6 7.6
; 720                     ; 1.5 3.5 5.5 7.5
; 721                     ; 1.4 3.4 5.4 7.4
; 722                     ; 1.3 3.3 5.3 7.3
; 723                     ; 1.2 3.2 5.2 7.2
; 724                     ; 1.1 3.1 5.1 7.1
; 725                     ; 1.0 3.0 5.0 7.0
; 726                     ; 0.7 2.7 4.7 6.7
; 727                     ; 0.6 2.6 4.6 6.6
; 728                     ; 0.5 2.5 4.5 6.5
; 729                     ; 0.4 2.4 4.4 6.4
; 730                     ; 0.3 2.3 4.3 6.3
; 731                     ; 0.2 2.2 4.2 6.2
; 732                     ; 0.1 2.1 4.1 6.1
; 733                     ; 0.0 2.0 4.0 6.0
; 734                     ;
; 737     d6 8100_d600    	insn CLRA_INSN	piece_stage+0,	0
; 738     d7 8100_d700    	insn CLRA_INSN	piece_stage+1,	0
; 739     d8 8100_d800    	insn CLRA_INSN	piece_stage+2,	0
; 740     d9 8100_d900    	insn CLRA_INSN	piece_stage+3,	0
; 741     da 8100_da00    	insn CLRA_INSN	piece_stage+4,	0
; 742     db 8100_db00    	insn CLRA_INSN	piece_stage+5,	0
; 743     dc 8100_dc00    	insn CLRA_INSN	piece_stage+6,	0
; 744     dd 8100_dd00    	insn CLRA_INSN	piece_stage+7,	0
; 745     de 4018_ff00    clear_piece_stage_ret	jmp	0
; 746                     
; 747                     ; Placeholder label to easily see how big the program is from the symbol table

; 0 errors detected in pass 2

; Symbol table:
; ALEB_TOC_INSN = 0xe00000
; ALTB_TOC_INSN = 0xc00000
; AND_INSN = 0x81800000
; A_CHAR = 0x41
; BAR_CHAR = 0x7c
; BLOCK_CHAR = 0x23
; B_CHAR = 0x42
; CLRA_INSN = 0x81000000
; CR_CHAR = 0xd
; C_CHAR = 0x43
; D_CHAR = 0x44
; EMPTY_CHAR = 0x7e
; END_OF_PROGRAM = 0xdf
; E_CHAR = 0x45
; F_CHAR = 0x46
; GAMEBOARD_COLS = 0xa
; GAMEBOARD_SIZE = 0x14
; GAMEBOARD_STRIDE = 0x2
; G_CHAR = 0x47
; H_CHAR = 0x48
; IMADD_INSN = 0xc0800000
; INCTO_INSN = 0x8200000
; I_CHAR = 0x49
; I_PIECE = 0xf0
; I_PIECE_FLIP = 0xf0
; J_CHAR = 0x4a
; J_PIECE = 0x71
; J_PIECE_FLIP = 0x47
; K_CHAR = 0x4b
; LF_CHAR = 0xa
; LSR_JCC_INSN = 0x820a0000
; L_CHAR = 0x4c
; L_PIECE = 0x17
; L_PIECE_FLIP = 0x74
; M_CHAR = 0x4d
; N_CHAR = 0x4e
; OUTC_JMP_INSN = 0x98080000
; O_CHAR = 0x4f
; O_PIECE = 0x66
; O_PIECE_FLIP = 0x66
; PIECE_STAGE_SIZE = 0x8
; P_CHAR = 0x50
; Q_CHAR = 0x51
; R_CHAR = 0x52
; SPACE_CHAR = 0x20
; ST_JMP_INSN = 0x8080000
; S_CHAR = 0x53
; S_PIECE = 0x36
; S_PIECE_FLIP = 0x36
; T_CHAR = 0x54
; T_PIECE = 0x27
; T_PIECE_FLIP = 0x72
; U_CHAR = 0x55
; V_CHAR = 0x56
; W_CHAR = 0x57
; X_CHAR = 0x58
; Y_CHAR = 0x59
; ZERO_CHAR = 0x30
; Z_CHAR = 0x5a
; Z_PIECE = 0x63
; Z_PIECE_FLIP = 0x63
; clear_piece_stage = 0xd6
; clear_piece_stage_ret = 0xde
; collision = 0xf
; gameboard = 0xbf
; get_full_lines = 0x9a
; get_full_lines_loop = 0x9e
; get_full_lines_mask = 0x98
; get_full_lines_ptr_0 = 0x9f
; get_full_lines_ptr_1 = 0xa0
; get_full_lines_ret = 0xa3
; line_clr = 0x83
; line_clr_do_remove = 0x87
; line_clr_i = 0x87
; line_clr_loop = 0x8b
; line_clr_read_ptr_0 = 0x8e
; line_clr_read_ptr_1 = 0x8f
; line_clr_ret = 0x97
; line_clr_write_ptr_0 = 0x93
; line_clr_write_ptr_1 = 0x94
; lines_cleared = 0xb8
; next_piece = 0x21
; next_piece_ret = 0x23
; no_collision = 0x10
; piece_kind = 0xb9
; piece_rotation = 0xba
; piece_stage = 0xd6
; piece_x = 0xb7
; piece_y = 0xbb
; prep_piece = 0x24
; prep_piece_hor = 0x41
; prep_piece_hor_i = 0x29
; prep_piece_hor_loop_a = 0x42
; prep_piece_hor_loop_b = 0x43
; prep_piece_hor_ptr = 0x44
; prep_piece_hor_wb_ptr = 0x46
; prep_piece_jmp = 0x2a
; prep_piece_ret = 0x4b
; prep_piece_target = 0x29
; prep_piece_value = 0x38
; prep_piece_vert = 0x3a
; prep_piece_vert_loop = 0x3d
; rem_bits = 0xa8
; rem_bits_A = 0xb1
; rem_bits_loop = 0xab
; rem_bits_loop_end = 0xb5
; rem_bits_mask = 0xa4
; rem_bits_result = 0xa8
; rem_bits_ret = 0xb6
; rem_bits_value = 0xa6
; render_board = 0x71
; render_board_col = 0x7e
; render_board_loop_a = 0x72
; render_board_loop_b = 0x74
; render_board_loop_c = 0x75
; render_board_mask = 0x7d
; render_board_print_a = 0x79
; render_board_print_b = 0x7a
; render_board_ptr = 0x76
; render_board_ret = 0x82
; reset_game_state = 0xb8
; reset_game_state_ret = 0xd5
; run = 0x1
; shift_piece = 0x4c
; shift_piece_loop = 0x4c
; shift_piece_ret = 0x59
; stamp_piece = 0x5a
; stamp_piece_clear_op = 0x6a
; stamp_piece_coll_op = 0x64
; stamp_piece_gb_ptr = 0x62
; stamp_piece_gb_val = 0x61
; stamp_piece_gb_wb_ptr = 0x6c
; stamp_piece_loop = 0x5f
; stamp_piece_loop_end = 0x6d
; stamp_piece_merge_op = 0x68
; stamp_piece_op = 0x63
; stamp_piece_ps_ptr = 0x60
; stamp_piece_ps_val = 0x5f
; stamp_piece_ret = 0x70
; stamp_piece_writeback = 0x6b
; test_piece_loop_a = 0x3
; test_piece_loop_b = 0x5
; test_piece_loop_i = 0x1f
; test_piece_loop_j = 0x20
; tmp = 0x0

; Memory image:
00: c810ff00 8408d5b8 4800f91f 480000ba 4800fc20 8408ded6 84084b24 48e001bb
08: 0800bb00 8408594c 006a000f 48006463 8408705a 006a000f d8084e10 d8004300
10: d8000d00 d8000a00 48006863 8408705a 84088271 d8000d00 d8000a00 48006a63
18: 8408705a 488001ba 802a2005 488001b9 802a1f03 d8002100 c810ff00
21: 488001b9 498007b9 4018ff00 0800b929 0a00ba00 0a000000 08902929
28: 48802a29 4018ff00 48086638 48086638 4808f038 4808f038 48082738 48087238
30: 48083638 48083638 48086338 48086338 48087138 48084738 48081738 48087438
38: 4010ff00 0202ba41 080038db 4980f0db 4800fc00 08803838 802a003d 080038d9
40: 4018ff4b 4800fd29 4800dd44 08004446 c0800000 0a003838 0a100000 48e00244
48: 40e0d644 006c0043 802a2942 4018ff00 0202dc59 0202da59 0202d859 0202d659
50: 0a00dddd 0a10dcdc 0a00dbdb 0a10dada 0a00d9d9 0a10d8d8 0a00d7d7 0a10d6d6
58: 802a004c 4018ff00 4800d660 4800bf62 0880b762 0880b762 4800f800 81005f00
60: 80805f00 81006100 80806100 4018ff00 09805f61 020a616d 08006100 4018ff70
68: 08805f61 4018ff6b 09c05f61 0800626c 08006100 48800160 48800162 802a005f
70: 4018ff00 48000176 4880bf76 4800807d 4800f67e 08007d00 81800000 006a0079
78: d8087e7a d8002300 48800276 802a7e75 48e01476 d8000d00 d8000a00 820a7d74
80: 48e0c076 00697672 4018ff00 8408a39a 006a9887 006a9987 4018ff97 8100a600
88: 8100a700 4800f687 4800bf8e 080098a4 080099a5 08208e8f 8080a600 8080a700
90: 8408b6a8 08008e93 08008f94 0800a800 0800a900 4880028e 802a878b 4018ff00
9a: 4800f600 4800ff98 4800ff99 4800bf9f 08209fa0 81809800
a0: 81809900 4880029f 802a009e 4018ff00
a8: 8100a800 8100a900 4800f000 0880a4a4 0890a5a5 006400b1 0880a6a6 0890a7a7
b0: 4018ffb5 0880a6a6 0890a7a7 0890a8a8 0890a9a9 802a00ab 4018ff00
b8: 8100b800 8100b900 8100ba00 8100bb00 480003b7 000000ff 000000ff 8100bf00
c0: 8100c000 8100c100 8100c200 8100c300 8100c400 8100c500 8100c600 8100c700
c8: 8100c800 8100c900 8100ca00 8100cb00 8100cc00 8100cd00 8100ce00 8100cf00
d0: 8100d000 8100d100 8100d200 000000ff 000000ff 4018ff00 8100d600 8100d700
d8: 8100d800 8100d900 8100da00 8100db00 8100dc00 8100dd00 4018ff00
