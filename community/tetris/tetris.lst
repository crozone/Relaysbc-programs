; Pass 1...

; 0 errors detected in pass 1

; Pass 2...
; 1                       ; Tetris implementation
; 2                       ; Ryan Crosby 2022
; 3                       ;
; 4                       ; Run from 0x01.
; 5                       ;
; 6                       ; Controls:
; 7                       ;
; 8                       ; Relay computer numpad is used to control game.
; 9                       ;
; 10                      ; 4: Move piece left
; 11                      ; 6: Move piece right
; 12                      ; 2: Move piece down
; 13                      ; 7: Rotate piece left
; 14                      ; 9: Rotate piece right
; 15                      ;
; 16                      ; Game is rendered to console output.
; 17                      ;
; 18                      ; TODO:
; 19                      ;
; 20                      ; * Collision of piece stage with gameboard isn't being detected correctly.
; 21                      ; * Game over (Current code infinite loops on game over)
; 22                      ; * Scorekeeping
; 23                      ;
; 24                      
; 25                      ; =========
; 26                      ; Constants
; 27                      ; =========
; 28                      
; 29                      ; Gameboard parameters
; 30                      ; These constants are used for convenience. Changing the value won't change the actual sizes of the gameboards, code will need to be modified as well.
; 31      0000_0000       GAMEBOARD_STRIDE	equ	2	; How many bytes high is the gameboard. 2 bytes = 16 rows.
; 32      0000_0000       GAMEBOARD_COLS	equ	10	; How many columns wide is the gameboard. This is generic enough that it can be adjusted without altering any code.
; 33      0000_0000       GAMEBOARD_SIZE	equ	(GAMEBOARD_STRIDE*GAMEBOARD_COLS)	; Gameboard total size = stride * columns
; 34                      
; 35      0000_0000       PIECE_STAGE_SIZE	equ	(GAMEBOARD_STRIDE*4)	; The piece stage is the same height as the gameboard, but only 4 wide.
; 36                      
; 37      0000_0000       SPACE_CHAR	equ	0x20	; Space
; 38      0000_0000       BLOCK_CHAR	equ	0x23	; #
; 39      0000_0000       EMPTY_CHAR	equ	0x7E 	; ~
; 40      0000_0000       BAR_CHAR	equ	0x7C	; |
; 41                      
; 42      0000_0000       CR_CHAR	equ	0x0D	; Carriage Return CR \r
; 43      0000_0000       LF_CHAR	equ	0x0A	; Linefeed LF \n
; 44                      
; 45                      ; Number constants
; 46      0000_0000       ZERO_CHAR	equ	0x30	; 0
; 47                      
; 48                      ; Alphabet constants
; 49      0000_0000       A_CHAR	equ	0x41	; A
; 50      0000_0000       B_CHAR	equ	A_CHAR+1
; 51      0000_0000       C_CHAR	equ	A_CHAR+2
; 52      0000_0000       D_CHAR	equ	A_CHAR+3
; 53      0000_0000       E_CHAR	equ	A_CHAR+4
; 54      0000_0000       F_CHAR	equ	A_CHAR+5
; 55      0000_0000       G_CHAR	equ	A_CHAR+6
; 56      0000_0000       H_CHAR	equ	A_CHAR+7
; 57      0000_0000       I_CHAR	equ	A_CHAR+8
; 58      0000_0000       J_CHAR	equ	A_CHAR+9
; 59      0000_0000       K_CHAR	equ	A_CHAR+10
; 60      0000_0000       L_CHAR	equ	A_CHAR+11
; 61      0000_0000       M_CHAR	equ	A_CHAR+12
; 62      0000_0000       N_CHAR	equ	A_CHAR+13
; 63      0000_0000       O_CHAR	equ	A_CHAR+14
; 64      0000_0000       P_CHAR	equ	A_CHAR+15
; 65      0000_0000       Q_CHAR	equ	A_CHAR+16
; 66      0000_0000       R_CHAR	equ	A_CHAR+17
; 67      0000_0000       S_CHAR	equ	A_CHAR+18
; 68      0000_0000       T_CHAR	equ	A_CHAR+19
; 69      0000_0000       U_CHAR	equ	A_CHAR+20
; 70      0000_0000       V_CHAR	equ	A_CHAR+21
; 71      0000_0000       W_CHAR	equ	A_CHAR+22
; 72      0000_0000       X_CHAR	equ	A_CHAR+23
; 73      0000_0000       Y_CHAR	equ	A_CHAR+24
; 74      0000_0000       Z_CHAR	equ	A_CHAR+25
; 75                      
; 76                      ; Additional custom instructions
; 77                      ; To use these, call them like: insn INCTO_INSN aa, bb
; 78      0000_0000       IMADD_INSN	equ	0xC0800000	; aa + [bb] --> [aa]. Immediate version of ADD. If aa is 0, allows single instruction LOAD of [bb] to [0].
; 79      0000_0000       AND_INSN	equ	0x81800000	; The WRA version of andto. ANDs [aa] and [bb], and stores in [aa].
; 80      0000_0000       CLRA_INSN	equ	0x81000000	; Stores 0 --> [aa]. Implemented as [aa] & 0 --> [aa].
; 81      0000_0000       INCTO_INSN	equ	0x08200000	; Stores [aa] + 1 --> [bb] in one instruction.
; 82      0000_0000       ALTB_TOC_INSN	equ	0x00C00000	; Stores [aa] < [bb] --> Carry.
; 83      0000_0000       ALEB_TOC_INSN	equ	0x00E00000	; Stores [aa] <= [bb] --> Carry.
; 84      0000_0000       ST_JMP_INSN	equ	0x08080000	; Stores [aa] --> [bb] and jumps to bb.
; 85      0000_0000       OUTC_JMP_INSN	equ	0x98080000	; Writes [aa] to the console and jumps to bb. WRA and WRB are set to make OUT write to console.
; 86      0000_0000       LSR_JCC_INSN	equ	0x820A0000	; Rotates [aa] right, writes the result back to [aa], and jumps if the shifted out bit (carry output) was clear.
; 87      0000_0000       INCJMP_INSN	equ	0x80240000	; Stores [aa] + 1 --> [aa] and unconditionally jumps to bb
; 88                      
; 89                      ; Pieces templates
; 90                      ;
; 91                      ; Piece patterns are stored as a single byte.
; 92                      ; The 4 lsb bits represent the left of the piece, the 4 msb bits representing the right of the piece.
; 93                      ; The alignment and bit direction matches the piece stage.
; 94                      ;
; 95                      ; A "flipped" version of each piece is also stored, which is similar to the piece being left-to-right bitswapped.
; 96                      ; However using a dedicated version of the flipped piece removes the need for a bitswap subroutine,
; 97                      ; which actually saves instructions overall, and also allows the pieces to be tweaked so that they rotate correctly.
; 98                      ;
; 99                      ; The Gameboy left-handed rotation system was used as a reference, but the code doesn't attempt to exactly adhere to any particular system,
; 100                     ; it just attempts to look somewhat acceptable and use minimal instructions.
; 101                     
; 102                     
; 103                     ; I piece
; 104                     ;
; 105                     ;3   7
; 106                     ; 0 1
; 107                     ; 0 1
; 108                     ; 0 1
; 109                     ; 0 1
; 110                     ;0   4
; 111     0000_0000       I_PIECE	equ	0xF0
; 112     0000_0000       I_PIECE_FLIP	equ	I_PIECE	; I piece is the same flipped
; 113                     
; 114                     ; O (square) piece
; 115                     ;
; 116                     ;3   7
; 117                     ; 0 0
; 118                     ; 1 1
; 119                     ; 1 1
; 120                     ; 0 0
; 121                     ;0   4
; 122     0000_0000       O_PIECE	equ	0x66
; 123     0000_0000       O_PIECE_FLIP	equ	O_PIECE	; Square is same in any rotation
; 124                     
; 125                     ; T piece
; 126                     ;
; 127                     ;3   7
; 128                     ; 0 0
; 129                     ; 1 0
; 130                     ; 1 1
; 131                     ; 1 0
; 132                     ;0   4
; 133     0000_0000       T_PIECE	equ	0x27
; 134                     
; 135                     ; T piece flipped
; 136                     ;
; 137                     ;3   7
; 138                     ; 0 0
; 139                     ; 0 1
; 140                     ; 1 1
; 141                     ; 0 1
; 142                     ;0   4
; 143     0000_0000       T_PIECE_FLIP	equ	0x72
; 144                     
; 145                     ; S piece
; 146                     ;
; 147                     ;3   7
; 148                     ; 0 0
; 149                     ; 1 0
; 150                     ; 1 1
; 151                     ; 0 1
; 152                     ;0   4
; 153     0000_0000       S_PIECE	equ	0x36
; 154     0000_0000       S_PIECE_FLIP	equ	S_PIECE	; S piece is the same rotated
; 155                     
; 156                     ; S piece
; 157                     ;
; 158                     ;3   7
; 159                     ; 0 0
; 160                     ; 0 1
; 161                     ; 1 1
; 162                     ; 1 0
; 163                     ;0   4
; 164     0000_0000       Z_PIECE	equ	0x63
; 165     0000_0000       Z_PIECE_FLIP	equ	Z_PIECE	; Z piece is the same rotated
; 166                     
; 167                     ; J piece
; 168                     ;
; 169                     ;3   7
; 170                     ; 0 0
; 171                     ; 0 1
; 172                     ; 0 1
; 173                     ; 1 1
; 174                     ;0   4
; 175     0000_0000       J_PIECE	equ	0x71
; 176                     
; 177                     ; J piece flipped
; 178                     ;
; 179                     ;3   7
; 180                     ; 0 0
; 181                     ; 1 1
; 182                     ; 1 0
; 183                     ; 1 0
; 184                     ;0   4
; 185     0000_0000       J_PIECE_FLIP	equ	0x47
; 186                     
; 187                     ; L piece
; 188                     ;
; 189                     ;3   7
; 190                     ; 0 0
; 191                     ; 1 0
; 192                     ; 1 0
; 193                     ; 1 1
; 194                     ;0   4
; 195     0000_0000       L_PIECE	equ	0x17
; 196                     
; 197                     ; L piece flipped
; 198                     ;
; 199                     ;3   7
; 200                     ; 0 0
; 201                     ; 1 1
; 202                     ; 0 1
; 203                     ; 0 1
; 204                     ;0   4
; 205     0000_0000       L_PIECE_FLIP	equ	0x74
; 206                     
; 207                     ; ================
; 208                     ; Application code
; 209                     ; ================
; 210                     
; 211                     ; Temporary variable tmp at address 0x00.
; 212                     ;
; 213                     ; Used as a halt catch for any jumps to null (0x00). This usually indicates a subroutine hasn't had its return address set.
; 214                     ; Also used as a temporary storage register, and sometimes as the return value for subroutines that only need to return a status.
; 215                     
; 216     00              	org	0x00
; 218     00 c810_ff00    tmp	halt
; 219                     
; 220                     ; ENTRY POINT
; 221     01              	org	0x01
; 224     01 8408_f5d6    	jsr	reset_game_state_ret,	reset_game_state
; 228     02 4880_01d6    	inc	piece_kind
; 229     03 4980_07d6    	andto	#0x07,	piece_kind
; 231     04 8100_0400    stamp_flag	insn CLRA_INSN	stamp_flag,	0
; 233     05 4800_03dc    	st	#3,	prev_piece_x
; 234     06 4800_00db    	st	#0,	prev_piece_y
; 235     07 4800_00da    	st	#0,	prev_piece_rotation
; 236     08 8408_413e    main_undo_then_render	jsr	undo_piece_state_ret,	undo_piece_state
; 239     09 8408_fef6    	jsr	clear_piece_stage_ret,	clear_piece_stage
; 242     0a 8408_6942    	jsr	prep_piece_ret,	prep_piece
; 245     0b 0800_d800    	st	piece_y,	tmp
; 246     0c 8408_786a    	jsr	shift_piece_ret,	shift_piece
; 254     0d 4800_8382    	st	#stamp_piece_coll_op,	stamp_piece_op
; 255     0e 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 256     0f 006a_0008    	jne	tmp,	main_undo_then_render	; We have a collision. Undo changes and re-render.
; 260     10 4800_8782    	st	#stamp_piece_merge_op,	stamp_piece_op
; 261     11 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 264     12 8408_a390    	jsr	render_board_ret,	render_board
; 267     13 0062_0416    	jeq	stamp_flag,	main_full_render_clr
; 269     14 8408_b8a4    	jsr	line_clr_ret,	line_clr
; 270     15 4018_ff02    	jmp	main_next_piece
; 273     16 4800_8982    	st	#stamp_piece_clear_op,	stamp_piece_op
; 274     17 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 277     18 8408_3d3a    	jsr	save_piece_state_ret,	save_piece_state
; 278                     
; 284     19 4800_0200    	st	#2,	tmp		; TEST
; 287     1a 4980_0f00    	andto	#0x0F,	tmp
; 300     1b 48e0_0200    	rsbto	#02,	tmp
; 301     1c 0062_0027    	jeq	tmp,	main_move_drop
; 305     1d 48e0_0200    	rsbto	#02,	tmp
; 306     1e 0062_0032    	jeq	tmp,	main_move_left
; 310     1f 48e0_0200    	rsbto	#02,	tmp
; 311     20 0062_0034    	jeq	tmp,	main_move_right
; 315     21 48e0_0100    	rsbto	#01,	tmp
; 316     22 0062_0036    	jeq	tmp,	main_rot_left
; 320     23 48e0_0200    	rsbto	#02,	tmp
; 321     24 0062_0038    	jeq	tmp,	main_rot_right
; 322                     
; 324     25 d800_3f00    	outc	#0x3F	; Print '?'	TODO: Available variable storage
; 325     26 4018_ff19    	jmp	main_read_input
; 328     27 4800_ff00    	st	#-1,	tmp
; 329     28 0880_00d8    	addto	tmp,	piece_y
; 330     29 8408_786a    	jsr	shift_piece_ret,	shift_piece
; 333     2a 0062_002d    	jeq	tmp,	main_move_drop_2
; 334     2b 4800_0104    	st	#1,	stamp_flag
; 335     2c 4018_ff10    	jmp	main_full_render
; 338     2d 4800_8382    	st	#stamp_piece_coll_op,	stamp_piece_op
; 339     2e 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 340     2f 0062_0010    	jeq	tmp,	main_full_render
; 341     30 4800_0104    	st	#1,	stamp_flag
; 342     31 4018_ff08    	jmp	main_undo_then_render
; 344     32 48e0_01d9    	dec	piece_x
; 345     33 4018_ff10    	jmp	main_full_render
; 347     34 4880_01d9    	inc	piece_x
; 348     35 4018_ff10    	jmp	main_full_render
; 350     36 48e0_01d7    	dec	piece_rotation
; 351     37 4018_ff09    	jmp	main_render_fresh_piece
; 353     38 4880_01d7    	inc	piece_rotation
; 354     39 4018_ff09    	jmp	main_render_fresh_piece
; 356                     
; 358     3a 0800_d7da    	st	piece_rotation,	prev_piece_rotation
; 359     3b 0800_d9dc    	st	piece_x,	prev_piece_x
; 360     3c 0800_d8db    	st	piece_y,	prev_piece_y
; 361     3d 4018_ff00    save_piece_state_ret	jmp	0
; 362                     
; 364     3e 0800_dad7    	st	prev_piece_rotation,	piece_rotation
; 365     3f 0800_dcd9    	st	prev_piece_x,	piece_x
; 366     40 0800_dbd8    	st	prev_piece_y,	piece_y
; 367     41 4018_ff00    undo_piece_state_ret	jmp	0
; 368                     
; 369                     ; Prepare piece stage subroutine
; 370                     ; piece_kind = which piece to render. {0,1,2,3,4,5,6}
; 371                     ;
; 372                     ; Piece rotation. 4 different values for each direction. {0,1,2,3}. Only uses bottom two bits, so can increment forever.
; 373                     ;
; 375     42 0800_d647    	st	piece_kind,	prep_piece_target	; We're rendering the current piece_kind
; 382     43 0a00_d700    	lsrto	piece_rotation,	tmp	; We're rendering the current piece_rotation
; 383     44 0a00_0000    	lsr	tmp
; 384     45 0890_4747    	adcto	prep_piece_target,	prep_piece_target
; 386     46 4880_4847    	addto	#prep_piece_jmp,	prep_piece_target
; 388     47 4018_ff00    prep_piece_target	jmp	0
; 390     48 4808_6656    	insn ST_JMP_INSN	#O_PIECE,	prep_piece_value
; 391     49 4808_6656    	insn ST_JMP_INSN	#O_PIECE_FLIP,	prep_piece_value
; 392     4a 4808_f056    	insn ST_JMP_INSN	#I_PIECE,	prep_piece_value
; 393     4b 4808_f056    	insn ST_JMP_INSN	#I_PIECE_FLIP,	prep_piece_value
; 394     4c 4808_2756    	insn ST_JMP_INSN	#T_PIECE,	prep_piece_value
; 395     4d 4808_7256    	insn ST_JMP_INSN	#T_PIECE_FLIP,	prep_piece_value
; 396     4e 4808_3656    	insn ST_JMP_INSN	#S_PIECE,	prep_piece_value
; 397     4f 4808_3656    	insn ST_JMP_INSN	#S_PIECE_FLIP,	prep_piece_value
; 398     50 4808_6356    	insn ST_JMP_INSN	#Z_PIECE,	prep_piece_value
; 399     51 4808_6356    	insn ST_JMP_INSN	#Z_PIECE_FLIP,	prep_piece_value
; 400     52 4808_7156    	insn ST_JMP_INSN	#J_PIECE,	prep_piece_value
; 401     53 4808_4756    	insn ST_JMP_INSN	#J_PIECE_FLIP,	prep_piece_value
; 402     54 4808_1756    	insn ST_JMP_INSN	#L_PIECE,	prep_piece_value
; 403     55 4808_7456    	insn ST_JMP_INSN	#L_PIECE_FLIP,	prep_piece_value
; 404     56 4010_ff00    prep_piece_value	nop	; prep_piece_value stores the jump table result.
; 405                     
; 407     57 0202_d75f    	jo	piece_rotation,	prep_piece_hor
; 409     58 0800_56fb    	st	prep_piece_value,	piece_stage+5
; 410     59 4980_f0fb    	andto	#0xF0,	piece_stage+5	; Clear lower 4 bits
; 411     5a 4800_fc00    	st	#-4,	tmp
; 412     5b 0880_5656    prep_piece_vert_loop	lsl	prep_piece_value
; 413     5c 802a_005b    	incjne	tmp,	prep_piece_vert_loop
; 414     5d 0800_56f9    	st	prep_piece_value,	piece_stage+3
; 415     5e 4018_ff69    	jmp	prep_piece_ret
; 417     0000_005f       prep_piece_hor_i	equ	prep_piece_target		; Reuse prep_piece_target as the outer loop variable.
; 418     5f 4800_fd47    	st	#-3,	prep_piece_hor_i
; 420     60 4800_fd62    	st	#(piece_stage+7),	prep_piece_hor_ptr
; 422     61 0800_6264    	st	prep_piece_hor_ptr,	prep_piece_hor_wb_ptr
; 423     62 c080_0000    prep_piece_hor_ptr	insn IMADD_INSN	tmp,	0	; LOAD
; 424     63 0a00_5656    	lsr	prep_piece_value
; 425     64 0a10_0000    prep_piece_hor_wb_ptr	rorto	tmp,	0	; STORE
; 426     65 48e0_0262    	rsbto	#2,	prep_piece_hor_ptr
; 427     66 40e0_f662    	insn ALEB_TOC_INSN	#piece_stage,	prep_piece_hor_ptr
; 428     67 006c_0061    	jcs	prep_piece_hor_loop_b		; Loop if #piece_stage <= prep_piece_hor_ptr
; 429     68 802a_4760    	incjne	prep_piece_hor_i,	prep_piece_hor_loop_a
; 430     69 4018_ff00    prep_piece_ret	jmp	0
; 431                     
; 432                     ; shift_piece subroutine.
; 433                     ;
; 434                     ; Shifts the piece stage downwards by the set amount stored negated in tmp.
; 435                     ; If the piece is shifted to the bottom of the board, stops and returns non-zero in tmp.
; 437     6a 0062_0078    	jeq	tmp,	shift_piece_ret
; 439     6b 0202_fc78    	jo	piece_stage+6,	shift_piece_ret
; 440     6c 0202_fa78    	jo	piece_stage+4,	shift_piece_ret
; 441     6d 0202_f878    	jo	piece_stage+2,	shift_piece_ret
; 442     6e 0202_f678    	jo	piece_stage+0,	shift_piece_ret
; 444     6f 0a00_fdfd    	lsr	piece_stage+7
; 445     70 0a10_fcfc    	ror	piece_stage+6
; 446     71 0a00_fbfb    	lsr	piece_stage+5
; 447     72 0a10_fafa    	ror	piece_stage+4
; 448     73 0a00_f9f9    	lsr	piece_stage+3
; 449     74 0a10_f8f8    	ror	piece_stage+2
; 450     75 0a00_f7f7    	lsr	piece_stage+1
; 451     76 0a10_f6f6    	ror	piece_stage+0
; 452     77 802a_006b    	incjne	tmp,	shift_piece_loop
; 453     78 4018_ff00    shift_piece_ret	jmp	0	; Return from subroutine
; 454                     
; 455                     ; stamp_piece: Stamp piece board subroutine.
; 456                     ;
; 457                     ; This subroutine handles several functions:
; 458                     ;
; 459                     ; * ADDing the piece_stage to the gameboard (Stamping the piece down)
; 460                     ; * BICing the piece_stage to the gameboard (Clearing the piece off)
; 461                     ; * Checking for any common bits (AND result > 0) between piece_stage and gameboard (Checking for collision).
; 462                     ;
; 463                     ; stamp_piece_op must be set to #stamp_piece_coll_op, #stamp_piece_merge_op, or #stamp_piece_clear_op before executing.
; 464                     ;
; 465                     ; When executing stamp_piece_coll_op, tmp will be non-zero if a collision occured.
; 466                     ;
; 469     79 4800_f67f    	st	#piece_stage,	stamp_piece_ps_ptr
; 470     7a 4800_df81    	st	#gameboard,	stamp_piece_gb_ptr
; 471     7b 0880_d981    	addto	piece_x,	stamp_piece_gb_ptr
; 472     7c 0880_d981    	addto	piece_x,	stamp_piece_gb_ptr	; stamp_piece_gb_ptr = #gameboard + 2 * piece_x
; 475     7d 4800_f800    	st	#-PIECE_STAGE_SIZE,	tmp
; 477                     
; 478     7e 8100_7e00    stamp_piece_ps_val	insn CLRA_INSN	stamp_piece_ps_val,	0	; Self clearing variable stamp_piece_ps_val
; 479     7f 8080_7e00    stamp_piece_ps_ptr	add	stamp_piece_ps_val,	0	; Piece stage LOAD
; 481     80 8100_8000    stamp_piece_gb_val	insn CLRA_INSN	stamp_piece_gb_val,	0	; Self clearing variable stamp_piece_gb_val
; 482     81 8080_8000    stamp_piece_gb_ptr	add	stamp_piece_gb_val,	0	; Game board LOAD
; 483                     
; 485     82 4018_ff00    stamp_piece_op	jmp	0	; This is set before calling the subroutine
; 488     83 0980_7e80    	andto	stamp_piece_ps_val,	stamp_piece_gb_val
; 489     84 0062_808c    	jeq	stamp_piece_gb_val,	stamp_piece_loop_end	; If collision didn't occur, keep looping.
; 491     85 0800_8000    	st	stamp_piece_gb_val,	tmp	; Store colliding bits in tmp
; 492     86 4018_ff8f    	jmp	stamp_piece_ret		; Break out of loop and exit
; 496     87 0880_7e80    	addto	stamp_piece_ps_val,	stamp_piece_gb_val
; 497     88 4018_ff8a    	jmp	stamp_piece_writeback
; 499     89 09c0_7e80    	bicto	stamp_piece_ps_val,	stamp_piece_gb_val
; 501     8a 0800_818b    	st	stamp_piece_gb_ptr,	stamp_piece_gb_wb_ptr
; 502     8b 0800_8000    stamp_piece_gb_wb_ptr	st	stamp_piece_gb_val,	0
; 505     8c 4880_017f    	inc	stamp_piece_ps_ptr	; TODO: Replace with an inca -> a instruction (TODO: Available variable storage)
; 506     8d 4880_0181    	inc	stamp_piece_gb_ptr
; 507     8e 802a_007e    	incjne	tmp,	stamp_piece_loop
; 508     8f 4018_ff00    stamp_piece_ret	jmp	0	; Return from subroutine
; 509                     
; 510                     ; render_board: Render board subroutine
; 511                     ;
; 512                     ; How:
; 513                     ; Render the gameboard from left to right, top to bottom, to give the most simple console output (avoids ANSI console cursor movement).
; 514                     ;
; 515                     ; LOOP A: Starts at top of the board and then switches to bottom half of the board. The gameboard ptr offset changes from 1 to 0. (or 2 -> 1 -> 0 if using a bigger game board)
; 516                     ; LOOP B: Work down the rows using a single byte bitmask, shifting it right each iteration.
; 517                     ; LOOP C: Work along the columns from 0 to 10, incrementing the gameboard ptr by 2 each iteration.
; 518                     ;         Decide whether to render a block or empty character by ANDing the gameboard ptr value with the current bitmask
; 519                     ;
; 521     90 4800_0195    	st	#(GAMEBOARD_STRIDE-1),	render_board_ptr	; Start the render_board_ptr with an offset of 1 to render the top half of the board.
; 522                     ; LOOP A
; 524     91 4880_df95    	addto	#gameboard,	render_board_ptr	; Adjust the render_board_ptr to point into the gameboard. TODO: Move out of loop after implementing ALEB_TOC_INSN below since this won't be changed.
; 525     92 4800_809c    	st	#%1000_0000,	render_board_mask	; Initialize the bitmask for testing the column byte for which row is set
; 526                     ; LOOP B
; 528     93 4800_f69d    	st	#(-GAMEBOARD_COLS),	render_board_col	; Prepare column loop counter
; 529                     ; LOOP C
; 531     94 0800_9c00    	st	render_board_mask,	tmp
; 532     95 8180_0000    render_board_ptr	insn AND_INSN	tmp,	0	; Indirect AND, store result in tmp
; 535     96 006a_0098    	jne	tmp,	render_board_print_a
; 536     97 d808_7e99    	insn OUTC_JMP_INSN	#EMPTY_CHAR,	render_board_print_b	; Print empty char and jump over the block char print
; 538     98 d800_2300    	outc	#BLOCK_CHAR		; TODO: Available variable storage
; 540     99 4880_0295    	addto	#GAMEBOARD_STRIDE,	render_board_ptr	; Move onto next column byte
; 541     9a 802a_9d94    	incjne	render_board_col,	render_board_loop_c	; If we still have columns to render, continue LOOP C
; 542                     ; END LOOP C
; 543     9b 48e0_1495    	rsbto	#GAMEBOARD_SIZE,	render_board_ptr	; Reset render_board_ptr to pre-loop state
; 547     9c d800_0d00    render_board_mask	outc	#CR_CHAR		; render_board_mask: The row bitmask for selecting the row to render
; 548     9d d800_0a00    render_board_col	outc	#LF_CHAR		; render_board_col: The current column iteration loop counter.
; 549                     
; 552     9e 820a_9c93    	insn LSR_JCC_INSN	render_board_mask,	render_board_loop_b
; 553                     ; END LOOP B
; 556     9f 48e0_e095    	rsbto	#(gameboard+1),	render_board_ptr	; TODO: Can replace with ALEB_TOC_INSN + jcs
; 558     a0 0069_9591    	jge	render_board_ptr,	render_board_loop_a	; Otherwise continue LOOP A.
; 560     a1 d800_0d00    get_full_lines_mask	outc	#CR_CHAR		; get_full_lines_mask: variable for get_full_lines
; 561     a2 d800_0a00    	outc	#LF_CHAR
; 562                     ; END LOOP A
; 563     a3 4018_ff00    render_board_ret	jmp	0		; Return from subroutine.
; 564                     
; 565                     ; line_clr: Clears all full rows from the gameboard.
; 566                     ;
; 567                     ; How:
; 568                     ; 1. Call get_full_lines to generate a bitmask of all the complete rows
; 569                     ; 2. Call rem_bits on each column in the gameboard with a copy of the complete rows bitmask.
; 570                     ; 3. Copy the result back over the gameboard.
; 571                     ;
; 574     a4 8408_c2b9    	jsr	get_full_lines_ret,	get_full_lines
; 575                     
; 577     a5 006a_a1a8    	jne	get_full_lines_mask+0,	line_clr_do_remove
; 578     a6 006a_a2a8    	jne	get_full_lines_mask+1,	line_clr_do_remove
; 579     a7 4018_ffb8    	jmp	line_clr_ret	; Fastpath to returning from the subroutine
; 580                     
; 582                     
; 585     a8 8100_c500    line_clr_i	insn CLRA_INSN	rem_bits_value+0,	0	; Used as variable storage for line_clr_i
; 586     a9 8100_c600    	insn CLRA_INSN	rem_bits_value+1,	0	; TODO: Available variable storage
; 587                     
; 589     aa 4800_f6a8    	st	#(-GAMEBOARD_COLS),	line_clr_i	; Prep the loop counter
; 590                     
; 592     ab 4800_dfaf    	st	#gameboard,	line_clr_read_ptr_0
; 594                     
; 595                     ; Line clear loop. It will call rem_bits with the line clear mask and each column of the gameboard.
; 599     ac 0800_a1c3    	st	get_full_lines_mask+0,	rem_bits_mask+0	; Prep mask +0
; 600     ad 0800_a2c4    	st	get_full_lines_mask+1,	rem_bits_mask+1	; Prep mask +1
; 601                     
; 603     ae 0820_afb0    	insn INCTO_INSN	line_clr_read_ptr_0,	line_clr_read_ptr_1	; Prep ptr +1
; 605     af 8080_c500    line_clr_read_ptr_0	add	rem_bits_value+0,	0	; Load +0
; 606     b0 8080_c600    line_clr_read_ptr_1	add	rem_bits_value+1,	0	; Load +1
; 607                     
; 609     b1 8408_d5c7    	jsr	rem_bits_ret,	rem_bits
; 610                     
; 612     b2 0800_afb4    	st	line_clr_read_ptr_0,	line_clr_write_ptr_0	; Prep ptr +0
; 613     b3 0800_b0b5    	st	line_clr_read_ptr_1,	line_clr_write_ptr_1	; Prep ptr +1
; 615     b4 0800_c700    line_clr_write_ptr_0	st	rem_bits_result+0,	0	; Store +0
; 616     b5 0800_c800    line_clr_write_ptr_1	st	rem_bits_result+1,	0	; Store +1
; 617                     
; 619     b6 4880_02af    	addto	#2,	line_clr_read_ptr_0	; Iterate ptr +0
; 620     b7 802a_a8ac    	incjne	line_clr_i,	line_clr_loop	; Loop
; 621     b8 4018_ff00    line_clr_ret	jmp	0		; Return from subroutine
; 622                     
; 623                     ; get_full_lines
; 624                     ;
; 625                     ; Generates a 2 byte, 16 bit bitmask indicating which rows in the gameboard are filled.
; 626                     ; This is the bitwise AND of all columns in the gameboard.
; 627                     ;
; 628                     ;get_full_lines_mask	skip	2	; This is stored elsewhere, hidden in some other instructions.
; 630     b9 4800_f600    	st	#(-GAMEBOARD_COLS),	tmp
; 631     ba 4800_ffa1    	st	#0xFF,	get_full_lines_mask+0
; 632     bb 4800_ffa2    	st	#0xFF,	get_full_lines_mask+1
; 633     bc 4800_dfbe    	st	#gameboard,	get_full_lines_ptr_0
; 635     bd 0820_bebf    	insn INCTO_INSN	get_full_lines_ptr_0,	get_full_lines_ptr_1
; 636     be 8180_a100    get_full_lines_ptr_0	insn AND_INSN	get_full_lines_mask+0,	0
; 637     bf 8180_a200    get_full_lines_ptr_1	insn AND_INSN	get_full_lines_mask+1,	0
; 638     c0 4880_02be    	addto	#2,	get_full_lines_ptr_0
; 639     c1 802a_00bd    	incjne	tmp,	get_full_lines_loop
; 640     c2 4018_ff00    get_full_lines_ret	jmp	0		; Return from subroutine
; 641                     
; 642                     ; rem_bits
; 643                     ;
; 644                     ; Remove the bits from rem_bits_value in the positions they are set in rem_bits_mask.
; 645                     ; For each bit removed, the more significant bits are shifted right to fill its place.
; 646                     ; The leftmost most significant bits are filled with zeroes.
; 647                     ;
; 648                     ; The output is placed in rem_bits_result.
; 649                     ; rem_bits_mask and rem_bits_value are zeroed as a result of this process.
; 650                     ;
; 651     c3              rem_bits_mask	skip	2
; 652     c5              rem_bits_value	skip	2
; 655     c7 8100_c700    rem_bits_result	insn CLRA_INSN	rem_bits_result+0,	0	; Self clearing variables
; 656     c8 8100_c800    	insn CLRA_INSN	rem_bits_result+1,	0
; 658     c9 4800_f000    	st	#-16,	tmp	; Loop 16 times
; 660     ca 0880_c3c3    	lsl	rem_bits_mask+0		; Logical shift left mask (0 -> bit 0)
; 661     cb 0890_c4c4    	rol	rem_bits_mask+1		; (bit 15 -> carry)
; 662     cc 0064_00d0    	jcc	rem_bits_A		; GOTO A if carry clear
; 664     cd 0880_c5c5    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 665     ce 0890_c6c6    	rol	rem_bits_value+1		; The carry result is discarded.
; 666     cf 4018_ffd4    	jmp	rem_bits_loop_end
; 668     d0 0880_c5c5    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 669     d1 0890_c6c6    	rol	rem_bits_value+1		; (bit 15 -> carry)
; 670     d2 0890_c7c7    	rol	rem_bits_result+0		; Rotate left to save the carry into result (carry -> bit 0)
; 671     d3 0890_c8c8    	rol	rem_bits_result+1		; Carry from rotating result is discarded.
; 672     d4 802a_00ca    rem_bits_loop_end	incjne	tmp,	rem_bits_loop	; Loop
; 673     d5 4018_ff00    rem_bits_ret	jmp	0		; Return from subroutine
; 674                     
; 675                     ; VARIABLES
; 676                     
; 677                     ; Game state
; 678                     ;
; 679                     
; 680                     ; reset_game_state: Resets all game variables and the game board.
; 682                     
; 683                     ;lines_cleared	insn CLRA_INSN	lines_cleared,	0
; 684     d6 8100_d600    piece_kind	insn CLRA_INSN	piece_kind,	0
; 685     d7 8100_d700    piece_rotation	insn CLRA_INSN	piece_rotation,	0
; 686     d8 8100_d800    piece_y	insn CLRA_INSN	piece_y,	0
; 687     d9 8100_d900    piece_x	insn CLRA_INSN	piece_x,	0
; 688     da 8100_da00    prev_piece_rotation	insn CLRA_INSN	prev_piece_rotation,	0
; 689     db 8100_db00    prev_piece_y	insn CLRA_INSN	prev_piece_y,	0
; 690     dc 8100_dc00    prev_piece_x	insn CLRA_INSN	prev_piece_x,	0
; 691                     
; 692                     ; Game board
; 693                     ;
; 694                     ; The gameboard is made up of bytes stacked vertically.
; 695                     ; There are two bytes end to end for each column, 10 colums wide.
; 696                     ; This makes a 16x10 game board, totalling 20 bytes.
; 697                     ; The lower, even index byte is at the bottom of the board. The higher, odd index byte is at the top.
; 698                     ; The less significant bits in each byte are towards the bottom of the board, the higher significant bits are towards the top.
; 699                     ;
; 700                     ; Ideally we would use three bytes per row to make a 24x10 gameboard in 30 bytes,
; 701                     ; but this increases both gameboard storage size and the code required to deal with it.
; 702                     ;
; 703                     ; Gameboard layout (byte.bit):
; 704                     ;
; 705                     ; 1.7 3.7 5.7 7.7 9.7 11.7 13.7 15.7 17.7 19.7
; 706                     ; 1.6 3.6 5.6 7.6 9.6 11.6 13.6 15.6 17.6 19.6
; 707                     ; 1.5 3.5 5.5 7.5 9.5 11.5 13.5 15.5 17.5 19.5
; 708                     ; 1.4 3.4 5.4 7.4 9.4 11.4 13.4 15.4 17.4 19.4
; 709                     ; 1.3 3.3 5.3 7.3 9.3 11.3 13.3 15.3 17.3 19.3
; 710                     ; 1.2 3.2 5.2 7.2 9.2 11.2 13.2 15.2 17.2 19.2
; 711                     ; 1.1 3.1 5.1 7.1 9.1 11.1 13.1 15.1 17.1 19.1
; 712                     ; 1.0 3.0 5.0 7.0 9.0 11.0 13.0 15.0 17.0 19.0
; 713                     ; 0.7 2.7 4.7 6.7 8.7 10.7 12.7 14.7 16.7 18.7
; 714                     ; 0.6 2.6 4.6 6.6 8.6 10.6 12.6 14.6 16.6 18.6
; 715                     ; 0.5 2.5 4.5 6.5 8.5 10.5 12.5 14.5 16.5 18.5
; 716                     ; 0.4 2.4 4.4 6.4 8.4 10.4 12.4 14.4 16.4 18.4
; 717                     ; 0.3 2.3 4.3 6.3 8.3 10.3 12.3 14.3 16.3 18.3
; 718                     ; 0.2 2.2 4.2 6.2 8.2 10.2 12.2 14.2 16.2 18.2
; 719                     ; 0.1 2.1 4.1 6.1 8.1 10.1 12.1 14.1 16.1 18.1
; 720                     ; 0.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 18.0
; 721                     ;
; 722                     ; Neat trick: Since every instruction of the gameboard would normally be a HALT instruction and mostly wasted,
; 723                     ; we can actually use the instruction to clear it's own B value. This gives us gameboard clearing and piece stage clearing "for free".
; 724                     
; 725     dd 0000_00ff    	insn 0x00000000	,	0xFF		; A wall for the gameboard to provide collisions at -1
; 726     de 0000_00ff    	insn 0x00000000	,	0xFF
; 727                     
; 729     df 8100_df00    	insn CLRA_INSN	gameboard+0,	0
; 730     e0 8100_e000    	insn CLRA_INSN	gameboard+1,	0
; 731     e1 8100_e100    	insn CLRA_INSN	gameboard+2,	0
; 732     e2 8100_e200    	insn CLRA_INSN	gameboard+3,	0
; 733     e3 8100_e300    	insn CLRA_INSN	gameboard+4,	0
; 734     e4 8100_e400    	insn CLRA_INSN	gameboard+5,	0
; 735     e5 8100_e500    	insn CLRA_INSN	gameboard+6,	0
; 736     e6 8100_e600    	insn CLRA_INSN	gameboard+7,	0
; 737     e7 8100_e700    	insn CLRA_INSN	gameboard+8,	0
; 738     e8 8100_e800    	insn CLRA_INSN	gameboard+9,	0
; 739     e9 8100_e900    	insn CLRA_INSN	gameboard+10,	0
; 740     ea 8100_ea00    	insn CLRA_INSN	gameboard+11,	0
; 741     eb 8100_eb00    	insn CLRA_INSN	gameboard+12,	0
; 742     ec 8100_ec00    	insn CLRA_INSN	gameboard+13,	0
; 743     ed 8100_ed00    	insn CLRA_INSN	gameboard+14,	0
; 744     ee 8100_ee00    	insn CLRA_INSN	gameboard+15,	0
; 745     ef 8100_ef00    	insn CLRA_INSN	gameboard+16,	0
; 746     f0 8100_f000    	insn CLRA_INSN	gameboard+17,	0
; 747     f1 8100_f100    	insn CLRA_INSN	gameboard+18,	0
; 748     f2 8100_f200    	insn CLRA_INSN	gameboard+19,	0
; 749     f3 0000_00ff    	insn 0x00000000	,	0xFF	; no-op/clc, but specified as custom instruction se we can set B value.
; 750     f4 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at 11
; 751     f5 4018_ff00    reset_game_state_ret	jmp	0
; 752                     
; 753                     ; Piece stage
; 754                     ;
; 755                     ; Piece stage layout (byte.bit):
; 756                     ;
; 757                     ; 1.7 3.7 5.7 7.7
; 758                     ; 1.6 3.6 5.6 7.6
; 759                     ; 1.5 3.5 5.5 7.5
; 760                     ; 1.4 3.4 5.4 7.4
; 761                     ; 1.3 3.3 5.3 7.3
; 762                     ; 1.2 3.2 5.2 7.2
; 763                     ; 1.1 3.1 5.1 7.1
; 764                     ; 1.0 3.0 5.0 7.0
; 765                     ; 0.7 2.7 4.7 6.7
; 766                     ; 0.6 2.6 4.6 6.6
; 767                     ; 0.5 2.5 4.5 6.5
; 768                     ; 0.4 2.4 4.4 6.4
; 769                     ; 0.3 2.3 4.3 6.3
; 770                     ; 0.2 2.2 4.2 6.2
; 771                     ; 0.1 2.1 4.1 6.1
; 772                     ; 0.0 2.0 4.0 6.0
; 773                     ;
; 776     f6 8100_f600    	insn CLRA_INSN	piece_stage+0,	0
; 777     f7 8100_f700    	insn CLRA_INSN	piece_stage+1,	0
; 778     f8 8100_f800    	insn CLRA_INSN	piece_stage+2,	0
; 779     f9 8100_f900    	insn CLRA_INSN	piece_stage+3,	0
; 780     fa 8100_fa00    	insn CLRA_INSN	piece_stage+4,	0
; 781     fb 8100_fb00    	insn CLRA_INSN	piece_stage+5,	0
; 782     fc 8100_fc00    	insn CLRA_INSN	piece_stage+6,	0
; 783     fd 8100_fd00    	insn CLRA_INSN	piece_stage+7,	0
; 784     fe 4018_ff00    clear_piece_stage_ret	jmp	0
; 785                     
; 786                     ; Placeholder label to easily see how big the program is from the symbol table

; 0 errors detected in pass 2

; Symbol table:
; ALEB_TOC_INSN = 0xe00000
; ALTB_TOC_INSN = 0xc00000
; AND_INSN = 0x81800000
; A_CHAR = 0x41
; BAR_CHAR = 0x7c
; BLOCK_CHAR = 0x23
; B_CHAR = 0x42
; CLRA_INSN = 0x81000000
; CR_CHAR = 0xd
; C_CHAR = 0x43
; D_CHAR = 0x44
; EMPTY_CHAR = 0x7e
; END_OF_PROGRAM = 0xff
; E_CHAR = 0x45
; F_CHAR = 0x46
; GAMEBOARD_COLS = 0xa
; GAMEBOARD_SIZE = 0x14
; GAMEBOARD_STRIDE = 0x2
; G_CHAR = 0x47
; H_CHAR = 0x48
; IMADD_INSN = 0xc0800000
; INCJMP_INSN = 0x80240000
; INCTO_INSN = 0x8200000
; I_CHAR = 0x49
; I_PIECE = 0xf0
; I_PIECE_FLIP = 0xf0
; J_CHAR = 0x4a
; J_PIECE = 0x71
; J_PIECE_FLIP = 0x47
; K_CHAR = 0x4b
; LF_CHAR = 0xa
; LSR_JCC_INSN = 0x820a0000
; L_CHAR = 0x4c
; L_PIECE = 0x17
; L_PIECE_FLIP = 0x74
; M_CHAR = 0x4d
; N_CHAR = 0x4e
; OUTC_JMP_INSN = 0x98080000
; O_CHAR = 0x4f
; O_PIECE = 0x66
; O_PIECE_FLIP = 0x66
; PIECE_STAGE_SIZE = 0x8
; P_CHAR = 0x50
; Q_CHAR = 0x51
; R_CHAR = 0x52
; SPACE_CHAR = 0x20
; ST_JMP_INSN = 0x8080000
; S_CHAR = 0x53
; S_PIECE = 0x36
; S_PIECE_FLIP = 0x36
; T_CHAR = 0x54
; T_PIECE = 0x27
; T_PIECE_FLIP = 0x72
; U_CHAR = 0x55
; V_CHAR = 0x56
; W_CHAR = 0x57
; X_CHAR = 0x58
; Y_CHAR = 0x59
; ZERO_CHAR = 0x30
; Z_CHAR = 0x5a
; Z_PIECE = 0x63
; Z_PIECE_FLIP = 0x63
; clear_piece_stage = 0xf6
; clear_piece_stage_ret = 0xfe
; gameboard = 0xdf
; get_full_lines = 0xb9
; get_full_lines_loop = 0xbd
; get_full_lines_mask = 0xa1
; get_full_lines_ptr_0 = 0xbe
; get_full_lines_ptr_1 = 0xbf
; get_full_lines_ret = 0xc2
; line_clr = 0xa4
; line_clr_do_remove = 0xa8
; line_clr_i = 0xa8
; line_clr_loop = 0xac
; line_clr_read_ptr_0 = 0xaf
; line_clr_read_ptr_1 = 0xb0
; line_clr_ret = 0xb8
; line_clr_write_ptr_0 = 0xb4
; line_clr_write_ptr_1 = 0xb5
; main = 0x1
; main_end = 0x3a
; main_full_render = 0x10
; main_full_render_clr = 0x16
; main_move_drop = 0x27
; main_move_drop_2 = 0x2d
; main_move_left = 0x32
; main_move_right = 0x34
; main_next_piece = 0x2
; main_no_collision = 0x10
; main_read_input = 0x19
; main_render_fresh_piece = 0x9
; main_rot_left = 0x36
; main_rot_right = 0x38
; main_undo_then_render = 0x8
; piece_kind = 0xd6
; piece_rotation = 0xd7
; piece_stage = 0xf6
; piece_x = 0xd9
; piece_y = 0xd8
; prep_piece = 0x42
; prep_piece_hor = 0x5f
; prep_piece_hor_i = 0x47
; prep_piece_hor_loop_a = 0x60
; prep_piece_hor_loop_b = 0x61
; prep_piece_hor_ptr = 0x62
; prep_piece_hor_wb_ptr = 0x64
; prep_piece_jmp = 0x48
; prep_piece_ret = 0x69
; prep_piece_target = 0x47
; prep_piece_value = 0x56
; prep_piece_vert = 0x58
; prep_piece_vert_loop = 0x5b
; prev_piece_rotation = 0xda
; prev_piece_x = 0xdc
; prev_piece_y = 0xdb
; rem_bits = 0xc7
; rem_bits_A = 0xd0
; rem_bits_loop = 0xca
; rem_bits_loop_end = 0xd4
; rem_bits_mask = 0xc3
; rem_bits_result = 0xc7
; rem_bits_ret = 0xd5
; rem_bits_value = 0xc5
; render_board = 0x90
; render_board_col = 0x9d
; render_board_loop_a = 0x91
; render_board_loop_b = 0x93
; render_board_loop_c = 0x94
; render_board_mask = 0x9c
; render_board_print_a = 0x98
; render_board_print_b = 0x99
; render_board_ptr = 0x95
; render_board_ret = 0xa3
; reset_game_state = 0xd6
; reset_game_state_ret = 0xf5
; save_piece_state = 0x3a
; save_piece_state_ret = 0x3d
; shift_piece = 0x6a
; shift_piece_loop = 0x6b
; shift_piece_ret = 0x78
; stamp_flag = 0x4
; stamp_piece = 0x79
; stamp_piece_clear_op = 0x89
; stamp_piece_coll_op = 0x83
; stamp_piece_gb_ptr = 0x81
; stamp_piece_gb_val = 0x80
; stamp_piece_gb_wb_ptr = 0x8b
; stamp_piece_loop = 0x7e
; stamp_piece_loop_end = 0x8c
; stamp_piece_merge_op = 0x87
; stamp_piece_op = 0x82
; stamp_piece_ps_ptr = 0x7f
; stamp_piece_ps_val = 0x7e
; stamp_piece_ret = 0x8f
; stamp_piece_writeback = 0x8a
; stop = 0x0
; tmp = 0x0
; undo_piece_state = 0x3e
; undo_piece_state_ret = 0x41

; Memory image:
00: c810ff00 8408f5d6 488001d6 498007d6 81000400 480003dc 480000db 480000da
08: 8408413e 8408fef6 84086942 0800d800 8408786a 48008382 84088f79 006a0008
10: 48008782 84088f79 8408a390 00620416 8408b8a4 4018ff02 48008982 84088f79
18: 84083d3a 48000200 49800f00 48e00200 00620027 48e00200 00620032 48e00200
20: 00620034 48e00100 00620036 48e00200 00620038 d8003f00 4018ff19 4800ff00
28: 088000d8 8408786a 0062002d 48000104 4018ff10 48008382 84088f79 00620010
30: 48000104 4018ff08 48e001d9 4018ff10 488001d9 4018ff10 48e001d7 4018ff09
38: 488001d7 4018ff09 0800d7da 0800d9dc 0800d8db 4018ff00 0800dad7 0800dcd9
40: 0800dbd8 4018ff00 0800d647 0a00d700 0a000000 08904747 48804847 4018ff00
48: 48086656 48086656 4808f056 4808f056 48082756 48087256 48083656 48083656
50: 48086356 48086356 48087156 48084756 48081756 48087456 4010ff00 0202d75f
58: 080056fb 4980f0fb 4800fc00 08805656 802a005b 080056f9 4018ff69 4800fd47
60: 4800fd62 08006264 c0800000 0a005656 0a100000 48e00262 40e0f662 006c0061
68: 802a4760 4018ff00 00620078 0202fc78 0202fa78 0202f878 0202f678 0a00fdfd
70: 0a10fcfc 0a00fbfb 0a10fafa 0a00f9f9 0a10f8f8 0a00f7f7 0a10f6f6 802a006b
78: 4018ff00 4800f67f 4800df81 0880d981 0880d981 4800f800 81007e00 80807e00
80: 81008000 80808000 4018ff00 09807e80 0062808c 08008000 4018ff8f 08807e80
88: 4018ff8a 09c07e80 0800818b 08008000 4880017f 48800181 802a007e 4018ff00
90: 48000195 4880df95 4800809c 4800f69d 08009c00 81800000 006a0098 d8087e99
98: d8002300 48800295 802a9d94 48e01495 d8000d00 d8000a00 820a9c93 48e0e095
a0: 00699591 d8000d00 d8000a00 4018ff00 8408c2b9 006aa1a8 006aa2a8 4018ffb8
a8: 8100c500 8100c600 4800f6a8 4800dfaf 0800a1c3 0800a2c4 0820afb0 8080c500
b0: 8080c600 8408d5c7 0800afb4 0800b0b5 0800c700 0800c800 488002af 802aa8ac
b8: 4018ff00 4800f600 4800ffa1 4800ffa2 4800dfbe 0820bebf 8180a100 8180a200
c0: 488002be 802a00bd 4018ff00
c7: 8100c700
c8: 8100c800 4800f000 0880c3c3 0890c4c4 006400d0 0880c5c5 0890c6c6 4018ffd4
d0: 0880c5c5 0890c6c6 0890c7c7 0890c8c8 802a00ca 4018ff00 8100d600 8100d700
d8: 8100d800 8100d900 8100da00 8100db00 8100dc00 000000ff 000000ff 8100df00
e0: 8100e000 8100e100 8100e200 8100e300 8100e400 8100e500 8100e600 8100e700
e8: 8100e800 8100e900 8100ea00 8100eb00 8100ec00 8100ed00 8100ee00 8100ef00
f0: 8100f000 8100f100 8100f200 000000ff 000000ff 4018ff00 8100f600 8100f700
f8: 8100f800 8100f900 8100fa00 8100fb00 8100fc00 8100fd00 4018ff00
