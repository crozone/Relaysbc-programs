; Pass 1...

; 0 errors detected in pass 1

; Pass 2...
; 1                       ; Tetris implementation
; 2                       ; Ryan Crosby 2022
; 3                       ;
; 4                       ; Run from 0x01.
; 5                       ;
; 6                       ; Controls:
; 7                       ;
; 8                       ; Relay computer numpad is used to control the game.
; 9                       ;
; 10                      ; 2: Move piece down
; 11                      ; 4: Move piece left
; 12                      ; 6: Move piece right
; 13                      ; 7: Rotate piece left
; 14                      ; 9: Rotate piece right
; 15                      ;
; 16                      ; Game is rendered to console output.
; 17                      ;
; 18                      ; TODO:
; 19                      ;
; 20                      ; * Game over (Current code infinite loops on game over)
; 21                      ; * Scorekeeping
; 22                      ; * Further optimise code to free up some instruction space to implement above TODOs.
; 23                      ;
; 24                      
; 25                      ; =========
; 26                      ; Constants
; 27                      ; =========
; 28                      
; 29                      ; Gameboard parameters
; 30                      ; These constants are used for convenience. Changing the value won't change the actual sizes of the gameboards, code will need to be modified as well.
; 31      0000_0000       GAMEBOARD_STRIDE	equ	2	; How many bytes high is the gameboard. 2 bytes = 16 rows.
; 32      0000_0000       GAMEBOARD_COLS	equ	10	; How many columns wide is the gameboard. This is generic enough that it can be adjusted without altering any code.
; 33      0000_0000       GAMEBOARD_SIZE	equ	(GAMEBOARD_STRIDE*GAMEBOARD_COLS)	; Gameboard total size = stride * columns
; 34                      
; 35      0000_0000       PIECE_STAGE_SIZE	equ	(GAMEBOARD_STRIDE*4)	; The piece stage is the same height as the gameboard, but only 4 wide.
; 36                      
; 37      0000_0000       SPACE_CHAR	equ	0x20	; Space
; 38      0000_0000       BLOCK_CHAR	equ	0x23	; #
; 39      0000_0000       EMPTY_CHAR	equ	0x7E 	; ~
; 40      0000_0000       BAR_CHAR	equ	0x7C	; |
; 41                      
; 42      0000_0000       CR_CHAR	equ	0x0D	; Carriage Return CR \r
; 43      0000_0000       LF_CHAR	equ	0x0A	; Linefeed LF \n
; 44                      
; 45                      ; Number constants
; 46      0000_0000       ZERO_CHAR	equ	0x30	; 0
; 47                      
; 48                      ; Alphabet constants
; 49      0000_0000       A_CHAR	equ	0x41	; A
; 50      0000_0000       B_CHAR	equ	A_CHAR+1
; 51      0000_0000       C_CHAR	equ	A_CHAR+2
; 52      0000_0000       D_CHAR	equ	A_CHAR+3
; 53      0000_0000       E_CHAR	equ	A_CHAR+4
; 54      0000_0000       F_CHAR	equ	A_CHAR+5
; 55      0000_0000       G_CHAR	equ	A_CHAR+6
; 56      0000_0000       H_CHAR	equ	A_CHAR+7
; 57      0000_0000       I_CHAR	equ	A_CHAR+8
; 58      0000_0000       J_CHAR	equ	A_CHAR+9
; 59      0000_0000       K_CHAR	equ	A_CHAR+10
; 60      0000_0000       L_CHAR	equ	A_CHAR+11
; 61      0000_0000       M_CHAR	equ	A_CHAR+12
; 62      0000_0000       N_CHAR	equ	A_CHAR+13
; 63      0000_0000       O_CHAR	equ	A_CHAR+14
; 64      0000_0000       P_CHAR	equ	A_CHAR+15
; 65      0000_0000       Q_CHAR	equ	A_CHAR+16
; 66      0000_0000       R_CHAR	equ	A_CHAR+17
; 67      0000_0000       S_CHAR	equ	A_CHAR+18
; 68      0000_0000       T_CHAR	equ	A_CHAR+19
; 69      0000_0000       U_CHAR	equ	A_CHAR+20
; 70      0000_0000       V_CHAR	equ	A_CHAR+21
; 71      0000_0000       W_CHAR	equ	A_CHAR+22
; 72      0000_0000       X_CHAR	equ	A_CHAR+23
; 73      0000_0000       Y_CHAR	equ	A_CHAR+24
; 74      0000_0000       Z_CHAR	equ	A_CHAR+25
; 75                      
; 76                      ; Additional custom instructions
; 77                      ; To use these, call them like: insn INCTO_INSN aa, bb
; 78      0000_0000       IMADD_INSN	equ	0xC0800000	; aa + [bb] --> [aa]. Immediate version of ADD. If aa is 0, allows single instruction LOAD of [bb] to [0].
; 79      0000_0000       AND_INSN	equ	0x81800000	; The WRA version of andto. ANDs [aa] and [bb], and stores in [aa].
; 80      0000_0000       CLRA_INSN	equ	0x81000000	; Stores 0 --> [aa]. Implemented as [aa] & 0 --> [aa].
; 81      0000_0000       INCA_INSN	equ	0x80200000	; Stores [aa] + 1 --> [aa] in one instruction.
; 82      0000_0000       INCTO_INSN	equ	0x08200000	; Stores [aa] + 1 --> [bb] in one instruction.
; 83      0000_0000       ALTB_TOC_INSN	equ	0x00C00000	; Stores [aa] < [bb] --> Carry.
; 84      0000_0000       ALEB_TOC_INSN	equ	0x00E00000	; Stores [aa] <= [bb] --> Carry.
; 85      0000_0000       ST_JMP_INSN	equ	0x08080000	; Stores [aa] --> [bb] and jumps to bb.
; 86      0000_0000       OUTC_JMP_INSN	equ	0x98080000	; Writes [aa] to the console and jumps to bb. WRA and WRB are set to make OUT write to console.
; 87      0000_0000       LSR_JCC_INSN	equ	0x820A0000	; Rotates [aa] right, writes the result back to [aa], and jumps if the shifted out bit (carry output) was clear.
; 88      0000_0000       INCJMP_INSN	equ	0x80240000	; Stores [aa] + 1 --> [aa] and unconditionally jumps to bb
; 89                      
; 90                      ; Pieces templates
; 91                      ;
; 92                      ; Piece patterns are stored as a single byte.
; 93                      ; The 4 lsb bits represent the left of the piece, the 4 msb bits representing the right of the piece.
; 94                      ; The alignment and bit direction matches the piece stage.
; 95                      ;
; 96                      ; A "flipped" version of each piece is also stored, which is similar to the piece being left-to-right bitswapped.
; 97                      ; However using a dedicated version of the flipped piece removes the need for a bitswap subroutine,
; 98                      ; which actually saves instructions overall, and also allows the pieces to be tweaked so that they rotate correctly.
; 99                      ;
; 100                     ; The Gameboy left-handed rotation system was used as a reference, but the code doesn't attempt to exactly adhere to any particular system,
; 101                     ; it just attempts to look somewhat acceptable and use minimal instructions.
; 102                     
; 103                     
; 104                     ; I piece
; 105                     ;
; 106                     ;3   7
; 107                     ; 0 1
; 108                     ; 0 1
; 109                     ; 0 1
; 110                     ; 0 1
; 111                     ;0   4
; 112     0000_0000       I_PIECE	equ	0xF0
; 113     0000_0000       I_PIECE_FLIP	equ	I_PIECE	; I piece is the same flipped
; 114                     
; 115                     ; O (square) piece
; 116                     ;
; 117                     ;3   7
; 118                     ; 0 0
; 119                     ; 1 1
; 120                     ; 1 1
; 121                     ; 0 0
; 122                     ;0   4
; 123     0000_0000       O_PIECE	equ	0x66
; 124     0000_0000       O_PIECE_FLIP	equ	O_PIECE	; Square is same in any rotation
; 125                     
; 126                     ; T piece
; 127                     ;
; 128                     ;3   7
; 129                     ; 0 0
; 130                     ; 1 0
; 131                     ; 1 1
; 132                     ; 1 0
; 133                     ;0   4
; 134     0000_0000       T_PIECE	equ	0x27
; 135                     
; 136                     ; T piece flipped
; 137                     ;
; 138                     ;3   7
; 139                     ; 0 0
; 140                     ; 0 1
; 141                     ; 1 1
; 142                     ; 0 1
; 143                     ;0   4
; 144     0000_0000       T_PIECE_FLIP	equ	0x72
; 145                     
; 146                     ; S piece
; 147                     ;
; 148                     ;3   7
; 149                     ; 0 0
; 150                     ; 1 0
; 151                     ; 1 1
; 152                     ; 0 1
; 153                     ;0   4
; 154     0000_0000       S_PIECE	equ	0x36
; 155     0000_0000       S_PIECE_FLIP	equ	S_PIECE	; S piece is the same rotated
; 156                     
; 157                     ; S piece
; 158                     ;
; 159                     ;3   7
; 160                     ; 0 0
; 161                     ; 0 1
; 162                     ; 1 1
; 163                     ; 1 0
; 164                     ;0   4
; 165     0000_0000       Z_PIECE	equ	0x63
; 166     0000_0000       Z_PIECE_FLIP	equ	Z_PIECE	; Z piece is the same rotated
; 167                     
; 168                     ; J piece
; 169                     ;
; 170                     ;3   7
; 171                     ; 0 0
; 172                     ; 0 1
; 173                     ; 0 1
; 174                     ; 1 1
; 175                     ;0   4
; 176     0000_0000       J_PIECE	equ	0x71
; 177                     
; 178                     ; J piece flipped
; 179                     ;
; 180                     ;3   7
; 181                     ; 0 0
; 182                     ; 1 1
; 183                     ; 1 0
; 184                     ; 1 0
; 185                     ;0   4
; 186     0000_0000       J_PIECE_FLIP	equ	0x47
; 187                     
; 188                     ; L piece
; 189                     ;
; 190                     ;3   7
; 191                     ; 0 0
; 192                     ; 1 0
; 193                     ; 1 0
; 194                     ; 1 1
; 195                     ;0   4
; 196     0000_0000       L_PIECE	equ	0x17
; 197                     
; 198                     ; L piece flipped
; 199                     ;
; 200                     ;3   7
; 201                     ; 0 0
; 202                     ; 1 1
; 203                     ; 0 1
; 204                     ; 0 1
; 205                     ;0   4
; 206     0000_0000       L_PIECE_FLIP	equ	0x74
; 207                     
; 208                     ; ================
; 209                     ; Application code
; 210                     ; ================
; 211                     
; 212                     ; Temporary variable tmp at address 0x00.
; 213                     ;
; 214                     ; Used as a halt catch for any jumps to null (0x00). This usually indicates a subroutine hasn't had its return address set.
; 215                     ; Also used as a temporary storage register, and sometimes as the return value for subroutines that only need to return a status.
; 216                     
; 217     00              	org	0x00
; 219     00 c810_ff00    tmp	halt
; 220                     
; 221                     ; ENTRY POINT
; 222     01              	org	0x01
; 225     01 8408_f1d2    	jsr	reset_game_state_ret,	reset_game_state
; 230     02 40e0_06d2    	insn ALEB_TOC_INSN	#6,	piece_kind	; Set carry if piece_kind >= 6.
; 231     03 4890_01d2    	adcto	#1,	piece_kind	; If carry set, increment by 2, otherwise increment by 1.
; 232     04 4980_07d2    	andto	#0x07,	piece_kind	; Clear all bits above first three so that value wraps.
; 235     05 4800_03d8    	st	#3,	prev_piece_x
; 236     06 4800_00d7    	st	#0,	prev_piece_y
; 237     07 4800_00d6    	st	#0,	prev_piece_rotation
; 238     08 8408_413e    main_undo_then_render	jsr	undo_piece_state_ret,	undo_piece_state
; 241     09 8408_faf2    	jsr	clear_piece_stage_ret,	clear_piece_stage
; 244     0a 8408_6942    	jsr	prep_piece_ret,	prep_piece
; 247     0b 0800_d400    	st	piece_y,	tmp
; 248     0c 8408_786a    	jsr	shift_piece_ret,	shift_piece
; 256     0d 4800_8382    	st	#stamp_piece_coll_op,	stamp_piece_op
; 257     0e 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 258     0f 006a_0008    	jne	tmp,	main_undo_then_render	; We have a collision. Undo changes and re-render.
; 261     10 4800_8782    	st	#stamp_piece_merge_op,	stamp_piece_op
; 262     11 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 265     12 8408_a390    	jsr	render_board_ret,	render_board
; 268     13 0062_1517    	jeq	stamp_flag,	main_full_render_clr
; 270     14 8408_b8a4    	jsr	line_clr_ret,	line_clr
; 272     15 8100_1500    stamp_flag	insn CLRA_INSN	stamp_flag,	0
; 273     16 4018_ff02    	jmp	main_next_piece
; 276     17 4800_8982    	st	#stamp_piece_clear_op,	stamp_piece_op
; 277     18 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 280     19 8408_3d3a    	jsr	save_piece_state_ret,	save_piece_state
; 281                     
; 286     1a e800_0000    	inwait	tmp
; 291     1b 48e0_0200    	rsbto	#02,	tmp
; 292     1c 0062_0027    	jeq	tmp,	main_move_drop
; 296     1d 48e0_0200    	rsbto	#02,	tmp
; 297     1e 0062_0032    	jeq	tmp,	main_move_left
; 301     1f 48e0_0200    	rsbto	#02,	tmp
; 302     20 0062_0034    	jeq	tmp,	main_move_right
; 306     21 48e0_0100    	rsbto	#01,	tmp
; 307     22 0062_0036    	jeq	tmp,	main_rot_left
; 311     23 48e0_0200    	rsbto	#02,	tmp
; 312     24 0062_0038    	jeq	tmp,	main_rot_right
; 313                     
; 315     25 d800_3f00    	outc	#0x3F	; Print '?'	TODO: Available variable storage
; 316     26 4018_ff1a    	jmp	main_read_input
; 319     27 4800_ff00    	st	#-1,	tmp
; 320     28 0880_00d4    	addto	tmp,	piece_y
; 321     29 8408_786a    	jsr	shift_piece_ret,	shift_piece
; 324     2a 0062_002d    	jeq	tmp,	main_move_drop_2
; 325     2b 4800_0115    	st	#1,	stamp_flag
; 326     2c 4018_ff10    	jmp	main_full_render
; 329     2d 4800_8382    	st	#stamp_piece_coll_op,	stamp_piece_op
; 330     2e 8408_8f79    	jsr	stamp_piece_ret,	stamp_piece
; 331     2f 0062_0010    	jeq	tmp,	main_full_render
; 332     30 4800_0115    	st	#1,	stamp_flag
; 333     31 4018_ff08    	jmp	main_undo_then_render
; 335     32 48e0_01d5    	dec	piece_x
; 336     33 4018_ff0d    	jmp	main_check_collision
; 338     34 4880_01d5    	inc	piece_x
; 339     35 4018_ff0d    	jmp	main_check_collision
; 341     36 48e0_01d3    	dec	piece_rotation
; 342     37 4018_ff09    	jmp	main_render_fresh_piece
; 344     38 4880_01d3    	inc	piece_rotation
; 345     39 4018_ff09    	jmp	main_render_fresh_piece
; 347                     
; 349     3a 0800_d3d6    	st	piece_rotation,	prev_piece_rotation
; 350     3b 0800_d5d8    	st	piece_x,	prev_piece_x
; 351     3c 0800_d4d7    	st	piece_y,	prev_piece_y
; 352     3d 4018_ff00    save_piece_state_ret	jmp	0
; 353                     
; 355     3e 0800_d6d3    	st	prev_piece_rotation,	piece_rotation
; 356     3f 0800_d8d5    	st	prev_piece_x,	piece_x
; 357     40 0800_d7d4    	st	prev_piece_y,	piece_y
; 358     41 4018_ff00    undo_piece_state_ret	jmp	0
; 359                     
; 360                     ; Prepare piece stage subroutine
; 361                     ; piece_kind = which piece to render. {0,1,2,3,4,5,6}
; 362                     ;
; 363                     ; Piece rotation. 4 different values for each direction. {0,1,2,3}. Only uses bottom two bits, so can increment forever.
; 364                     ;
; 366     42 0800_d247    	st	piece_kind,	prep_piece_target	; We're rendering the current piece_kind
; 373     43 0a00_d300    	lsrto	piece_rotation,	tmp	; We're rendering the current piece_rotation
; 374     44 0a00_0000    	lsr	tmp
; 375     45 0890_4747    	adcto	prep_piece_target,	prep_piece_target
; 377     46 4880_4847    	addto	#prep_piece_jmp,	prep_piece_target
; 379     47 4018_ff00    prep_piece_target	jmp	0
; 381     48 4808_6656    	insn ST_JMP_INSN	#O_PIECE,	prep_piece_value
; 382     49 4808_6656    	insn ST_JMP_INSN	#O_PIECE_FLIP,	prep_piece_value
; 383     4a 4808_f056    	insn ST_JMP_INSN	#I_PIECE,	prep_piece_value
; 384     4b 4808_f056    	insn ST_JMP_INSN	#I_PIECE_FLIP,	prep_piece_value
; 385     4c 4808_2756    	insn ST_JMP_INSN	#T_PIECE,	prep_piece_value
; 386     4d 4808_7256    	insn ST_JMP_INSN	#T_PIECE_FLIP,	prep_piece_value
; 387     4e 4808_3656    	insn ST_JMP_INSN	#S_PIECE,	prep_piece_value
; 388     4f 4808_3656    	insn ST_JMP_INSN	#S_PIECE_FLIP,	prep_piece_value
; 389     50 4808_6356    	insn ST_JMP_INSN	#Z_PIECE,	prep_piece_value
; 390     51 4808_6356    	insn ST_JMP_INSN	#Z_PIECE_FLIP,	prep_piece_value
; 391     52 4808_7156    	insn ST_JMP_INSN	#J_PIECE,	prep_piece_value
; 392     53 4808_4756    	insn ST_JMP_INSN	#J_PIECE_FLIP,	prep_piece_value
; 393     54 4808_1756    	insn ST_JMP_INSN	#L_PIECE,	prep_piece_value
; 394     55 4808_7456    	insn ST_JMP_INSN	#L_PIECE_FLIP,	prep_piece_value
; 395     56 4010_ff00    prep_piece_value	nop	; prep_piece_value stores the jump table result.
; 396                     
; 398     57 0202_d35f    	jo	piece_rotation,	prep_piece_hor
; 400     58 0800_56f7    	st	prep_piece_value,	piece_stage+5
; 401     59 4980_f0f7    	andto	#0xF0,	piece_stage+5	; Clear lower 4 bits
; 402     5a 4800_fc00    	st	#-4,	tmp
; 403     5b 0880_5656    prep_piece_vert_loop	lsl	prep_piece_value
; 404     5c 802a_005b    	incjne	tmp,	prep_piece_vert_loop
; 405     5d 0800_56f5    	st	prep_piece_value,	piece_stage+3
; 406     5e 4018_ff69    	jmp	prep_piece_ret
; 408     0000_005f       prep_piece_hor_i	equ	prep_piece_target		; Reuse prep_piece_target as the outer loop variable.
; 409     5f 4800_fd47    	st	#-3,	prep_piece_hor_i
; 411     60 4800_f962    	st	#(piece_stage+7),	prep_piece_hor_ptr
; 413     61 0800_6264    	st	prep_piece_hor_ptr,	prep_piece_hor_wb_ptr
; 414     62 c080_0000    prep_piece_hor_ptr	insn IMADD_INSN	tmp,	0	; LOAD
; 415     63 0a00_5656    	lsr	prep_piece_value
; 416     64 0a10_0000    prep_piece_hor_wb_ptr	rorto	tmp,	0	; STORE
; 417     65 48e0_0262    	rsbto	#2,	prep_piece_hor_ptr
; 418     66 40e0_f262    	insn ALEB_TOC_INSN	#piece_stage,	prep_piece_hor_ptr
; 419     67 006c_0061    	jcs	prep_piece_hor_loop_b		; Loop if #piece_stage <= prep_piece_hor_ptr
; 420     68 802a_4760    	incjne	prep_piece_hor_i,	prep_piece_hor_loop_a
; 421     69 4018_ff00    prep_piece_ret	jmp	0
; 422                     
; 423                     ; shift_piece subroutine.
; 424                     ;
; 425                     ; Shifts the piece stage downwards by the set amount stored negated in tmp.
; 426                     ; If the piece is shifted to the bottom of the board, stops and returns non-zero in tmp.
; 428     6a 0062_0078    	jeq	tmp,	shift_piece_ret
; 430     6b 0202_f878    	jo	piece_stage+6,	shift_piece_ret
; 431     6c 0202_f678    	jo	piece_stage+4,	shift_piece_ret
; 432     6d 0202_f478    	jo	piece_stage+2,	shift_piece_ret
; 433     6e 0202_f278    	jo	piece_stage+0,	shift_piece_ret
; 435     6f 0a00_f9f9    	lsr	piece_stage+7
; 436     70 0a10_f8f8    	ror	piece_stage+6
; 437     71 0a00_f7f7    	lsr	piece_stage+5
; 438     72 0a10_f6f6    	ror	piece_stage+4
; 439     73 0a00_f5f5    	lsr	piece_stage+3
; 440     74 0a10_f4f4    	ror	piece_stage+2
; 441     75 0a00_f3f3    	lsr	piece_stage+1
; 442     76 0a10_f2f2    	ror	piece_stage+0
; 443     77 802a_006b    	incjne	tmp,	shift_piece_loop
; 444     78 4018_ff00    shift_piece_ret	jmp	0	; Return from subroutine
; 445                     
; 446                     ; stamp_piece: Stamp piece board subroutine.
; 447                     ;
; 448                     ; This subroutine handles several functions:
; 449                     ;
; 450                     ; * ADDing the piece_stage to the gameboard (Stamping the piece down)
; 451                     ; * BICing the piece_stage to the gameboard (Clearing the piece off)
; 452                     ; * Checking for any common bits (AND result > 0) between piece_stage and gameboard (Checking for collision).
; 453                     ;
; 454                     ; stamp_piece_op must be set to #stamp_piece_coll_op, #stamp_piece_merge_op, or #stamp_piece_clear_op before executing.
; 455                     ;
; 456                     ; When executing stamp_piece_coll_op, tmp will be non-zero if a collision occured.
; 457                     ;
; 460     79 4800_f27f    	st	#piece_stage,	stamp_piece_ps_ptr
; 461     7a 4800_db81    	st	#gameboard,	stamp_piece_gb_ptr
; 462     7b 0880_d581    	addto	piece_x,	stamp_piece_gb_ptr
; 463     7c 0880_d581    	addto	piece_x,	stamp_piece_gb_ptr	; stamp_piece_gb_ptr = #gameboard + 2 * piece_x
; 466     7d 4800_f800    	st	#-PIECE_STAGE_SIZE,	tmp
; 468                     
; 469     7e 8100_7e00    stamp_piece_ps_val	insn CLRA_INSN	stamp_piece_ps_val,	0	; Self clearing variable stamp_piece_ps_val
; 470     7f 8080_7e00    stamp_piece_ps_ptr	add	stamp_piece_ps_val,	0	; Piece stage LOAD
; 472     80 8100_8000    stamp_piece_gb_val	insn CLRA_INSN	stamp_piece_gb_val,	0	; Self clearing variable stamp_piece_gb_val
; 473     81 8080_8000    stamp_piece_gb_ptr	add	stamp_piece_gb_val,	0	; Game board LOAD
; 474                     
; 476     82 4018_ff00    stamp_piece_op	jmp	0	; This is set before calling the subroutine
; 479     83 0980_7e80    	andto	stamp_piece_ps_val,	stamp_piece_gb_val
; 480     84 0062_808c    	jeq	stamp_piece_gb_val,	stamp_piece_loop_end	; If collision didn't occur, keep looping.
; 482     85 0800_8000    	st	stamp_piece_gb_val,	tmp	; Store colliding bits in tmp
; 483     86 4018_ff8f    	jmp	stamp_piece_ret		; Break out of loop and exit
; 487     87 0880_7e80    	addto	stamp_piece_ps_val,	stamp_piece_gb_val
; 488     88 4018_ff8a    	jmp	stamp_piece_writeback
; 490     89 09c0_7e80    	bicto	stamp_piece_ps_val,	stamp_piece_gb_val
; 492     8a 0800_818b    	st	stamp_piece_gb_ptr,	stamp_piece_gb_wb_ptr
; 493     8b 0800_8000    stamp_piece_gb_wb_ptr	st	stamp_piece_gb_val,	0
; 496     8c 8020_7f00    rem_bits_mask	insn INCA_INSN	stamp_piece_ps_ptr,	0	; Variable storage for rem_bits_mask, in rem_bits
; 497     8d 8020_8100    	insn INCA_INSN	stamp_piece_gb_ptr,	0
; 498     8e 802a_007e    	incjne	tmp,	stamp_piece_loop
; 499     8f 4018_ff00    stamp_piece_ret	jmp	0	; Return from subroutine
; 500                     
; 501                     ; render_board: Render board subroutine
; 502                     ;
; 503                     ; How:
; 504                     ; Render the gameboard from left to right, top to bottom, to give the most simple console output (avoids ANSI console cursor movement).
; 505                     ;
; 506                     ; LOOP A: Starts at top of the board and then switches to bottom half of the board. The gameboard ptr offset changes from 1 to 0. (or 2 -> 1 -> 0 if using a bigger game board)
; 507                     ; LOOP B: Work down the rows using a single byte bitmask, shifting it right each iteration.
; 508                     ; LOOP C: Work along the columns from 0 to 10, incrementing the gameboard ptr by 2 each iteration.
; 509                     ;         Decide whether to render a block or empty character by ANDing the gameboard ptr value with the current bitmask
; 510                     ;
; 512     90 4800_0195    	st	#(GAMEBOARD_STRIDE-1),	render_board_ptr	; Start the render_board_ptr with an offset of 1 to render the top half of the board.
; 513                     ; LOOP A
; 515     91 4880_db95    	addto	#gameboard,	render_board_ptr	; Adjust the render_board_ptr to point into the gameboard. TODO: Move out of loop after implementing ALEB_TOC_INSN below since this won't be changed.
; 516     92 4800_809c    	st	#%1000_0000,	render_board_mask	; Initialize the bitmask for testing the column byte for which row is set
; 517                     ; LOOP B
; 519     93 4800_f69d    	st	#(-GAMEBOARD_COLS),	render_board_col	; Prepare column loop counter
; 520                     ; LOOP C
; 522     94 0800_9c00    	st	render_board_mask,	tmp
; 523     95 8180_0000    render_board_ptr	insn AND_INSN	tmp,	0	; Indirect AND, store result in tmp
; 526     96 006a_0098    	jne	tmp,	render_board_print_a
; 527     97 d808_7e99    	insn OUTC_JMP_INSN	#EMPTY_CHAR,	render_board_print_b	; Print empty char and jump over the block char print
; 529     98 d800_2300    line_clr_i	outc	#BLOCK_CHAR		; Used as variable storage for line_clr_i in line_clr
; 531     99 4880_0295    	addto	#GAMEBOARD_STRIDE,	render_board_ptr	; Move onto next column byte
; 532     9a 802a_9d94    	incjne	render_board_col,	render_board_loop_c	; If we still have columns to render, continue LOOP C
; 533                     ; END LOOP C
; 534     9b 48e0_1495    	rsbto	#GAMEBOARD_SIZE,	render_board_ptr	; Reset render_board_ptr to pre-loop state
; 538     9c d800_0d00    render_board_mask	outc	#CR_CHAR		; render_board_mask: The row bitmask for selecting the row to render
; 539     9d d800_0a00    render_board_col	outc	#LF_CHAR		; render_board_col: The current column iteration loop counter.
; 540                     
; 543     9e 820a_9c93    	insn LSR_JCC_INSN	render_board_mask,	render_board_loop_b
; 544                     ; END LOOP B
; 547     9f 48e0_dc95    	rsbto	#(gameboard+1),	render_board_ptr	; TODO: Can replace with ALEB_TOC_INSN + jcs
; 549     a0 0069_9591    	jge	render_board_ptr,	render_board_loop_a	; Otherwise continue LOOP A.
; 551     a1 d800_0d00    get_full_lines_mask	outc	#CR_CHAR		; get_full_lines_mask: variable for get_full_lines
; 552     a2 d800_0a00    	outc	#LF_CHAR
; 553                     ; END LOOP A
; 554     a3 4018_ff00    render_board_ret	jmp	0		; Return from subroutine.
; 555                     
; 556                     ; line_clr: Clears all full rows from the gameboard.
; 557                     ;
; 558                     ; How:
; 559                     ; 1. Call get_full_lines to generate a bitmask of all the complete rows
; 560                     ; 2. Call rem_bits on each column in the gameboard with a copy of the complete rows bitmask.
; 561                     ; 3. Copy the result back over the gameboard.
; 562                     ;
; 565     a4 8408_c2b9    	jsr	get_full_lines_ret,	get_full_lines
; 566                     
; 568     a5 006a_a1a8    	jne	get_full_lines_mask+0,	line_clr_do_remove
; 569     a6 006a_a2a8    	jne	get_full_lines_mask+1,	line_clr_do_remove
; 570     a7 4018_ffb8    	jmp	line_clr_ret	; Fastpath to returning from the subroutine
; 571                     
; 573                     
; 576     a8 8100_a800    rem_bits_value	insn CLRA_INSN	rem_bits_value+0,	0	; rem_bits_value: 2 bytes. Variable storage for rem_bits.
; 577     a9 8100_a900    	insn CLRA_INSN	rem_bits_value+1,	0	; Self clearing.
; 578                     
; 580     aa 4800_f698    	st	#(-GAMEBOARD_COLS),	line_clr_i	; Prep the loop counter
; 581                     
; 583     ab 4800_dbaf    	st	#gameboard,	line_clr_read_ptr_0
; 585                     
; 586                     ; Line clear loop. It will call rem_bits with the line clear mask and each column of the gameboard.
; 590     ac 0800_a18c    	st	get_full_lines_mask+0,	rem_bits_mask+0	; Prep mask +0
; 591     ad 0800_a28d    	st	get_full_lines_mask+1,	rem_bits_mask+1	; Prep mask +1
; 592                     
; 594     ae 0820_afb0    	insn INCTO_INSN	line_clr_read_ptr_0,	line_clr_read_ptr_1	; Prep ptr +1
; 596     af 8080_a800    line_clr_read_ptr_0	add	rem_bits_value+0,	0	; Load +0
; 597     b0 8080_a900    line_clr_read_ptr_1	add	rem_bits_value+1,	0	; Load +1
; 598                     
; 600     b1 8408_d1c3    	jsr	rem_bits_ret,	rem_bits
; 601                     
; 603     b2 0800_afb4    	st	line_clr_read_ptr_0,	line_clr_write_ptr_0	; Prep ptr +0
; 604     b3 0800_b0b5    	st	line_clr_read_ptr_1,	line_clr_write_ptr_1	; Prep ptr +1
; 606     b4 0800_c300    line_clr_write_ptr_0	st	rem_bits_result+0,	0	; Store +0
; 607     b5 0800_c400    line_clr_write_ptr_1	st	rem_bits_result+1,	0	; Store +1
; 608                     
; 610     b6 4880_02af    	addto	#2,	line_clr_read_ptr_0	; Iterate ptr +0
; 611     b7 802a_98ac    	incjne	line_clr_i,	line_clr_loop	; Loop
; 612     b8 4018_ff00    line_clr_ret	jmp	0		; Return from subroutine
; 613                     
; 614                     ; get_full_lines
; 615                     ;
; 616                     ; Generates a 2 byte, 16 bit bitmask indicating which rows in the gameboard are filled.
; 617                     ; This is the bitwise AND of all columns in the gameboard.
; 618                     ;
; 619                     ;get_full_lines_mask	skip	2	; Stored in render_board
; 621     b9 4800_f600    	st	#(-GAMEBOARD_COLS),	tmp
; 622     ba 4800_ffa1    	st	#0xFF,	get_full_lines_mask+0
; 623     bb 4800_ffa2    	st	#0xFF,	get_full_lines_mask+1
; 624     bc 4800_dbbe    	st	#gameboard,	get_full_lines_ptr_0
; 626     bd 0820_bebf    	insn INCTO_INSN	get_full_lines_ptr_0,	get_full_lines_ptr_1
; 627     be 8180_a100    get_full_lines_ptr_0	insn AND_INSN	get_full_lines_mask+0,	0
; 628     bf 8180_a200    get_full_lines_ptr_1	insn AND_INSN	get_full_lines_mask+1,	0
; 629     c0 4880_02be    	addto	#2,	get_full_lines_ptr_0
; 630     c1 802a_00bd    	incjne	tmp,	get_full_lines_loop
; 631     c2 4018_ff00    get_full_lines_ret	jmp	0		; Return from subroutine
; 632                     
; 633                     ; rem_bits
; 634                     ;
; 635                     ; Remove the bits from rem_bits_value in the positions they are set in rem_bits_mask.
; 636                     ; For each bit removed, the more significant bits are shifted right to fill its place.
; 637                     ; The leftmost most significant bits are filled with zeroes.
; 638                     ;
; 639                     ; The output is placed in rem_bits_result.
; 640                     ; rem_bits_mask and rem_bits_value are zeroed as a result of this process.
; 641                     ;
; 642                     ;rem_bits_mask	skip	2	; Stored in stamp_piece
; 643                     ;rem_bits_value	skip	2	; Stored in line_clr
; 646     c3 8100_c300    rem_bits_result	insn CLRA_INSN	rem_bits_result+0,	0	; Self clearing variables
; 647     c4 8100_c400    	insn CLRA_INSN	rem_bits_result+1,	0
; 649     c5 4800_f000    	st	#-16,	tmp	; Loop 16 times
; 651     c6 0880_8c8c    	lsl	rem_bits_mask+0		; Logical shift left mask (0 -> bit 0)
; 652     c7 0890_8d8d    	rol	rem_bits_mask+1		; (bit 15 -> carry)
; 653     c8 0064_00cc    	jcc	rem_bits_A		; GOTO A if carry clear
; 655     c9 0880_a8a8    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 656     ca 0890_a9a9    	rol	rem_bits_value+1		; The carry result is discarded.
; 660     cb 4018_ffd0    	jmp	rem_bits_loop_end
; 662     cc 0880_a8a8    	lsl	rem_bits_value+0		; Logical shift left value (0 -> bit 0)
; 663     cd 0890_a9a9    	rol	rem_bits_value+1		; (bit 15 -> carry)
; 664     ce 0890_c3c3    	rol	rem_bits_result+0		; Rotate left to save the carry into result (carry -> bit 0)
; 665     cf 0890_c4c4    	rol	rem_bits_result+1		; Carry from rotating result is discarded.
; 666     d0 802a_00c6    rem_bits_loop_end	incjne	tmp,	rem_bits_loop	; Loop
; 667     d1 4018_ff00    rem_bits_ret	jmp	0		; Return from subroutine
; 668                     
; 669                     ; VARIABLES
; 670                     
; 671                     ; Game state
; 672                     ;
; 673                     
; 674                     ; reset_game_state: Resets all game variables and the game board.
; 676                     
; 677                     ;lines_cleared	insn CLRA_INSN	lines_cleared,	0
; 678     d2 8100_d200    piece_kind	insn CLRA_INSN	piece_kind,	0
; 679     d3 8100_d300    piece_rotation	insn CLRA_INSN	piece_rotation,	0
; 680     d4 8100_d400    piece_y	insn CLRA_INSN	piece_y,	0
; 681     d5 8100_d500    piece_x	insn CLRA_INSN	piece_x,	0
; 682     d6 8100_d600    prev_piece_rotation	insn CLRA_INSN	prev_piece_rotation,	0
; 683     d7 8100_d700    prev_piece_y	insn CLRA_INSN	prev_piece_y,	0
; 684     d8 8100_d800    prev_piece_x	insn CLRA_INSN	prev_piece_x,	0
; 685                     
; 686                     ; Game board
; 687                     ;
; 688                     ; The gameboard is made up of bytes stacked vertically.
; 689                     ; There are two bytes end to end for each column, 10 colums wide.
; 690                     ; This makes a 16x10 game board, totalling 20 bytes.
; 691                     ; The lower, even index byte is at the bottom of the board. The higher, odd index byte is at the top.
; 692                     ; The less significant bits in each byte are towards the bottom of the board, the higher significant bits are towards the top.
; 693                     ;
; 694                     ; Ideally we would use three bytes per row to make a 24x10 gameboard in 30 bytes,
; 695                     ; but this increases both gameboard storage size and the code required to deal with it.
; 696                     ;
; 697                     ; Gameboard layout (byte.bit):
; 698                     ;
; 699                     ; 1.7 3.7 5.7 7.7 9.7 11.7 13.7 15.7 17.7 19.7
; 700                     ; 1.6 3.6 5.6 7.6 9.6 11.6 13.6 15.6 17.6 19.6
; 701                     ; 1.5 3.5 5.5 7.5 9.5 11.5 13.5 15.5 17.5 19.5
; 702                     ; 1.4 3.4 5.4 7.4 9.4 11.4 13.4 15.4 17.4 19.4
; 703                     ; 1.3 3.3 5.3 7.3 9.3 11.3 13.3 15.3 17.3 19.3
; 704                     ; 1.2 3.2 5.2 7.2 9.2 11.2 13.2 15.2 17.2 19.2
; 705                     ; 1.1 3.1 5.1 7.1 9.1 11.1 13.1 15.1 17.1 19.1
; 706                     ; 1.0 3.0 5.0 7.0 9.0 11.0 13.0 15.0 17.0 19.0
; 707                     ; 0.7 2.7 4.7 6.7 8.7 10.7 12.7 14.7 16.7 18.7
; 708                     ; 0.6 2.6 4.6 6.6 8.6 10.6 12.6 14.6 16.6 18.6
; 709                     ; 0.5 2.5 4.5 6.5 8.5 10.5 12.5 14.5 16.5 18.5
; 710                     ; 0.4 2.4 4.4 6.4 8.4 10.4 12.4 14.4 16.4 18.4
; 711                     ; 0.3 2.3 4.3 6.3 8.3 10.3 12.3 14.3 16.3 18.3
; 712                     ; 0.2 2.2 4.2 6.2 8.2 10.2 12.2 14.2 16.2 18.2
; 713                     ; 0.1 2.1 4.1 6.1 8.1 10.1 12.1 14.1 16.1 18.1
; 714                     ; 0.0 2.0 4.0 6.0 8.0 10.0 12.0 14.0 16.0 18.0
; 715                     ;
; 716                     ; Neat trick: Since every instruction of the gameboard would normally be a HALT instruction and mostly wasted,
; 717                     ; we can actually use the instruction to clear it's own B value. This gives us gameboard clearing and piece stage clearing "for free".
; 718                     
; 719     d9 0000_00ff    	insn 0x00000000	,	0xFF		; A wall for the gameboard to provide collisions at -1
; 720     da 0000_00ff    	insn 0x00000000	,	0xFF
; 721                     
; 723     db 8100_db00    	insn CLRA_INSN	gameboard+0,	0
; 724     dc 8100_dc00    	insn CLRA_INSN	gameboard+1,	0
; 725     dd 8100_dd00    	insn CLRA_INSN	gameboard+2,	0
; 726     de 8100_de00    	insn CLRA_INSN	gameboard+3,	0
; 727     df 8100_df00    	insn CLRA_INSN	gameboard+4,	0
; 728     e0 8100_e000    	insn CLRA_INSN	gameboard+5,	0
; 729     e1 8100_e100    	insn CLRA_INSN	gameboard+6,	0
; 730     e2 8100_e200    	insn CLRA_INSN	gameboard+7,	0
; 731     e3 8100_e300    	insn CLRA_INSN	gameboard+8,	0
; 732     e4 8100_e400    	insn CLRA_INSN	gameboard+9,	0
; 733     e5 8100_e500    	insn CLRA_INSN	gameboard+10,	0
; 734     e6 8100_e600    	insn CLRA_INSN	gameboard+11,	0
; 735     e7 8100_e700    	insn CLRA_INSN	gameboard+12,	0
; 736     e8 8100_e800    	insn CLRA_INSN	gameboard+13,	0
; 737     e9 8100_e900    	insn CLRA_INSN	gameboard+14,	0
; 738     ea 8100_ea00    	insn CLRA_INSN	gameboard+15,	0
; 739     eb 8100_eb00    	insn CLRA_INSN	gameboard+16,	0
; 740     ec 8100_ec00    	insn CLRA_INSN	gameboard+17,	0
; 741     ed 8100_ed00    	insn CLRA_INSN	gameboard+18,	0
; 742     ee 8100_ee00    	insn CLRA_INSN	gameboard+19,	0
; 743     ef 0000_00ff    	insn 0x00000000	,	0xFF	; no-op/clc, but specified as custom instruction se we can set B value.
; 744     f0 0000_00ff    	insn 0x00000000	,	0xFF	; A wall for the gameboard to provide collisions at 11
; 745     f1 4018_ff00    reset_game_state_ret	jmp	0
; 746                     
; 747                     ; Piece stage
; 748                     ;
; 749                     ; Piece stage layout (byte.bit):
; 750                     ;
; 751                     ; 1.7 3.7 5.7 7.7
; 752                     ; 1.6 3.6 5.6 7.6
; 753                     ; 1.5 3.5 5.5 7.5
; 754                     ; 1.4 3.4 5.4 7.4
; 755                     ; 1.3 3.3 5.3 7.3
; 756                     ; 1.2 3.2 5.2 7.2
; 757                     ; 1.1 3.1 5.1 7.1
; 758                     ; 1.0 3.0 5.0 7.0
; 759                     ; 0.7 2.7 4.7 6.7
; 760                     ; 0.6 2.6 4.6 6.6
; 761                     ; 0.5 2.5 4.5 6.5
; 762                     ; 0.4 2.4 4.4 6.4
; 763                     ; 0.3 2.3 4.3 6.3
; 764                     ; 0.2 2.2 4.2 6.2
; 765                     ; 0.1 2.1 4.1 6.1
; 766                     ; 0.0 2.0 4.0 6.0
; 767                     ;
; 770     f2 8100_f200    	insn CLRA_INSN	piece_stage+0,	0
; 771     f3 8100_f300    	insn CLRA_INSN	piece_stage+1,	0
; 772     f4 8100_f400    	insn CLRA_INSN	piece_stage+2,	0
; 773     f5 8100_f500    	insn CLRA_INSN	piece_stage+3,	0
; 774     f6 8100_f600    	insn CLRA_INSN	piece_stage+4,	0
; 775     f7 8100_f700    	insn CLRA_INSN	piece_stage+5,	0
; 776     f8 8100_f800    	insn CLRA_INSN	piece_stage+6,	0
; 777     f9 8100_f900    	insn CLRA_INSN	piece_stage+7,	0
; 778     fa 4018_ff00    clear_piece_stage_ret	jmp	0
; 779                     
; 780                     ; Placeholder label to easily see how big the program is from the symbol table

; 0 errors detected in pass 2

; Symbol table:
; ALEB_TOC_INSN = 0xe00000
; ALTB_TOC_INSN = 0xc00000
; AND_INSN = 0x81800000
; A_CHAR = 0x41
; BAR_CHAR = 0x7c
; BLOCK_CHAR = 0x23
; B_CHAR = 0x42
; CLRA_INSN = 0x81000000
; CR_CHAR = 0xd
; C_CHAR = 0x43
; D_CHAR = 0x44
; EMPTY_CHAR = 0x7e
; END_OF_PROGRAM = 0xfb
; E_CHAR = 0x45
; F_CHAR = 0x46
; GAMEBOARD_COLS = 0xa
; GAMEBOARD_SIZE = 0x14
; GAMEBOARD_STRIDE = 0x2
; G_CHAR = 0x47
; H_CHAR = 0x48
; IMADD_INSN = 0xc0800000
; INCA_INSN = 0x80200000
; INCJMP_INSN = 0x80240000
; INCTO_INSN = 0x8200000
; I_CHAR = 0x49
; I_PIECE = 0xf0
; I_PIECE_FLIP = 0xf0
; J_CHAR = 0x4a
; J_PIECE = 0x71
; J_PIECE_FLIP = 0x47
; K_CHAR = 0x4b
; LF_CHAR = 0xa
; LSR_JCC_INSN = 0x820a0000
; L_CHAR = 0x4c
; L_PIECE = 0x17
; L_PIECE_FLIP = 0x74
; M_CHAR = 0x4d
; N_CHAR = 0x4e
; OUTC_JMP_INSN = 0x98080000
; O_CHAR = 0x4f
; O_PIECE = 0x66
; O_PIECE_FLIP = 0x66
; PIECE_STAGE_SIZE = 0x8
; P_CHAR = 0x50
; Q_CHAR = 0x51
; R_CHAR = 0x52
; SPACE_CHAR = 0x20
; ST_JMP_INSN = 0x8080000
; S_CHAR = 0x53
; S_PIECE = 0x36
; S_PIECE_FLIP = 0x36
; T_CHAR = 0x54
; T_PIECE = 0x27
; T_PIECE_FLIP = 0x72
; U_CHAR = 0x55
; V_CHAR = 0x56
; W_CHAR = 0x57
; X_CHAR = 0x58
; Y_CHAR = 0x59
; ZERO_CHAR = 0x30
; Z_CHAR = 0x5a
; Z_PIECE = 0x63
; Z_PIECE_FLIP = 0x63
; clear_piece_stage = 0xf2
; clear_piece_stage_ret = 0xfa
; gameboard = 0xdb
; get_full_lines = 0xb9
; get_full_lines_loop = 0xbd
; get_full_lines_mask = 0xa1
; get_full_lines_ptr_0 = 0xbe
; get_full_lines_ptr_1 = 0xbf
; get_full_lines_ret = 0xc2
; line_clr = 0xa4
; line_clr_do_remove = 0xa8
; line_clr_i = 0x98
; line_clr_loop = 0xac
; line_clr_read_ptr_0 = 0xaf
; line_clr_read_ptr_1 = 0xb0
; line_clr_ret = 0xb8
; line_clr_write_ptr_0 = 0xb4
; line_clr_write_ptr_1 = 0xb5
; main = 0x1
; main_check_collision = 0xd
; main_end = 0x3a
; main_full_render = 0x10
; main_full_render_clr = 0x17
; main_move_drop = 0x27
; main_move_drop_2 = 0x2d
; main_move_left = 0x32
; main_move_right = 0x34
; main_next_piece = 0x2
; main_read_input = 0x1a
; main_render_fresh_piece = 0x9
; main_rot_left = 0x36
; main_rot_right = 0x38
; main_undo_then_render = 0x8
; piece_kind = 0xd2
; piece_rotation = 0xd3
; piece_stage = 0xf2
; piece_x = 0xd5
; piece_y = 0xd4
; prep_piece = 0x42
; prep_piece_hor = 0x5f
; prep_piece_hor_i = 0x47
; prep_piece_hor_loop_a = 0x60
; prep_piece_hor_loop_b = 0x61
; prep_piece_hor_ptr = 0x62
; prep_piece_hor_wb_ptr = 0x64
; prep_piece_jmp = 0x48
; prep_piece_ret = 0x69
; prep_piece_target = 0x47
; prep_piece_value = 0x56
; prep_piece_vert = 0x58
; prep_piece_vert_loop = 0x5b
; prev_piece_rotation = 0xd6
; prev_piece_x = 0xd8
; prev_piece_y = 0xd7
; rem_bits = 0xc3
; rem_bits_A = 0xcc
; rem_bits_loop = 0xc6
; rem_bits_loop_end = 0xd0
; rem_bits_mask = 0x8c
; rem_bits_result = 0xc3
; rem_bits_ret = 0xd1
; rem_bits_value = 0xa8
; render_board = 0x90
; render_board_col = 0x9d
; render_board_loop_a = 0x91
; render_board_loop_b = 0x93
; render_board_loop_c = 0x94
; render_board_mask = 0x9c
; render_board_print_a = 0x98
; render_board_print_b = 0x99
; render_board_ptr = 0x95
; render_board_ret = 0xa3
; reset_game_state = 0xd2
; reset_game_state_ret = 0xf1
; save_piece_state = 0x3a
; save_piece_state_ret = 0x3d
; shift_piece = 0x6a
; shift_piece_loop = 0x6b
; shift_piece_ret = 0x78
; stamp_flag = 0x15
; stamp_piece = 0x79
; stamp_piece_clear_op = 0x89
; stamp_piece_coll_op = 0x83
; stamp_piece_gb_ptr = 0x81
; stamp_piece_gb_val = 0x80
; stamp_piece_gb_wb_ptr = 0x8b
; stamp_piece_loop = 0x7e
; stamp_piece_loop_end = 0x8c
; stamp_piece_merge_op = 0x87
; stamp_piece_op = 0x82
; stamp_piece_ps_ptr = 0x7f
; stamp_piece_ps_val = 0x7e
; stamp_piece_ret = 0x8f
; stamp_piece_writeback = 0x8a
; stop = 0x0
; tmp = 0x0
; undo_piece_state = 0x3e
; undo_piece_state_ret = 0x41

; Memory image:
00: c810ff00 8408f1d2 40e006d2 489001d2 498007d2 480003d8 480000d7 480000d6
08: 8408413e 8408faf2 84086942 0800d400 8408786a 48008382 84088f79 006a0008
10: 48008782 84088f79 8408a390 00621517 8408b8a4 81001500 4018ff02 48008982
18: 84088f79 84083d3a e8000000 48e00200 00620027 48e00200 00620032 48e00200
20: 00620034 48e00100 00620036 48e00200 00620038 d8003f00 4018ff1a 4800ff00
28: 088000d4 8408786a 0062002d 48000115 4018ff10 48008382 84088f79 00620010
30: 48000115 4018ff08 48e001d5 4018ff0d 488001d5 4018ff0d 48e001d3 4018ff09
38: 488001d3 4018ff09 0800d3d6 0800d5d8 0800d4d7 4018ff00 0800d6d3 0800d8d5
40: 0800d7d4 4018ff00 0800d247 0a00d300 0a000000 08904747 48804847 4018ff00
48: 48086656 48086656 4808f056 4808f056 48082756 48087256 48083656 48083656
50: 48086356 48086356 48087156 48084756 48081756 48087456 4010ff00 0202d35f
58: 080056f7 4980f0f7 4800fc00 08805656 802a005b 080056f5 4018ff69 4800fd47
60: 4800f962 08006264 c0800000 0a005656 0a100000 48e00262 40e0f262 006c0061
68: 802a4760 4018ff00 00620078 0202f878 0202f678 0202f478 0202f278 0a00f9f9
70: 0a10f8f8 0a00f7f7 0a10f6f6 0a00f5f5 0a10f4f4 0a00f3f3 0a10f2f2 802a006b
78: 4018ff00 4800f27f 4800db81 0880d581 0880d581 4800f800 81007e00 80807e00
80: 81008000 80808000 4018ff00 09807e80 0062808c 08008000 4018ff8f 08807e80
88: 4018ff8a 09c07e80 0800818b 08008000 80207f00 80208100 802a007e 4018ff00
90: 48000195 4880db95 4800809c 4800f69d 08009c00 81800000 006a0098 d8087e99
98: d8002300 48800295 802a9d94 48e01495 d8000d00 d8000a00 820a9c93 48e0dc95
a0: 00699591 d8000d00 d8000a00 4018ff00 8408c2b9 006aa1a8 006aa2a8 4018ffb8
a8: 8100a800 8100a900 4800f698 4800dbaf 0800a18c 0800a28d 0820afb0 8080a800
b0: 8080a900 8408d1c3 0800afb4 0800b0b5 0800c300 0800c400 488002af 802a98ac
b8: 4018ff00 4800f600 4800ffa1 4800ffa2 4800dbbe 0820bebf 8180a100 8180a200
c0: 488002be 802a00bd 4018ff00 8100c300 8100c400 4800f000 08808c8c 08908d8d
c8: 006400cc 0880a8a8 0890a9a9 4018ffd0 0880a8a8 0890a9a9 0890c3c3 0890c4c4
d0: 802a00c6 4018ff00 8100d200 8100d300 8100d400 8100d500 8100d600 8100d700
d8: 8100d800 000000ff 000000ff 8100db00 8100dc00 8100dd00 8100de00 8100df00
e0: 8100e000 8100e100 8100e200 8100e300 8100e400 8100e500 8100e600 8100e700
e8: 8100e800 8100e900 8100ea00 8100eb00 8100ec00 8100ed00 8100ee00 000000ff
f0: 000000ff 4018ff00 8100f200 8100f300 8100f400 8100f500 8100f600 8100f700
f8: 8100f800 8100f900 4018ff00
